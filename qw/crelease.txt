@@name=crelease
@@format=raw
@@hash=Z7p9UDGyuj
@@date=29/10/2024 19:47:47

[.gitignore:.gitignore]
Z7p9UDGyuj============================================================
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### IntelliJ IDEA ###
.idea/modules.xml
.idea/jarRepositories.xml
.idea/compiler.xml
.idea/libraries/
*.iws
*.iml
*.ipr

### Eclipse ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

### Mac OS ###
.DS_Store
Z7p9UDGyuj============================================================

[.gitignore:.idea\.gitignore]
Z7p9UDGyuj============================================================
# Default ignored files
/shelf/
/workspace.xml
# Editor-based HTTP Client requests
/httpRequests/
# Datasource local storage ignored files
/dataSources/
/dataSources.local.xml

Z7p9UDGyuj============================================================

[codeStyleConfig.xml:.idea\codeStyles\codeStyleConfig.xml]
Z7p9UDGyuj============================================================
<component name="ProjectCodeStyleConfiguration">
  <state>
    <option name="PREFERRED_PROJECT_CODE_STYLE" value="Default" />
  </state>
</component>
Z7p9UDGyuj============================================================

[compiler.xml:.idea\compiler.xml]
Z7p9UDGyuj============================================================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CompilerConfiguration">
    <annotationProcessing>
      <profile name="Maven default annotation processors profile" enabled="true">
        <sourceOutputDir name="target/generated-sources/annotations" />
        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
        <outputRelativeToContentRoot value="true" />
        <module name="crelease" />
      </profile>
    </annotationProcessing>
  </component>
</project>
Z7p9UDGyuj============================================================

[encodings.xml:.idea\encodings.xml]
Z7p9UDGyuj============================================================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="Encoding">
    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
  </component>
</project>
Z7p9UDGyuj============================================================

[Project_Default.xml:.idea\inspectionProfiles\Project_Default.xml]
Z7p9UDGyuj============================================================
<component name="InspectionProjectProfileManager">
  <profile version="1.0">
    <option name="myName" value="Project Default" />
    <inspection_tool class="GrazieInspection" enabled="false" level="GRAMMAR_ERROR" enabled_by_default="false" />
    <inspection_tool class="LanguageDetectionInspection" enabled="false" level="WARNING" enabled_by_default="false" />
    <inspection_tool class="SpellCheckingInspection" enabled="false" level="TYPO" enabled_by_default="false">
      <option name="processCode" value="true" />
      <option name="processLiterals" value="true" />
      <option name="processComments" value="true" />
    </inspection_tool>
  </profile>
</component>
Z7p9UDGyuj============================================================

[jarRepositories.xml:.idea\jarRepositories.xml]
Z7p9UDGyuj============================================================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="RemoteRepositoriesConfiguration">
    <remote-repository>
      <option name="id" value="central" />
      <option name="name" value="Central Repository" />
      <option name="url" value="http://binario.caixa:8081/repository/caixa-group-br/" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="central" />
      <option name="name" value="Maven Central repository" />
      <option name="url" value="https://repo1.maven.org/maven2" />
    </remote-repository>
    <remote-repository>
      <option name="id" value="jboss.community" />
      <option name="name" value="JBoss Community repository" />
      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
    </remote-repository>
  </component>
</project>
Z7p9UDGyuj============================================================

[jsLibraryMappings.xml:.idea\jsLibraryMappings.xml]
Z7p9UDGyuj============================================================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="JavaScriptLibraryMappings">
    <file url="file://$PROJECT_DIR$" libraries="{font-awesome, handlebars.js, tailwindcss}" />
  </component>
</project>
Z7p9UDGyuj============================================================

[material_theme_project_new.xml:.idea\material_theme_project_new.xml]
Z7p9UDGyuj============================================================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="MaterialThemeProjectNewConfig">
    <option name="metadata">
      <MTProjectMetadataState>
        <option name="migrated" value="true" />
        <option name="pristineConfig" value="false" />
        <option name="userId" value="576e5970:1903aa4879a:-7ffe" />
      </MTProjectMetadataState>
    </option>
  </component>
</project>
Z7p9UDGyuj============================================================

[misc.xml:.idea\misc.xml]
Z7p9UDGyuj============================================================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ExternalStorageConfigurationManager" enabled="true" />
  <component name="MavenProjectsManager">
    <option name="originalFiles">
      <list>
        <option value="$PROJECT_DIR$/pom.xml" />
      </list>
    </option>
  </component>
  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="17" project-jdk-type="JavaSDK">
    <output url="file://$PROJECT_DIR$/out" />
  </component>
</project>
Z7p9UDGyuj============================================================

[uiDesigner.xml:.idea\uiDesigner.xml]
Z7p9UDGyuj============================================================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="Palette2">
    <group name="Swing">
      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
      </item>
      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
      </item>
      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
      </item>
      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
      </item>
      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
        <initial-values>
          <property name="text" value="Button" />
        </initial-values>
      </item>
      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
        <initial-values>
          <property name="text" value="RadioButton" />
        </initial-values>
      </item>
      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
        <initial-values>
          <property name="text" value="CheckBox" />
        </initial-values>
      </item>
      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
        <initial-values>
          <property name="text" value="Label" />
        </initial-values>
      </item>
      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
          <preferred-size width="150" height="-1" />
        </default-constraints>
      </item>
      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
          <preferred-size width="150" height="-1" />
        </default-constraints>
      </item>
      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
          <preferred-size width="150" height="-1" />
        </default-constraints>
      </item>
      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
          <preferred-size width="150" height="50" />
        </default-constraints>
      </item>
      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
          <preferred-size width="150" height="50" />
        </default-constraints>
      </item>
      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
          <preferred-size width="150" height="50" />
        </default-constraints>
      </item>
      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
      </item>
      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
          <preferred-size width="150" height="50" />
        </default-constraints>
      </item>
      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
          <preferred-size width="150" height="50" />
        </default-constraints>
      </item>
      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
          <preferred-size width="150" height="50" />
        </default-constraints>
      </item>
      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
          <preferred-size width="200" height="200" />
        </default-constraints>
      </item>
      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
          <preferred-size width="200" height="200" />
        </default-constraints>
      </item>
      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
      </item>
      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
      </item>
      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
      </item>
      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
      </item>
      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
          <preferred-size width="-1" height="20" />
        </default-constraints>
      </item>
      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
      </item>
      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
      </item>
    </group>
  </component>
</project>
Z7p9UDGyuj============================================================

[workspace.xml:.idea\workspace.xml]
Z7p9UDGyuj============================================================
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="3a8159ca-905b-4ed2-9560-55cf31e9eaa8" name="Changes" comment="" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Interface" />
        <option value="JavaFXApplication" />
        <option value="module-info" />
        <option value="Enum" />
        <option value="HTML File" />
        <option value="JavaScript File" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 1
}</component>
  <component name="ProjectId" id="2hjoU1bXwfHLuds7HfiZeFMBcFZ" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;Application.CR c t123 develop.executor&quot;: &quot;Debug&quot;,
    &quot;Application.CR c t123 main.executor&quot;: &quot;Debug&quot;,
    &quot;Application.CR cr r16 --local.executor&quot;: &quot;Run&quot;,
    &quot;Application.CR cr r16.executor&quot;: &quot;Debug&quot;,
    &quot;Application.CR cr r17.executor&quot;: &quot;Debug&quot;,
    &quot;Application.CR dc main develop.executor&quot;: &quot;Debug&quot;,
    &quot;Application.CR ds develop.executor&quot;: &quot;Debug&quot;,
    &quot;Application.CR ds release/3.17.0.executor&quot;: &quot;Debug&quot;,
    &quot;Application.CR p \&quot;teste commit msg\&quot;.executor&quot;: &quot;Run&quot;,
    &quot;Application.CR r dev.executor&quot;: &quot;Run&quot;,
    &quot;Application.CR s.executor&quot;: &quot;Debug&quot;,
    &quot;Application.CR ss.executor&quot;: &quot;Debug&quot;,
    &quot;Application.CR state list.executor&quot;: &quot;Debug&quot;,
    &quot;Application.CR state save \&quot;salvando o estado\&quot;.executor&quot;: &quot;Debug&quot;,
    &quot;Application.CR test.executor&quot;: &quot;Run&quot;,
    &quot;Application.CR web.executor&quot;: &quot;Run&quot;,
    &quot;Application.CR.executor&quot;: &quot;Run&quot;,
    &quot;Application.Main.executor&quot;: &quot;Run&quot;,
    &quot;DefaultHtmlFileTemplate&quot;: &quot;HTML File&quot;,
    &quot;Maven.crelease [clean,install].executor&quot;: &quot;Run&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;Shell Script.Install.executor&quot;: &quot;Run&quot;,
    &quot;htmx.bundled.context.provider.enabled&quot;: &quot;true&quot;,
    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
    &quot;last_opened_file_path&quot;: &quot;C:/dev/projects/crelease/src/main/resources/css&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.lookFeel&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  }
}</component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\dev\projects\crelease\src\main\resources\css" />
    </key>
  </component>
  <component name="RunManager" selected="Application.CR web">
    <configuration name="CR cr r16 --local" type="Application" factoryName="Application">
      <option name="MAIN_CLASS_NAME" value="org.caixa.crelease.Main" />
      <module name="crelease" />
      <option name="PROGRAM_PARAMETERS" value="cr r16 --local" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="CR cr r16" type="Application" factoryName="Application">
      <option name="MAIN_CLASS_NAME" value="org.caixa.crelease.Main" />
      <module name="crelease" />
      <option name="PROGRAM_PARAMETERS" value="cr r16" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="CR cr r17" type="Application" factoryName="Application">
      <option name="MAIN_CLASS_NAME" value="org.caixa.crelease.Main" />
      <module name="crelease" />
      <option name="PROGRAM_PARAMETERS" value="cr r17" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="CR dc main develop" type="Application" factoryName="Application">
      <option name="MAIN_CLASS_NAME" value="org.caixa.crelease.Main" />
      <module name="crelease" />
      <option name="PROGRAM_PARAMETERS" value="dc main develop" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="CR ds develop" type="Application" factoryName="Application">
      <option name="MAIN_CLASS_NAME" value="org.caixa.crelease.Main" />
      <module name="crelease" />
      <option name="PROGRAM_PARAMETERS" value="ds develop" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="CR ds release/3.17.0" type="Application" factoryName="Application">
      <option name="MAIN_CLASS_NAME" value="org.caixa.crelease.Main" />
      <module name="crelease" />
      <option name="PROGRAM_PARAMETERS" value="ds release/3.17.0" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="CR p &quot;teste commit msg&quot;" type="Application" factoryName="Application">
      <option name="MAIN_CLASS_NAME" value="org.caixa.crelease.Main" />
      <module name="crelease" />
      <option name="PROGRAM_PARAMETERS" value="p &quot;teste commit msg&quot;" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="CR r dev" type="Application" factoryName="Application">
      <option name="MAIN_CLASS_NAME" value="org.caixa.crelease.Main" />
      <module name="crelease" />
      <option name="PROGRAM_PARAMETERS" value="r dev" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="CR s" type="Application" factoryName="Application">
      <option name="MAIN_CLASS_NAME" value="org.caixa.crelease.Main" />
      <module name="crelease" />
      <option name="PROGRAM_PARAMETERS" value="s" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="CR state list" type="Application" factoryName="Application">
      <option name="MAIN_CLASS_NAME" value="org.caixa.crelease.Main" />
      <module name="crelease" />
      <option name="PROGRAM_PARAMETERS" value="state list" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="CR state save &quot;salvando o estado&quot;" type="Application" factoryName="Application">
      <option name="MAIN_CLASS_NAME" value="org.caixa.crelease.Main" />
      <module name="crelease" />
      <option name="PROGRAM_PARAMETERS" value="state save &quot;salvando o estado&quot;" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="CR test" type="Application" factoryName="Application">
      <option name="MAIN_CLASS_NAME" value="org.caixa.crelease.Main" />
      <module name="crelease" />
      <option name="PROGRAM_PARAMETERS" value="t" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="CR web" type="Application" factoryName="Application">
      <option name="MAIN_CLASS_NAME" value="org.caixa.crelease.Main" />
      <module name="crelease" />
      <option name="PROGRAM_PARAMETERS" value="w" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="CR" type="Application" factoryName="Application">
      <option name="MAIN_CLASS_NAME" value="org.caixa.crelease.Main" />
      <module name="crelease" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="crelease [clean,install]" type="MavenRunConfiguration" factoryName="Maven" nameIsGenerated="true">
      <MavenSettings>
        <option name="myGeneralSettings" />
        <option name="myRunnerSettings" />
        <option name="myRunnerParameters">
          <MavenRunnerParameters>
            <option name="cmdOptions" />
            <option name="profiles">
              <set />
            </option>
            <option name="goals">
              <list>
                <option value="clean" />
                <option value="install" />
              </list>
            </option>
            <option name="multimoduleDir" />
            <option name="pomFileName" />
            <option name="profilesMap">
              <map />
            </option>
            <option name="projectsCmdOptionValues">
              <list />
            </option>
            <option name="resolveToWorkspace" value="false" />
            <option name="workingDirPath" value="$PROJECT_DIR$" />
          </MavenRunnerParameters>
        </option>
      </MavenSettings>
      <method v="2" />
    </configuration>
    <configuration name="Install" type="ShConfigurationType">
      <option name="SCRIPT_TEXT" value="" />
      <option name="INDEPENDENT_SCRIPT_PATH" value="false" />
      <option name="SCRIPT_PATH" value="$PROJECT_DIR$/install.bat" />
      <option name="SCRIPT_OPTIONS" value="" />
      <option name="INDEPENDENT_SCRIPT_WORKING_DIRECTORY" value="true" />
      <option name="SCRIPT_WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="INDEPENDENT_INTERPRETER_PATH" value="true" />
      <option name="INTERPRETER_PATH" value="" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="EXECUTE_IN_TERMINAL" value="true" />
      <option name="EXECUTE_SCRIPT_FILE" value="true" />
      <envs />
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Application.CR" />
      <item itemvalue="Application.CR dc main develop" />
      <item itemvalue="Application.CR ds develop" />
      <item itemvalue="Application.CR ds release/3.17.0" />
      <item itemvalue="Application.CR cr r16 --local" />
      <item itemvalue="Application.CR cr r16" />
      <item itemvalue="Application.CR cr r17" />
      <item itemvalue="Application.CR p &quot;teste commit msg&quot;" />
      <item itemvalue="Application.CR state save &quot;salvando o estado&quot;" />
      <item itemvalue="Application.CR state list" />
      <item itemvalue="Application.CR s" />
      <item itemvalue="Application.CR r dev" />
      <item itemvalue="Application.CR test" />
      <item itemvalue="Application.CR web" />
      <item itemvalue="Maven.crelease [clean,install]" />
      <item itemvalue="Shell Script.Install" />
    </list>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-jdk-9823dce3aa75-28b599e66164-intellij.indexing.shared.core-IU-242.22855.74" />
        <option value="bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-IU-242.22855.74" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="SvnConfiguration">
    <configuration>C:\Users\f757614\AppData\Roaming\Subversion</configuration>
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="3a8159ca-905b-4ed2-9560-55cf31e9eaa8" name="Changes" comment="" />
      <created>1718116904357</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1718116904357</updated>
      <workItem from="1718116905546" duration="5276000" />
      <workItem from="1718135879031" duration="8365000" />
      <workItem from="1718145084172" duration="17781000" />
      <workItem from="1718221746090" duration="19368000" />
      <workItem from="1718305558056" duration="704000" />
      <workItem from="1718391106029" duration="2567000" />
      <workItem from="1718406903978" duration="11803000" />
      <workItem from="1718626625825" duration="7006000" />
      <workItem from="1718645923614" duration="24797000" />
      <workItem from="1718722926296" duration="3635000" />
      <workItem from="1718734385659" duration="162000" />
      <workItem from="1718736463481" duration="11628000" />
      <workItem from="1718798459955" duration="9033000" />
      <workItem from="1718830977390" duration="19049000" />
      <workItem from="1718906158028" duration="10493000" />
      <workItem from="1718970790636" duration="279000" />
      <workItem from="1718971097838" duration="2540000" />
      <workItem from="1718973691224" duration="63000" />
      <workItem from="1718973789216" duration="205000" />
      <workItem from="1718974018879" duration="10477000" />
      <workItem from="1718996092174" duration="11962000" />
      <workItem from="1719230983859" duration="14629000" />
      <workItem from="1719258697689" duration="6689000" />
      <workItem from="1719319421585" duration="6299000" />
      <workItem from="1719349351983" duration="7059000" />
      <workItem from="1719426042329" duration="15064000" />
      <workItem from="1719496864942" duration="1971000" />
      <workItem from="1719508472311" duration="4048000" />
      <workItem from="1719522916813" duration="18222000" />
      <workItem from="1719597879187" duration="3283000" />
      <workItem from="1719601469276" duration="2703000" />
      <workItem from="1719607546667" duration="575000" />
      <workItem from="1719608271120" duration="24000" />
      <workItem from="1719610022487" duration="2406000" />
      <workItem from="1719836197152" duration="557000" />
      <workItem from="1719841503890" duration="35948000" />
      <workItem from="1720117159412" duration="1785000" />
      <workItem from="1720444326962" duration="5306000" />
      <workItem from="1720464638181" duration="3661000" />
      <workItem from="1720475621428" duration="13367000" />
      <workItem from="1720707773140" duration="889000" />
      <workItem from="1720787603406" duration="4432000" />
      <workItem from="1721045972721" duration="44000" />
      <workItem from="1721050330343" duration="216000" />
      <workItem from="1721746216575" duration="1138000" />
      <workItem from="1721911528037" duration="27000" />
      <workItem from="1721999782894" duration="40000" />
      <workItem from="1722256357078" duration="5236000" />
      <workItem from="1722342402916" duration="7782000" />
      <workItem from="1722450335524" duration="16000" />
      <workItem from="1722972498844" duration="16854000" />
      <workItem from="1723138347006" duration="10024000" />
      <workItem from="1723236594597" duration="1314000" />
      <workItem from="1723464050010" duration="6604000" />
      <workItem from="1723551146788" duration="37385000" />
      <workItem from="1723733379217" duration="25073000" />
      <workItem from="1723833938267" duration="975000" />
      <workItem from="1723835704978" duration="13000" />
      <workItem from="1724074356240" duration="46088000" />
      <workItem from="1724242847642" duration="144000" />
      <workItem from="1724243035884" duration="7835000" />
      <workItem from="1724275979662" duration="7415000" />
      <workItem from="1724338080140" duration="364000" />
      <workItem from="1724351456425" duration="19000" />
      <workItem from="1724352818700" duration="278000" />
      <workItem from="1724358930716" duration="12818000" />
      <workItem from="1724444223463" duration="7778000" />
      <workItem from="1724674484307" duration="5999000" />
      <workItem from="1724699524311" duration="13000" />
      <workItem from="1724699593856" duration="120845000" />
      <workItem from="1725376226676" duration="336000" />
      <workItem from="1725911678332" duration="14801000" />
      <workItem from="1725988254415" duration="92000" />
      <workItem from="1725988414851" duration="59000" />
      <workItem from="1725988533714" duration="10523000" />
      <workItem from="1726056449941" duration="57456000" />
      <workItem from="1726238447956" duration="16533000" />
      <workItem from="1726489242903" duration="10349000" />
      <workItem from="1726502732802" duration="1289000" />
      <workItem from="1726525680580" duration="40716000" />
      <workItem from="1726673056207" duration="3916000" />
      <workItem from="1726691032433" duration="126000" />
      <workItem from="1726696436132" duration="92000" />
      <workItem from="1726696564871" duration="7328000" />
      <workItem from="1727101293918" duration="100000" />
      <workItem from="1727101505299" duration="5536000" />
      <workItem from="1727132236863" duration="734000" />
      <workItem from="1727181304231" duration="703000" />
      <workItem from="1727201064528" duration="9950000" />
      <workItem from="1727265490427" duration="10362000" />
      <workItem from="1727789626564" duration="70000" />
      <workItem from="1727809337332" duration="180000" />
      <workItem from="1728050637272" duration="396000" />
      <workItem from="1728509837003" duration="354000" />
      <workItem from="1728563769770" duration="5001000" />
      <workItem from="1728571079413" duration="1266000" />
      <workItem from="1728912520110" duration="11865000" />
      <workItem from="1729109295091" duration="15811000" />
      <workItem from="1729199484141" duration="8066000" />
      <workItem from="1729258780807" duration="32000" />
      <workItem from="1729539098156" duration="35595000" />
      <workItem from="1729714325210" duration="220000" />
      <workItem from="1729777460707" duration="581000" />
      <workItem from="1729778071871" duration="988000" />
      <workItem from="1729782093036" duration="30000" />
      <workItem from="1729782191649" duration="1938000" />
      <workItem from="1729858891297" duration="26779000" />
      <workItem from="1729948015617" duration="6657000" />
      <workItem from="1730116913254" duration="9030000" />
      <workItem from="1730151804200" duration="884000" />
      <workItem from="1730204433190" duration="117000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/org/caixa/crelease/screen/App.java</url>
          <line>166</line>
          <option name="timeStamp" value="8" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/org/caixa/crelease/screen/App.java</url>
          <line>197</line>
          <option name="timeStamp" value="9" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
    <watches-manager>
      <configuration name="Application">
        <watch expression="contentType.getValue()" language="JAVA" />
        <watch expression="filesContent" language="JAVA" />
      </configuration>
    </watches-manager>
  </component>
  <component name="XSLT-Support.FileAssociations.UIState">
    <expand />
    <select />
  </component>
</project>
Z7p9UDGyuj============================================================

[cr.bat:cr.bat]
Z7p9UDGyuj============================================================
@echo off

set "args=%*"

"C:\Program Files\Java\jdk-17.0.1\bin\java.exe" -Dfile.encoding=UTF-8 -jar C:\dev\projects\crelease\target\crelease.jar %args%
Z7p9UDGyuj============================================================

[install.bat:install.bat]
Z7p9UDGyuj============================================================
@echo off

setlocal
set "JAVA_HOME=C:\Program Files\Java\jdk-17.0.1"
set JDK_HOME=%JAVA_HOME%
set "PATH=%JAVA_HOME%\bin;%PATH%"

call mvn clean package

del target\*SNAPSHOT.jar
move /Y target\crelease-jar-with-dependencies.jar target\crelease.jar
endlocal
Z7p9UDGyuj============================================================

[install.sh:install.sh]
Z7p9UDGyuj============================================================
#!/bin/bash
set -e

# criar um subshell para isolar as vari├íveis de ambiente
(
    export JAVA_HOME="/c/Program Files/Java/jdk-17.0.1"
    export JDK_HOME="$JAVA_HOME"
    export PATH="$JAVA_HOME/bin:$PATH"

    cd crelease
    mvn clean package
    rm -f target/*SNAPSHOT.jar
    mv target/crelease-jar-with-dependencies.jar target/crelease.jar
)

Z7p9UDGyuj============================================================

[pom.xml:pom.xml]
Z7p9UDGyuj============================================================
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.caixa.crelease</groupId>
    <artifactId>crelease</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <!-- start -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>3.3.1</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <version>3.3.1</version>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <version>3.3.1</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
            <version>2.7.15</version>
        </dependency>

        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>17</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>17</version>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.8.0</version>
        </dependency>

        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.8.6</version>
        </dependency>
        <!-- padr├úo -->
        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
            <version>2.3.1</version>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jaxb</groupId>
            <artifactId>jaxb-runtime</artifactId>
            <version>2.3.1</version>
        </dependency>
        <dependency>
            <groupId>javax.activation</groupId>
            <artifactId>activation</artifactId>
            <version>1.1.1</version>
        </dependency>
        <dependency>
            <groupId>org.java-websocket</groupId>
            <artifactId>Java-WebSocket</artifactId>
            <version>1.5.3</version>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*</include>
                </includes>
                <targetPath>resources</targetPath>
            </resource>
        </resources>
        <plugins>
            <!-- start -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <!-- your other plugins here... -->
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <executions>
                    <execution>
                        <id>make-assembly</id> <!-- this is used for inheritance merges -->
                        <phase>package</phase> <!-- append to the packaging phase. -->
                        <goals>
                            <goal>single</goal> <!-- goals == mojos -->
                        </goals>
                        <configuration>
                            <descriptorRefs>
                                <descriptorRef>jar-with-dependencies</descriptorRef>
                            </descriptorRefs>
                            <archive>
                                <manifest>
                                    <mainClass>org.caixa.crelease.Main</mainClass> <!-- replace with your main class -->
                                </manifest>
                            </archive>
                            <outputDirectory>${project.build.directory}/</outputDirectory>
                            <finalName>crelease</finalName>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>

</project>
Z7p9UDGyuj============================================================

[rename.bat:rename.bat]
Z7p9UDGyuj============================================================
del target\*SNAPSHOT.jar
move /Y target\crelease-jar-with-dependencies.jar target\crelease.jar
Z7p9UDGyuj============================================================

[WebController.java:src\main\java\org\caixa\crelease\controller\WebController.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class WebController {

  @GetMapping("/")
  public String index() {
    return "index";
  }
}

Z7p9UDGyuj============================================================

[MsgStatusType.java:src\main\java\org\caixa\crelease\enums\MsgStatusType.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.enums;

public enum MsgStatusType {

    STARTED("started"),
    RUNNING("running"),
    FINISHED("finished"),
    ERROR("error")
    ;

    private final String value;

    MsgStatusType(String value) {
        this.value = value;
    }

    public static MsgStatusType fromValue(String value) {
        if (value == null || value.isEmpty()) {
            return null;
        }

        for (MsgStatusType e : values()) {
            if (e.getValue().equals(value)) {
                return e;
            }
        }

        return null;
    }

    public String getValue() {
        return value;
    }
}

Z7p9UDGyuj============================================================

[MsgType.java:src\main\java\org\caixa\crelease\enums\MsgType.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.enums;

import java.io.Serializable;

public enum MsgType implements Serializable {
    DOWNLOAD("download");

    private final String value;

    MsgType(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }

    public static MsgType fromValue(String value) {
        if (value == null || value.isEmpty()) {
            return null;
        }

        for (MsgType e : values()) {
            if (e.getValue().equals(value)) {
                return e;
            }
        }

        return null;
    }
}

Z7p9UDGyuj============================================================

[StatusType.java:src\main\java\org\caixa\crelease\enums\StatusType.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.enums;

public enum StatusType {
  NONE,
  NEW,
  PULL,
  PUSH,
  COMMIT
}

Z7p9UDGyuj============================================================

[GitException.java:src\main\java\org\caixa\crelease\exceptions\GitException.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.exceptions;

public class GitException extends Exception {

    public GitException() {
        super();
    }

    public GitException(String message) {
        super(message);
    }

    public GitException(String message, Throwable cause) {
        super(message, cause);
    }
}

Z7p9UDGyuj============================================================

[WebException.java:src\main\java\org\caixa\crelease\exceptions\WebException.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.exceptions;

public class WebException extends Exception {

    public WebException() {}

    public WebException(String message) { super(message); }

    public WebException(String message, Throwable cause) {
        super(message, cause);
    }
}

Z7p9UDGyuj============================================================

[BranchStatus.java:src\main\java\org\caixa\crelease\git\BranchStatus.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.git;

import org.caixa.crelease.enums.StatusType;

import java.util.ArrayList;
import java.util.List;

public class BranchStatus {

    final List<StatusType> status = new ArrayList<>();

    public BranchStatus() {}

    public void addStatus(final StatusType status) {
        this.status.add(status);
    }

    public boolean hasStatus(final StatusType status) {
        return this.status.contains(status);
    }

    /**
     * Retorna verdadeiro se n├úo h├í status de altera├º├úo da branch.
     *
     * @return true se n├úo encontrar status.
     */
    public boolean isNone() {
        return this.status.contains(StatusType.NONE);
    }

    public boolean isEmpty() {
        return this.status.isEmpty();
    }
}

Z7p9UDGyuj============================================================

[Git.java:src\main\java\org\caixa\crelease\git\Git.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.git;

import org.apache.commons.io.FileUtils;
import org.caixa.crelease.enums.StatusType;
import org.caixa.crelease.exceptions.GitException;
import org.caixa.crelease.models.Command;
import org.caixa.crelease.models.Module;
import org.caixa.crelease.models.Setup;
import org.caixa.crelease.utils.AppUtils;
import org.caixa.crelease.utils.CommandRunner;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Git {

  private final static CommandRunner cr = new CommandRunner();
  private final static List<String> cachedPaths = new ArrayList<>();
  private final static Map<String, List<String>> cachedBranches = new HashMap<>();

  /**
   * Executa um simples "git fetch origin".
   *
   * @param path - caminho para executar o fetch.
   * @throws GitException se ocorrer um erro na execu├º├úo do comando git.
   */
  public static void fetch(String path) throws GitException {
    Command cmd = cr.cmd(path, "git", "fetch", "origin");
    lancarException(cmd, "N├úo foi poss├¡vel executar fetch no local informado");
  }

  public static void fetchAll() throws GitException {
    List<Module> modules = AppUtils.getSetup().getModules();
    for (Module mod : modules) {
      fetch(mod.getPath());
    }
  }

  /**
   * Obt├¬m o staus atual da branch que est├í no local informado.
   *
   * @param path - caminho para obter o nome da branch.
   * @return string contendo o status atual da branch em formato "short".
   * @throws GitException se ocorrer um erro na execu├º├úo do comando git.
   */
  public static String status(String path) throws GitException {
    Command cmd = cr.cmd(path, "git", "status");
    lancarException(cmd, "N├úo foi poss├¡vel de pegar o status da branch");
    return cmd.getResult();
  }

  public static BranchStatus checkStatus(String path) throws GitException {
    BranchStatus status = new BranchStatus();
    String branch = findBranchName(path);

    if (hasRemoteBranch(path, branch).isEmpty()) {
      status.addStatus(StatusType.NEW);
    }

    if (hasCommitToMake(path)) {
      status.addStatus(StatusType.COMMIT);
    }

    if (hasPullToMake(path)) {
      status.addStatus(StatusType.PULL);
    }

    if (hasPushToMake(path)) {
      status.addStatus(StatusType.PUSH);
    }

    if (status.isEmpty()) {
      status.addStatus(StatusType.NONE);
    }

    return status;
  }

  /**
   * Obt├¬m o nome corrente da branch a partir do local informado.
   *
   * @param path - caminho para obter o nome da branch.
   * @return nome da branch.
   * @throws GitException se ocorrer um erro na execu├º├úo do comando git.
   */
  public static String findBranchName(String path) throws GitException {
    Command cmd = cr.cmd(path, "git", "branch", "--show-current");
    lancarException(cmd, "N├úo foi poss├¡vel obter o nome da branch");

    return cmd.getResult();
  }

  /**
   * Verifica se a branch no local informado ├® a mesma que foi passada como par├ómetro.
   *
   * @param path   - caminho de onde o comando ser├í executado.
   * @param branch - branch que ser├í testada com a branch que est├í atualmente no local informado.
   * @return verdadeiro caso seja a branch informada via par├ómetro.
   * @throws GitException se ocorrer um erro na execu├º├úo do comando git.
   */
  public static boolean isCurrentBranch(String path, String branch) throws GitException {
    String currentBranch = findBranchName(path);
    return AppUtils.isEqualsValues(currentBranch, branch);
  }

  /**
   * Verifica se no caminho informado existe a branch informada. A branch atual n├úo precisa ser a mesma da branch
   * informada para retornar true.
   *
   * @param path   - caminho de onde o comando ser├í executado.
   * @param branch - branch a ser verficada.
   * @return verdadeiro caso exista uma branch local j├í baixada em algum momento
   * @throws GitException se ocorrer um erro na execu├º├úo do comando git.
   */
  public static boolean hasLocalBranch(String path, String branch) throws GitException {
    Command cmd = cr.cmd(path, "git", "branch", "--list", branch);
    lancarException(cmd, "N├úo foi poss├¡vel verificar a branch local");

    return cmd.hasResult();
  }

  /**
   * Verifica se existe uma branch remota para o local informado. A branch local n├úo precisa ser necessariamente a mesma da informada
   * para que o resultado seja verdadeiro caso a branch informada exista remotamente.
   *
   * @param path   - caminho de onde o comando ser├í executado.
   * @param branch - branch a ser verficada.
   * @return retorna o hash se existir uma branch remota no reposit├│rio configurado para o local informado.
   * @throws GitException se ocorrer um erro na execu├º├úo do comando git.
   */
  public static String hasRemoteBranch(String path, String branch) throws GitException {
    String errorMsg = "N├úo foi poss├¡vel verificar a branch remota: " + branch;

    Command cmd = cr.cmd(path, "git", "rev-parse", "--verify", "--quiet", "origin/" + branch);
    lancarException(cmd, errorMsg);

    // o comando "rev-parse" ├® bem mais r├ípido que o "ls-remote", por isso deve ser usado preferencialmente para validar a
    // exist├¬ncia de uma branch remota, mas, caso n├úo a ache, usa-se depois o ls-remote que faz a mesma coisa, por├®m, com ├á
    // requisi├º├úo direta via servidor.
    if (cmd.hasResult()) {
      return cmd.getResult();
    } else {
      // segunda tentativa
      cmd = cr.cmd(path, "git", "ls-remote", "--heads", "origin", branch);
      lancarException(cmd, errorMsg);

      if (cmd.hasResult()) {
        String result = cmd.getLines().get(0);
        return result.split("\t")[0];
      }
    }

    return "";
  }

  /**
   *  Encontra branches com o nome da branch remotamente.
   *
   * @param path onde o comando ser├í executado.
   * @param branch ou fragmento dela a ser pesquisado.
   * @return uma lista de branches com o mesmo nome ou que contenha o nome procurado.
   */
  public static List<String> findRemoteBranches(String path, String branch) {
    List<String> branchList = new ArrayList<>();

    if (!cachedBranches.containsKey(path)) {
      Command cmd = cr.cmd(path, "git", "branch", "-r");
      List<String> findList = new ArrayList<>();
      if (cmd.hasResult()) {
        for (String br : cmd.getLines()) {
          findList.add(br.replace("*", "").trim());
        }
        // adiciona no mapa
        cachedBranches.put(path, findList);
      }
    }

    if (cachedBranches.containsKey(path)) {
      List<String> findBranches = cachedBranches.get(path);
      for (String br : findBranches) {
        if (!br.contains("HEAD ->") && br.toLowerCase().contains(branch.toLowerCase())) {
          branchList.add(br);
        }
      }
    }

    return branchList;
  }

  public static String findFileContent(String path, String filePath, String branch) throws GitException {
    Command cmd = cr.cmd(path, "git", "show", branch + ":" + filePath);
    lancarException(cmd, "N├úo foi poss├¡vel obter o conte├║do do arquivo " + filePath + " em " + path + " para a branch " + branch);

    return cmd.getResult();
  }

  /**
   * Verifica a existe da branch remotamente, se a op├º├úo isAll for verdadeira, retorna true apenas se todas as branches remotas existirem.
   * Se isAll for falso, ent├úo basta uma branch remota encontrada que retornar├í true.
   *
   * @param isAll valida todas as branch ou apenas uma para ser verdadeira.
   * @param branch destino a ser pesquisada remotamente.
   * @return verdadeiro a depender se existe uma ou mais ocorr├¬ncia da branch remota a depender do par├ómetro isAll.
   * @throws GitException se ocorrer um erro na execu├º├úo do comando git.
   */
  public static boolean hasAllBranch(boolean isAll, String branch) throws GitException {
    List<Module> modules = AppUtils.getSetup().getRegularModules();
    boolean hasBranch = false;
    int counter = 0;

    for (Module mod : modules) {
      boolean hasRemote = !hasRemoteBranch(mod.getPath(), branch).isEmpty();
      boolean hasLocal = hasLocalBranch(mod.getPath(), branch);

      if (hasRemote || hasLocal) {
        //branch encontrada remotamente ou localmente
        if (isAll) {
          counter++;
        } else  {
          hasBranch = true;
        }
      }
    }

    if (isAll) {
      return counter == modules.size();
    }

    return hasBranch;
  }

  /**
   * Verica se a branch local e remota est├úo exatamente no mesmo estado, ou seja, o HEAD delas est├úo apontando para um mesmo commit.
   * Para verificiar o estado, ambas branches devem existir (localmente e remotamente).
   *
   * @param path   - caminho de onde o comando ser├í executado.
   * @param branch - branch a ser verficada a equidade do seu estado.
   * @return verdadeiro caso as branches local e remota est├úo no mesmo estado.
   * @throws GitException se ocorrer um erro na execu├º├úo do comando git.
   */
  public static boolean hasSameState(String path, String branch) throws GitException {
    if (hasRemoteBranch(path, branch).isEmpty()) {
      return false;
    }

    String localHash = findLastCommitHash(path, branch, true);
    String remoteHash = findLastCommitHash(path, branch, false);

    return AppUtils.isEqualsValues(localHash, remoteHash);
  }

  /**
   * Obt├¬m o ├║ltimo commit de uma branch. Se o par├ómetro isLocal for true, o hash retornado ser├í da branch local (se existir),
   * caso o contr├írio, ser├í da branch remota (caso existir).
   *
   * @param path    - caminho de onde o comando ser├í executado.
   * @param branch  - branch a ser verficada.
   * @param isLocal - true = branch local, false = branch remota
   * @return o hash do ├║ltimo commit da branch requisitada (local ou remota)
   * @throws GitException se ocorrer um erro na execu├º├úo do comando git.
   */
  public static String findLastCommitHash(String path, String branch, boolean isLocal) throws GitException {
    String refs;
    String errorMsg = "N├úo foi poss├¡vel obter as refer├¬ncias de uma branch";

    if (isLocal) {
      refs = "refs/heads/" + branch;
      errorMsg += " local";
    } else {
      // para uma branch remota, usando o rev-parse, ├® necess├írio atualizar o ├¡ndice primeiro (fetch)
      // a alternativa para o rev-parse ├® o 'ls-remote --heads origin', mas ├® necess├írio tratar o seu retorno, ver
      // o m├®todo hasRemoteBranch para maiores informa├º├Áes.
      if (!cachedPaths.contains(path)) {
        cachedPaths.add(path);
        fetch(path);
      }
      refs = "refs/remotes/origin/" + branch;
      errorMsg += " remota";
    }

    Command cmd = cr.cmd(path, "git", "rev-parse", refs);
    lancarException(cmd, errorMsg);

    return cmd.getResult();
  }

  /**
   * @param path - caminho de onde o comando ser├í executado.
   * @param hash - commit hash sha256 que ser├í verificado na branch que est├í no local informado.
   * @return verdadeiro se a branch no local tem o hash informado em quest├úo.
   * @throws GitException se ocorrer um erro na execu├º├úo do comando git.
   */
  public static boolean containsCommitHash(String path, String hash) throws GitException {
    Command cmd = cr.cmd(path, "git", "branch", "--contains", hash);
    lancarException(cmd, "N├úo foi poss├¡vel verificar o hash");

    return cmd.getResult().contains("*");
  }

  /**
   * @param path - caminho de onde o comando ser├í executado.
   * @return verdadeiro se existir pend├¬ncia de commit no local informado.
   * @throws GitException se ocorrer um erro na execu├º├úo do comando git.
   */
  public static boolean hasCommitToMake(String path) throws GitException {
    String status = status(path);
    return status.contains("staged for commit") || status.contains("will be commited");
  }

  /**
   * Verifica se no local informado ├® necess├írio fazer um push.
   *
   * @param path - local informado da branch.
   * @return verdadeiro se o local informado precisa efetuar um git push.
   * @throws GitException se ocorrer um erro na execu├º├úo do comando git.
   */
  public static boolean hasPushToMake(String path) throws GitException {
    if (!AppUtils.isGitPath(path)) {
      throw new GitException(String.format("O local informado em %s, n├úo ├® do tipo Git.", path));
    }

    String status = status(path);
    if (status.contains("git push") || status.contains("Your branch is ahead of") || status.contains("have diverged")) {
      return true;
    }

    Command cmd = cr.cmd(path, "git", "status", "-sb");
    lancarException(cmd, "Um erro ocorreu ao executar o comando git status -sb");
    return cmd.getResult().contains("ahead");
  }

  /**
   * Verifica a necessidade de fazer pull.
   *
   * @param path - local informado da branch.
   * @return verdadeiro se o local informado precisa efetuar um git pull.
   * @throws GitException se ocorrer um erro na execu├º├úo do comando git.
   */
  public static boolean hasPullToMake(String path) throws GitException {
    if (!AppUtils.isGitPath(path)) {
      throw new GitException(String.format("O local informado em %s, n├úo ├® do tipo Git.", path));
    }

    fetch(path);
    String status = status(path);
    if (status.contains("git pull")) {
      return true;
    }

    Command cmd = cr.cmd(path, "git", "status", "-sb");
    lancarException(cmd, "Um erro ocorreu ao executar o comando git status -sb");
    return cmd.getResult().contains("behind");
  }

  /**
   * Retorna todos os m├│dulos que precisam efetuar um commit sem suas branches.
   *
   * @param modules - lista de m├│dulos a ser analisada.
   * @return uma lista de m├│dulos contendo os m├│dulos que precisam de commit.
   * @throws GitException se ocorrer um erro na execu├º├úo do comando git.
   */
  public static List<Module> findAllCommitToMake(List<Module> modules) throws GitException {
    List<Module> commitMods = new ArrayList<>();

    for (Module module : modules) {
      if (hasCommitToMake(AppUtils.getFullUserPath(module)))
        commitMods.add(module);
    }

    return commitMods;
  }

  /**
   * Faz a publica├º├úo do push.
   *
   * @param path caminho utilizado para fazer o push da branch para o reposit├│rio.
   */
  public static void push(String path) throws GitException {
    String branchName = findBranchName(path);
    Command cmd;

    if (hasRemoteBranch(path, branchName).isEmpty()) {
      // a branch ├® nova, primeira vez subindo para o reposit├│rio
      cmd = cr.cmd(path, "git", "push", "--set-upstream", "origin", branchName);
    } else {
      // existe a branch remotamente, faz um push normal
      cmd = cr.cmd(path, "git", "push");
    }
    lancarException(cmd, "N├úo foi poss├¡vel fazer um git push.");
  }

  public static void commit(String path, String msg) throws GitException {
    Command cmd = cr.cmd(path, "git", "add", ".");
    lancarException(cmd, "N├úo foi poss├¡vel adicionar arquivos na working tree.");

    cmd = cr.cmd(path, "git", "commit", "-m", msg);
    lancarException(cmd, "N├úo foi poss├¡vel realizar um commit em " + path);
  }

  /**
   * Verifica todos os m├│dulos que precisam fazer push.
   *
   * @param modules que precisam fazer push
   * @return lista de m├│dulos com push a ser feito.
   * @throws GitException se ocorrer um erro na execu├º├úo do comando git.
   */
  public static List<Module> findAllPushToMake(List<Module> modules) throws GitException {
    List<Module> moduleList = new ArrayList<>();

    for (Module module : modules) {
      if (hasPushToMake(AppUtils.getFullUserPath(module))) {
        moduleList.add(module);
      }
    }

    return moduleList;
  }

  /**
   * Verifica para todos os caminhos determinados no setup.xml, se todos est├úo com o mesmo
   * nome de branch local, retorna o nome da branch que ├® comum entre eles, caso contr├írio,
   * retorna uma string vazia.
   *
   * @return o nome da branch se todas as branches est├úo com o mesmo nome.
   * @throws GitException se ocorrer um erro na execu├º├úo do comando git.
   */
  public static String getAllSameBranch() throws GitException {
    Setup setup = AppUtils.getSetup();
    List<Module> modules = setup.getRegularModules();
    String branch = "";

    for (Module mod : modules) {
      String tempBranch = findBranchName(mod.getPath());
      // primeira rodada
      if (branch.isEmpty()) {
        branch = tempBranch;
        continue;
      }

      // rodada subsequentes, testa sempre o valor tempor├írio com a primeira branch pega
      if (!branch.equals(tempBranch))
        return "";
    }

    return branch;
  }

  /**
   * Cancela uma opera├º├úo de merge caso ela exista.
   *
   * @param path do local que ser├í desfeito a opera├º├úo de merge.
   * @throws GitException se ocorrer um erro na execu├º├úo do comando git.
   */
  public static void cancelMerge(String path) throws GitException {
    File fileMergeHead = new File(path, ".git/MERGE_HEAD");
    File fileMergeStash = new File(path, ".git/MERGE_AUTOSTASH");

    // existe merge pendente - cancela o merge
    if (fileMergeHead.exists() || fileMergeStash.exists()) {
      Command cmd = cr.cmd(path, "git", "merge", "--abort");
      lancarException(cmd, "N├úo foi poss├¡vel desfazer a opera├º├úo de merge.");
    }
  }

  /**
   * For├ºa um reset no caminho informado desfazendo qualquer altera├º├úo da branch.
   *
   * @param path que informa o local da branch que ter├í o seu estado resetado.
   * @throws GitException se ocorrer um erro na execu├º├úo do comando git.
   */
  public static void forceReset(String path) throws GitException {
    BranchStatus status = checkStatus(path);

    // n├úo existe nada a ser feito, retorna.
    if (status.isNone()) {
      return;
    }

    // cancela o merge, se existir
    cancelMerge(path);

    // limpa qualquer altera├º├úo
    Command cmd = cr.cmd(path, "git", "clean", "-fxd",
       "-e", ".idea/",
       "-e", ".settings/",
       "-e", ".project/",
       "-e", ".classpath/");
    lancarException(cmd, "N├úo foi poss├¡vel executar 'git clean'");

    // restaura o estado dos arquivos para antes do working tree
    cmd = cr.cmd(path, "git", "restore", ".");
    lancarException(cmd, "N├úo foi poss├¡vel restaurar o estado anterior.");
  }

  /**
   * download ├® um complexo m├®todo que executa algumas das seguintes opera├º├Áes a dependender o estado do local e
   * da branch infomrada.
   * <p>
   * clone : se o caminho informado n├úo existe ou n├úo ├® do tipo git;
   * checkout -b : o caminho existe, mas a branch nunca foi baixada no local informado.
   * checkout : o caminho existe, e a branch j├í foi baixada anterior, muda para a branch local informada
   * reset --hard : reseta a branch local com a ├║ltima vers├úo remota, caso o par├ómetro reset seja verdadeiro.
   * pull : atualiza a branch alterada com as ├║ltimas atualiza├º├Áes da sua vers├úo remota (se existir).
   *
   * @param path   - caminho que a branch ser├í baixada.
   * @param branch - nome da branch a ser atualizada.
   * @param reset  - reseta a branch local para estar igual a branch remota.
   * @throws GitException se ocorrer um erro na execu├º├úo do comando git.
   */
  public static void download(String path, String branch, boolean reset) throws GitException {
    Command cmd;
    Setup setup = AppUtils.getSetup();

    if (!AppUtils.isGitPath(path)) {
      // apaga o diret├│rio existente mas que n├úo ├® do tipo git
      if (AppUtils.isPathExists(path)) {
        try {
          FileUtils.deleteDirectory(new File(path));
        } catch (IOException e) {
          throw new RuntimeException(e);
        }
      }

      // [CLONE] faz o clone porque o local informado n├úo existe ou n├úo existe como diret├│rio git
      cmd = cr.cmd(path, "git", "clone", "--branch", branch,
         String.format(setup.getRemote(), AppUtils.getLastPathElement(path)), "cmd:createFolder");
      lancarException(cmd, "N├úo foi poss├¡vel fazer um git clone no caminho informado: " + path);
      return;
    } else if (!hasLocalBranch(path, branch)) {
      // [CHECKOUT] o caminho existe, mas a branch nunca foi baixada no local informado.
      cmd = cr.cmd(path, "git", "checkout", "-b", branch, "origin/" + branch);
      lancarException(cmd, "N├úo foi poss├¡vel fazer um git checkout no caminho informado: " + path);
      return;
    }

    // se a branch informada for a mesma do local informado, ele reseta para a vers├úo mais atual do servidor.
    boolean hasCurrentBranch = isCurrentBranch(path, branch);
    // se n├úo ├® a mesma branch, mas existe uma branch local baixada de mesmo nome
    boolean hasLocalBranch = hasLocalBranch(path, branch);

    if (!hasCurrentBranch && hasLocalBranch) {
      // a branch atual n├úo ├® a mesma, mas ela j├í existe baixada anteriormente, faz um checkout pra ela.
      cmd = cr.cmd(path, "git", "checkout", branch);
      lancarException(cmd, "N├úo foi poss├¡vel trocar de branch via git checkout no local informado: " + path);
    }

    fetch(path);
    if (reset) {
      cmd = cr.cmd(path, "git", "reset", "--hard", "origin/" + branch);
    } else {
      cmd = cr.cmd(path, "git", "pull");
    }

    lancarException(cmd, "N├úo foi poss├¡vel baixar a branch no local: " + path);
  }

  /**
   * Reseta uma branch para o hash informado.
   * ATEN├ç├âO: esse m├®todo apaga qualquer commit de hash superior.
   *
   * @param path da branch a ser resetada.
   * @param hash onde o HEAD apontar├í a partir do reset.
   * @throws GitException se ocorrer um erro na execu├º├úo do comando git.
   */
  public static void reset(String path, String hash) throws GitException {
    Command cmd = cr.cmd(path, "git", "reset", "--hard", hash);
    lancarException(cmd, "N├úo foi poss├¡vel resetar a branch.");
  }

  /**
   * Faz um push em modo force para atualizar o remote com as atualiza├º├Áes for├ºadas.
   *
   * @param path da branch que far├í um force push.
   * @throws GitException se ocorrer um erro na execu├º├úo do comando git.
   */
  public static void forcePush(String path) throws GitException {
    Command cmd = cr.cmd(path, "git", "push", "--force");
    lancarException(cmd, "N├úo foi poss├¡vel fazer um git push for├ºado.");
  }

  /**
   * Cria uma branch local com base um source (se existir) ou com base na branch atual.
   *
   * @param path da branch a ser criada.
   * @param branch destino.
   * @param source ├® a branch base a ser baseada, caso for informada.
   * @throws GitException se ocorrer um erro na execu├º├úo do comando git.
   */
  public static void createBranch(String path, String branch, String source) throws GitException {
    Command cmd;

    if (source != null) {
      if (!Git.hasLocalBranch(path, source)) {
        Git.download(path, source, false);
      }

      if (!Git.isCurrentBranch(path, source)) {
        cmd = cr.cmd(path, "git", "switch", branch);
        lancarException(cmd, "N├úo foi poss├¡vel trocar para a branch " + source);
      }
    }

    cmd = cr.cmd(path, "git", "checkout", "-b", branch);
    lancarException(cmd, "N├úo foi poss├¡vel criar uma nova branch em " + path);
  }

  /**
   * Apaga uma branch localmente e remotamente.
   *
   * @param path da branch desejada.
   * @param branch destino a ser deletada, localmente e remotamente.
   * @throws GitException se ocorrer um erro na execu├º├úo do comando git.
   */
  public static void deleteBranch(String path, String branch) throws GitException {
    Command cmd;

    if (hasLocalBranch(path, branch)) {
      cmd = cr.cmd(path, "git", "branch", "-D", branch);
      lancarException(cmd, "N├úo foi poss├¡vel em apagar localmente a branch " + branch + " em " + path);
    }

    if (!hasRemoteBranch(path, branch).isEmpty()) {
      cmd = cr.cmd(path, "git", "push", "origin", ":" + branch);
      lancarException(cmd, "N├úo foi poss├¡vel em apagar remotamente a branch " + branch + " em " + path);
    }
  }

  public static void changeBranch(String path, String branch) throws GitException {
    Command cmd = cr.cmd(path, "git", "checkout", branch);
    lancarException(cmd, "N├úo foi poss├¡vel trocar de branch");
  }

  /**
   * Lan├ºa uma exception informando m├®todo atual com uma mensagem personalizada.
   *
   * @param cmd inst├óncia de Command que ├® criado via CommandRunner.
   * @param msg mensagem personalizada.
   * @throws GitException se ocorrer um erro na execu├º├úo do comando git.
   */
  private static void lancarException(Command cmd, String msg) throws GitException {
    if (cmd.getError() != null) {
      String methodName = Thread.currentThread().getStackTrace()[2].getMethodName();
      throw new GitException(String.format("[%s] - %s, Git Error: %s", methodName, msg, cmd.getError()));
    }
  }
}

Z7p9UDGyuj============================================================

[Content.java:src\main\java\org\caixa\crelease\html\Content.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.html;

import java.nio.file.Path;

public class Content {

    private Structure structure;
    private MIMEType contentType;
    private String name;
    private Path path;
    private String content;

    public Structure getStructure() {
        return structure;
    }

    public void setStructure(Structure structure) {
        this.structure = structure;
    }

    public MIMEType getContentType() {
        return contentType;
    }

    public void setContentType(MIMEType contentType) {
        this.contentType = contentType;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAbsolutePath() {
        if (path != null) {
            return getPath().toAbsolutePath().toString();
        }

        return null;
    }

    public Path getPath() {
        return path;
    }

    public void setPath(Path path) {
        this.path = path;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }
}

Z7p9UDGyuj============================================================

[FetchProcess.java:src\main\java\org\caixa\crelease\html\FetchProcess.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.html;

import com.sun.net.httpserver.HttpExchange;
import org.caixa.crelease.enums.MsgStatusType;
import org.caixa.crelease.renders.FetchProcessModel;
import org.caixa.crelease.renders.Model;
import org.caixa.crelease.utils.Web;

import java.io.IOException;
import java.io.Serial;
import java.io.Serializable;
import java.util.Map;

import static org.caixa.crelease.utils.Web.CODE_OK;
import static org.caixa.crelease.utils.Web.fromQueryString;
import static org.caixa.crelease.utils.Web.publishJSON;

public abstract class FetchProcess implements Serializable {

    @Serial
    private static final long serialVersionUID = 1L;

    public void fetch(HttpExchange exchange) throws IOException {
        FetchProcessModel render = fetchRender(exchange);
        // gera a sa├¡da
        publishJSON(CODE_OK, exchange, render);
    }

    protected FetchProcessModel fetchRender(HttpExchange exchange) {
        FetchProcessQuery q = new FetchProcessQuery();
        Map<String, String> query = Web.getQueryParams(exchange.getRequestURI());

        String status = query.get("status");
        String counter = query.get("counter");
        String params = query.get("params");

        System.out.println("Request[" + status + "]: counter: " + counter + ", params: " + params);

        Integer c = Integer.getInteger(counter);
        if (c == null) {
            c = 0;
        }

        // prepara os dados para o processamento
        q.setStatus(MsgStatusType.fromValue(status));
        q.setCounter(c);
        q.setParams(fromQueryString(params, getRender()));

        FetchProcessModel render;
        if (MsgStatusType.STARTED == q.getStatus()) {
            render = started(q);
            render.setStatus(MsgStatusType.RUNNING.getValue());
        } else if (MsgStatusType.RUNNING == q.getStatus()) {
            render = running(q);
        } else if (MsgStatusType.FINISHED == q.getStatus()) {
            render = finished(q);
        } else {
            return null;
        }

        // incrementa o contador ap├│s uma rodada de execu├º├úo
        render.setCounter(render.getCounter() + 1);
        System.out.println("counter: " + render.getCounter());
        return render;
    }

    protected void update(FetchProcessQuery query) {

    }

    protected abstract Class<? extends Model> getRender();
    protected abstract FetchProcessModel started(FetchProcessQuery query);
    protected abstract FetchProcessModel running(FetchProcessQuery query);
    protected abstract FetchProcessModel finished(FetchProcessQuery query);
}

Z7p9UDGyuj============================================================

[FetchProcessQuery.java:src\main\java\org\caixa\crelease\html\FetchProcessQuery.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.html;

import org.caixa.crelease.enums.MsgStatusType;
import org.caixa.crelease.renders.FetchProcessModel;
import org.caixa.crelease.renders.Model;
import org.caixa.crelease.utils.Web;

public class FetchProcessQuery {

    private MsgStatusType status;
    private Integer counter;
    private Model params;

    public FetchProcessQuery() {}

    public MsgStatusType getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = MsgStatusType.fromValue(status);
    }

    public void setStatus(MsgStatusType status) {
        this.status = status;
    }

    public Integer getCounter() {
        return counter;
    }

    public void setCounter(Integer counter) {
        this.counter = counter;
    }

    public Model getParams() {
        return params;
    }

    public void setParams(Model params) {
        this.params = params;
    }

    public <T extends Model> FetchProcessModel toFetchProcessRender(T model) {
        FetchProcessModel render = new FetchProcessModel();
        render.setStatus(this.getStatus().getValue());
        render.setCounter(this.getCounter());
        render.setParams(Web.toJson(model));

        return render;
    }
}

Z7p9UDGyuj============================================================

[MIMEType.java:src\main\java\org\caixa\crelease\html\MIMEType.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.html;

public enum MIMEType {

    HTML("text/html"),
    XML("application/xml"),
    JSON("application/json"),
    JS("text/javascript"),
    CSS("text/css")
    ;

    private final String value;

    MIMEType(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }

}
Z7p9UDGyuj============================================================

[Structure.java:src\main\java\org\caixa\crelease\html\Structure.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.html;

public enum Structure {

    PAGE("page", "pages"),
    TEMPLATE("template", "templates"),
    SCRIPTS("script", "scripts")
    ;

    private final String value;
    private final String folder;

    Structure(String value, String folder) {
        this.value = value;
        this.folder = folder;
    }

    public String getValue() {
        return value;
    }

    public String getFolder() {
        return folder;
    }
}

Z7p9UDGyuj============================================================

[Main.java:src\main\java\org\caixa\crelease\Main.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease;

import org.caixa.crelease.processors.BranchPrc;
import org.caixa.crelease.processors.ChangeVersionPrc;
import org.caixa.crelease.processors.CheckReleasePrc;
import org.caixa.crelease.processors.ContainsPrc;
import org.caixa.crelease.processors.ConverterPrc;
import org.caixa.crelease.processors.PushPrc;
import org.caixa.crelease.processors.ShowPrc;
import org.caixa.crelease.processors.StatePrc;
import org.caixa.crelease.processors.SwitchPrc;
import org.caixa.crelease.processors.TestPrc;
import org.caixa.crelease.screen.WebApp;
import org.caixa.crelease.utils.AppUtils;
import org.caixa.crelease.utils.Argument;
import org.caixa.crelease.utils.CRelease;

import java.util.Arrays;

public class Main extends CRelease {

  private String[] args;

  // direct contains - dc
  private final Argument cmdDirectContains = new Argument() {
    @Override
    public String getCommand() {
      return "dc";
    }

    @Override
    public int getMinArg() {
      return 2;
    }

    @Override
    public int getMaxArg() {
      return 2;
    }
  };

  // direct switch - ds
  private final Argument cmdDirectSwitch = new Argument() {
    @Override
    public String getCommand() {
      return "ds";
    }

    @Override
    public int getMinArg() {
      return 1;
    }

    @Override
    public int getMaxArg() {
      return 1;
    }
  };

  // show - ss
  private final Argument cmdShow = new Argument() {
    @Override
    public String getCommand() {
      return "s";
    }

    @Override
    public int getMinArg() {
      return 0;
    }

    @Override
    public int getMaxArg() {
      return 0;
    }
  };

  // check release - cr
  private final Argument cmdCheckRelease = new Argument() {
    @Override
    public String getCommand() {
      return "cr";
    }

    @Override
    public int getMinArg() {
      return 0;
    }

    @Override
    public int getMaxArg() {
      return 1;
    }
  };

  // push - p
  private final Argument cmdPush = new Argument() {
    @Override
    public String getCommand() {
      return "p";
    }

    @Override
    public int getMinArg() {
      return 0;
    }

    @Override
    public int getMaxArg() {
      return 1;
    }
  };

  // state - state
  private final Argument cmdState = new Argument() {
    @Override
    public String getCommand() {
      return "state";
    }

    @Override
    public int getMinArg() {
      return 1;
    }

    @Override
    public int getMaxArg() {
      return 2;
    }
  };

  private final Argument cmdStateList = new Argument() {
    @Override
    public String getCommand() {
      return "sl";
    }

    @Override
    public int getMinArg() {
      return 0;
    }

    @Override
    public int getMaxArg() {
      return 0;
    }
  };

  // create branch - c
  private final Argument cmdCreateBranch = new Argument() {
    @Override
    public String getCommand() {
      return "c";
    }

    @Override
    public int getMinArg() {
      return 1;
    }

    @Override
    public int getMaxArg() {
      return 2;
    }
  };

  // delete branch - d
  private final Argument cmdDeleteBranch = new Argument() {
    @Override
    public String getCommand() {
      return "d";
    }

    @Override
    public int getMinArg() {
      return 1;
    }

    @Override
    public int getMaxArg() {
      return 1;
    }
  };

  // remote - r
  private final Argument cmdRemote = new Argument() {
    @Override
    public String getCommand() {
      return "r";
    }

    @Override
    public int getMinArg() {
      return 1;
    }

    @Override
    public int getMaxArg() {
      return 1;
    }
  };

  private final Argument cmdChangeVersion = new Argument() {
    @Override
    public String getCommand() {
      return "v";
    }

    @Override
    public int getMinArg() {
      return 0;
    }

    @Override
    public int getMaxArg() {
      return 1;
    }
  };

  private final Argument cmdConvert = new Argument() {
    @Override
    public String getCommand() {
      return "convert";
    }

    @Override
    public int getMinArg() {
      return 1;
    }

    @Override
    public int getMaxArg() {
      return 2;
    }
  };

  private final Argument cmdTest = new Argument() {
    @Override
    public String getCommand() {
      return "t";
    }

    @Override
    public int getMinArg() {
      return 0;
    }

    @Override
    public int getMaxArg() {
      return 0;
    }
  };

  private final Argument cmdWeb = new Argument() {
    @Override
    public String getCommand() {
      return "w";
    }

    @Override
    public int getMinArg() {
      return 0;
    }

    @Override
    public int getMaxArg() {
      return 0;
    }
  };

  //-=-=-=-=-=-=-=-=-=-=-=-=- MAIN -=-=-=-=-=-=-=-=-=-=-=-=-

  public Main(String[] args) {
    this.args = args;

    // show - vers├úo simples
    if (args == null) {
      new ShowPrc().show(false);
      return;
    }

    // direct contains
    if (contains(cmdDirectContains)) {
      new ContainsPrc().directContains(findArg(1), findArg(2));
      return;

    // direct switch
    } if (contains(cmdDirectSwitch)) {
      new SwitchPrc().directSwitch(findArg(1));
      return;
    }

    // show
    if (contains(cmdShow)) {
      new ShowPrc().show(true);
      return;
    }

    // check release
    if (contains(cmdCheckRelease)) {
      boolean isUserLocal = hasArg("--local");
      new CheckReleasePrc().checkRelease(findArg(1), isUserLocal);
      return;
    }

    // push
    if (contains(cmdPush)) {
      new PushPrc().pushBranches(findArg(1));
      return;
    }

    // state
    if (contains(cmdState)) {
      if (hasArg("save")) {
        new StatePrc().saveState(findArg(2));
        return;
      } else if (hasArg("load")) {
        String id = findArg(2);
        id = AppUtils.getDigits(id);

        if (id.isEmpty()) {
          error("O n├║mero informado ├® inv├ílido.");
        } else {
          new StatePrc().loadState(Integer.parseInt(id));
          return;
        }
      } else if (hasArg("list")) {
        new StatePrc().listStates();
        return;
      }
    }

    // state list - shortcut
    if (contains(cmdStateList)) {
      new StatePrc().listStates();
      return;
    }

    // cria uma branch
    if (contains(cmdCreateBranch)) {
      new BranchPrc().createBranch(findArg(1), findArg(2));
      return;
    }

    // apaga a branch atual
    if (contains(cmdDeleteBranch)) {
      new BranchPrc().deleteBranch(findArg(1));
      return;
    }

    // verifica uma branch remota
    if (contains(cmdRemote)) {
      new BranchPrc().remoteBranch(findArg(1));
      return;
    }

    // version
    if (contains(cmdChangeVersion)) {
      new ChangeVersionPrc().changeVersion();
      return;
    }

    // para testes
    if (contains(cmdTest)) {
        try {
            new TestPrc().testFixedPos();
          } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
        return;
    }

    if (contains(cmdWeb)) {
      new WebApp();
      return;
    }

    if (contains(cmdConvert)) {
      new ConverterPrc().convert(findArg(1), findArg(2));
      return;
    }

    new ShowPrc().show(false);
//    new WebApp();
  }

  public static void main(String[] args) {
    new Main(args);
  }

  /**
   * Verifica se h├í um argumento espec├¡fico na linha de argumentos.
   *
   * @param argument - argumento desejado.
   * @return verdadeiro se o argumento foi encontrado, o case ├® ignorado.
   */
  private boolean hasArg(String argument) {
    if (args == null || args.length == 0) return false;
    return Arrays.stream(args).anyMatch(arg -> arg.equalsIgnoreCase(argument));
  }

  /**
   * Obt├¬m um argumento a partir de sua posi├º├úo (1, 2, 3...). A posi├º├úo tem que ser diferente de zero, j├í
   * que a posi├º├úo zero ├® sempre o comando de execu├º├úo. Se n├úo encontrar, ou a posi├º├úo informada ├® superior a quantidade
   * de argumentos, retorna, portanto, null.
   *
   * @param pos  - posi├º├úo esperada do argumento acima de zero.
   * @return o valor do argumento desejado.
   */
  private String findArg(int pos) {
    if (args == null || args.length == 0) return null;
    return pos < args.length ? args[pos] : null;
  }

  private boolean contains(Argument argument) {
    boolean hasMin = args.length - 1 >= argument.getMinArg();
    boolean hasMax = args.length - 1 <= argument.getMaxArg();

    if (hasMin && hasMax) {
      String cmd = args[0];
      return cmd.equalsIgnoreCase(argument.getCommand());
    }

    return false;
  }
}
Z7p9UDGyuj============================================================

[Branch.java:src\main\java\org\caixa\crelease\models\Branch.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.models;

import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class Branch implements Serializable {

    private String name;
    private String desc;
    private List<Module> modules = new ArrayList<>();
    private String render;

    public String getName() {
        return name;
    }

    @XmlAttribute
    public void setName(String name) {
        this.name = name;
    }

    public List<Module> getModules() {
        return modules;
    }

    @XmlElement(name="module")
    public void setModules(List<Module> modules) {
        this.modules = modules;
    }

    public void addModule(Module module) {
        if (modules == null) {
            modules = new ArrayList<>();
        }

        modules.add(module);
    }

    public String getDesc() {
        return desc;
    }

    @XmlAttribute
    public void setDesc(String desc) {
        this.desc = desc;
    }

    public String getRender() {
        return render;
    }

    public void setRender(String render) {
        this.render = render;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Branch branch = (Branch) o;
        return Objects.equals(getName(), branch.getName());
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(getName());
    }
}

Z7p9UDGyuj============================================================

[Command.java:src\main\java\org\caixa\crelease\models\Command.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.models;

import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Command {
    private String command;
    private String path;
    private Integer exitCode;
    private String result = "";
    private List<String> args = new ArrayList<>();
    private final List<String> lines = new ArrayList<>();
    private Error error;

    public Command(String path, String command, String... args) {
        this.path = normalizePath(path);
        this.command = command;

        if (args != null && args.length > 0) {
            this.args = new ArrayList<>();
            this.args.addAll(Arrays.asList(args));
        }
    }

    public Command(String path, String command, List<String> args) {
        this.path = normalizePath(path);
        this.command = command;
        this.args = args;
    }

    public String getCommand() {
        return command;
    }

    public void setCommand(String command) {
        this.command = command;
    }

    public List<String> getArgs() {
        return args;
    }

    public void setArgs(List<String> args) {
        this.args = args;
    }

    public String getPath() {
        if (path != null && !path.trim().isEmpty()) {
        }
        return path;
    }

    public void setPath(String path) {
        this.path = normalizePath(path);
    }

    public Integer getExitCode() {
        return exitCode;
    }

    public void setExitCode(Integer exitCode) {
        this.exitCode = exitCode;
    }

    public String getResult() {
        if (result != null && !result.trim().isEmpty() && getLines().size() == 1) {
            return result.replace(System.lineSeparator(), "").trim();
        }

        if (result == null)
            return "";

        return result;
    }

    public boolean hasResult() {
        return (result != null && !result.trim().isEmpty());
    }

    public void setResult(String result) {
        this.result = result;
    }

    public List<String> getLines() {
        return lines;
    }

    public void addLines(String line) {
        this.lines.add(line);
    }

    public Error getError() {
        return error;
    }

    public void setError(Error error) {
        this.error = error;
    }

    private String normalizePath(String path) {
        if (path != null && !path.trim().isEmpty()) {
            return Paths.get(path).normalize().toString();
        }

        return null;
    }

    public String getFullCommand() {
        if (command == null || command.trim().isEmpty()) {
            return "";
        }

        StringBuilder c = new StringBuilder();
        c.append(command);

        for (String arg : args) {
            c.append(" ").append(arg);
        }

        return c.toString();
    }

    @Override
    public String toString() {
        String ln = System.lineSeparator();
        String arguments = "";

        if (args != null && !args.isEmpty()) {
            arguments = String.join(" ", args);
        }

        return "Command [command=" + command + ", args=" + arguments + "]" + ln
                + "Result [" + getResult() + "]";
    }
}

Z7p9UDGyuj============================================================

[Error.java:src\main\java\org\caixa\crelease\models\Error.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.models;

public class Error {
    private String msg;
    private Integer code;
    private String target;

    public Error(Integer code, String msg) {
        this.code = code;
        this.msg = msg;
    }

    public String getMsg() {
        return msg;
    }

    public void setMsg(String msg) {
        this.msg = msg;
    }

    public Integer getCode() {
        return code;
    }

    public void setCode(Integer code) {
        this.code = code;
    }

    public String getTarget() {
        return target;
    }

    public void setTarget(String target) {
        this.target = target;
    }

    @Override
    public String toString() {
        return getCode() + " - " + getMsg();
    }
}

Z7p9UDGyuj============================================================

[HashStates.java:src\main\java\org\caixa\crelease\models\HashStates.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.models;

import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

@XmlRootElement(name = "states")
public class HashStates {
  private String branch;
  private List<State> states = new ArrayList<>();

  public HashStates() {}

  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }

  public List<State> getStates() {
    return this.states;
  }

  @XmlElement(name = "state")
  public void setStates(List<State> states) {
    this.states = states;
  }

  public void addState(State state) {
    this.states.add(state);
  }

  /* -- calculuados -- */

  public List<State> findByBranch(String branch) {
    return states.stream()
       .filter(state -> state.getName().equals(branch))
       .sorted(Comparator.comparing(State::getTimestamp).reversed())
       .collect(Collectors.toList());
  }

  public void sortStates() {
    if (!this.states.isEmpty()) {
      this.states = states.stream()
         .sorted(Comparator.comparing(State::getTimestamp).reversed())
         .collect(Collectors.toList());
    }
  }
}

Z7p9UDGyuj============================================================

[MavenPOM.java:src\main\java\org\caixa\crelease\models\MavenPOM.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.models;

import java.io.Serializable;

public class MavenPOM implements Serializable {
    private String pomVersion;
    private String coreVersion;
    private Module module;
    public Boolean hasAllSamePomVersion;
    public Boolean hasAllSameCoreVersion;

    public MavenPOM(String version, String coreVersion) {
        this.pomVersion = version;
        this.coreVersion = coreVersion;
    }

    public String getPomVersion() {
        return pomVersion;
    }

    public void setPomVersion(String version) {
        this.pomVersion = version;
    }

    public String getCoreVersion() {
        return coreVersion;
    }

    public void setCoreVersion(String coreVersion) {
        this.coreVersion = coreVersion;
    }

    public Module getModule() {
        return module;
    }

    public void setModule(Module module) {
        this.module = module;
    }

}

Z7p9UDGyuj============================================================

[Message.java:src\main\java\org\caixa\crelease\models\Message.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.models;

import org.caixa.crelease.renders.Model;

import java.util.Objects;

/**
 * Mensagem ├® o objeto utilizado para a comunica├º├úo entre o servidor e a p├ígina via web socket.
 */
public class Message extends Model {

    private String status;
    private String type;
    private String content;
    private String extra;

    public Message() {}

    public Message(String status, String type, String content) {
        this.status = status;
        this.type = type;
        this.content = content;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public String getExtra() {
        return extra;
    }

    public void setExtra(String extra) {
        this.extra = extra;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Message message = (Message) o;
        return Objects.equals(getStatus(), message.getStatus())
           && Objects.equals(getType(), message.getType())
           && Objects.equals(getContent(), message.getContent());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getStatus(), getType(), getContent());
    }
}
Z7p9UDGyuj============================================================

[ModState.java:src\main\java\org\caixa\crelease\models\ModState.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.models;

import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;

@XmlType(propOrder = { "name", "hash" })
public class ModState {

  private String name;
  private String hash;

  public ModState() {}

  public ModState(String name, String hash) {
    this.name = name;
    this.hash = hash;
  }

  public String getName() {
    return name;
  }

  @XmlAttribute(name = "name")
  public void setName(String name) {
    this.name = name;
  }

  public String getHash() {
    return hash;
  }

  @XmlAttribute(name = "hash")
  public void setHash(String hash) {
    this.hash = hash;
  }
}

Z7p9UDGyuj============================================================

[Module.java:src\main\java\org\caixa\crelease\models\Module.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.models;

import org.caixa.crelease.exceptions.GitException;
import org.caixa.crelease.git.Git;
import org.caixa.crelease.utils.AppUtils;

import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlTransient;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

public class Module implements Cloneable, Serializable {

    private String name;
    private String folder;
    private String path;
    private Boolean isSQL;
    private String branch; // antiga "version" na vers├úo original do Go
    private String hash;
    private List<String> files = new ArrayList<>();
    private List<String> poms = new ArrayList<>();
    private String version;
    private MavenPOM pom;

    public String getName() {
        if (name == null) return "";
        return name;
    }

    @XmlAttribute(required = true)
    public void setName(String name) {
        this.name = name;
    }

    public String getFolder() {
        return folder;
    }

    @XmlAttribute
    public void setFolder(String folder) {
        this.folder = folder;
    }

    public String getPath() {
        if (path == null) {
            return AppUtils.getJoinedPath(AppUtils.getSetup().getPath(), getFolder());
        }
        return path;
    }

    @XmlAttribute
    public void setPath(String path) {
        this.path = path;
    }

    public Boolean isSQL() {
        if (isSQL == null) return Boolean.FALSE;
        return isSQL;
    }

    @XmlAttribute(name = "sql")
    public void setSQL(Boolean isSQL) {
        this.isSQL = isSQL;
    }

    public List<String> getPoms() {
        return poms;
    }

    @XmlElement(name = "pom")
    public void setPoms(List<String> poms) {
        this.poms = poms;
    }

    public String getBranch() {
        if (branch == null) {
            try {
                this.branch = Git.findBranchName(getPath());
            } catch(GitException ex) {}
        }
        return branch;
    }

    @XmlAttribute
    public void setBranch(String branch) {
        this.branch = branch;
    }

    public String getVersion() {
        return version;
    }

    public void setVersion(String version) {
        this.version = version;
    }

    public String getHash() {
        return hash;
    }

    @XmlAttribute
    public void setHash(String hash) {
        this.hash = hash;
    }

    public List<String> getFiles() {
        return files;
    }

    @XmlAttribute(name="file")
    public void setFiles(List<String> files) {
        this.files = files;
    }

    public MavenPOM getPom() {
        return pom;
    }

    @XmlTransient
    public void setPom(MavenPOM pom) {
        this.pom = pom;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Module module = (Module) o;
        // para a compara├º├úo do Module, o case sensitive ser├í ignorado.
        return Objects.equals(getName().toLowerCase(), module.getName().toLowerCase());
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(getName());
    }

    @Override
    public Object clone() throws CloneNotSupportedException {
        Module cloned = (Module) super.clone();

        cloned.files = this.files;
        cloned.poms = this.poms;

        return cloned;
    }
}

Z7p9UDGyuj============================================================

[ModulePOM.java:src\main\java\org\caixa\crelease\models\ModulePOM.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.models;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ModulePOM {
  private final Map<Module, List<MavenPOM>> poms = new HashMap<>();

  public void addPom(Module module, MavenPOM pom) {
    List<MavenPOM> modulePoms = poms.computeIfAbsent(module, k -> new ArrayList<>());
    modulePoms.add(pom);
  }

  public void setPoms(Map<Module, List<MavenPOM>> poms) {
    this.poms.putAll(poms);
  }

  public MavenPOM getVersionByModule(Module module) {
    List<MavenPOM> modulePoms = poms.get(module);
    String pomVersion = "", coreVersion = "";
    int cp = 0, cc = 0;
    int t;

    if (modulePoms == null || modulePoms.isEmpty()) return null;
    t = modulePoms.size();

    for (MavenPOM pom : modulePoms) {
      if (pom == null) continue;

      String tpv = pom.getPomVersion();
      String tcv = pom.getCoreVersion();

      // pom version
      if (pomVersion.isEmpty()) pomVersion = tpv;
      else if (tpv.equals(pomVersion)) {
        cp++;
      }

      // core version
      if (coreVersion.isEmpty()) coreVersion = tcv;
      else if (tcv.equals(pomVersion)) {
        cc++;
      }
    }

    MavenPOM pom = new MavenPOM(pomVersion, coreVersion);
    pom.setModule(module);
    pom.hasAllSamePomVersion = t == cp;
    pom.hasAllSameCoreVersion = t == cc;

    return pom;
  }
}

Z7p9UDGyuj============================================================

[Release.java:src\main\java\org\caixa\crelease\models\Release.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.models;

import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@XmlRootElement(name = "release")
public class Release {

    private String name;
    private Boolean useLocal;
    private List<Module> modules = new ArrayList<>();
    private List<Branch> branches = new ArrayList<>();

    public String getName() {
        return name;
    }

    @XmlAttribute
    public void setName(String name) {
        this.name = name;
    }

    public Boolean getUseLocal() {
        return useLocal;
    }

    @XmlAttribute(name="use-local")
    public void setUseLocal(Boolean useLocal) {
        this.useLocal = useLocal;
    }

    public List<Module> getModules() {
        return modules;
    }

    @XmlElement(name="module")
    public void setModules(List<Module> modules) {
        this.modules = modules;
    }

    public List<Branch> getBranches() {
        return branches;
    }

    @XmlElement(name="branch")
    public void setBranches(List<Branch> branches) {
        this.branches = branches;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Release release = (Release) o;
        return Objects.equals(getName(), release.getName());
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(getName());
    }
}

Z7p9UDGyuj============================================================

[Setup.java:src\main\java\org\caixa\crelease\models\Setup.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.models;

import org.caixa.crelease.utils.AppUtils;

import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import java.util.ArrayList;
import java.util.List;

@XmlRootElement(name = "setup")
public class Setup {

  private String repository;
  private Integer port;
  private String path;
  private String remote;
  private Boolean shorthash;
  private Boolean forceReset;
  private List<Module> modules = new ArrayList<>();

  public String getRepository() {
    return repository;
  }

  @XmlElement(required = true)
  public void setRepository(String repository) {
    this.repository = repository;
  }

  public Integer getPort() {
    return port;
  }

  @XmlElement(required = true)
  public void setPort(Integer port) {
    this.port = port;
  }

  public Boolean getShorthash() {
    return shorthash;
  }

  public String getPath() {
    return path;
  }

  @XmlElement(required = true)
  public void setPath(String path) {
    this.path = path;
  }

  public String getRemote() {
    return remote;
  }

  @XmlElement
  public void setRemote(String remote) {
    this.remote = remote;
  }

  @XmlElement
  public void setShorthash(Boolean shorthash) {
    this.shorthash = shorthash;
  }

  public List<Module> getModules() {
    return modules;
  }

  public List<Module> getRegularModules() {
    List<Module> regularModules = new ArrayList<>();
    for (Module module : modules) {
      if (!module.isSQL()) {
        regularModules.add(module);
      }
    }
    return regularModules;
  }

  @XmlElement(name = "module")
  public void setModules(List<Module> modules) {
    this.modules = modules;
  }

  public Boolean getForceReset() {
    return forceReset;
  }

  @XmlElement(name = "force-reset", required = false)
  public void setForceReset(Boolean forceSwitch) {
    this.forceReset = forceSwitch;
  }

  /**
   * Obt├¬m um m├│dulo pelo seu nome.
   *
   * @param name - nome do m├│dulo a ser procurado.
   * @return uma inst├óncia de m├│dulo.
   */
  public Module getModuleByName(String name) {
    return modules.stream().filter(m -> m.getName().equals(name)).findFirst().orElse(null);
  }

  /**
   * Obt├¬m um m├│dulo pela folder.
   *
   * @param folder usada para identificar o m├│dulo.
   * @return uma inst├óncia de m├│dulo.
   */
  public Module getModuleByFolder(String folder) {
    return modules.stream().filter(m -> m.getFolder().equals(folder)).findFirst().orElse(null);
  }

  /**
   * Obt├¬m o diret├│rio do reposit├│rio + release + m├│dulo.
   *
   * @param module indicado para o diret├│rio final.
   * @param release que ser├í o diret├│rio que comportar├í os m├│dulos da release.
   * @return um caminho absoluto com com base no diret├│rio root do reposit├│rio.
   */
  public String findRepModulePath(Module module, String release) {
    if (module != null) {
      return AppUtils.getJoinedPath(getRepository(), release, module.getFolder());
    }

    return null;
  }

  /**
   * Obt├¬m o diret├│rio de trabalho do usu├írio + m├│dulo.
   *
   * @param module indicado para o diret├│rio final.
   * @return um caminho absoluto com base no diret├│rio root do diret├│rio de trabalho do usu├írio.
   */
  public String findUserModulePath(Module module) {
    if (module != null)
      return AppUtils.getJoinedPath(getPath(), module.getFolder());

    return null;
  }
}

Z7p9UDGyuj============================================================

[State.java:src\main\java\org\caixa\crelease\models\State.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.models;

import org.caixa.crelease.utils.AppUtils;

import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.List;

@XmlType(propOrder = {"name", "description", "time", "timestamp", "modules"})
public class State {

  private String name;
  private String description;
  private Long timestamp;
  private String time;
  private List<ModState> modules = new ArrayList<>();

  public State() {}

  public State(String name, String description) {
    this.name = name;
    this.description = description;

    LocalDateTime now = LocalDateTime.now();
    this.timestamp = now.toEpochSecond(ZoneOffset.UTC);
    this.time = AppUtils.formatDatetime(now);
  }

  public String getName() {
    return name;
  }

  @XmlAttribute(required = true)
  public void setName(String name) {
    this.name = name;
  }

  public String getDescription() {
    return description;
  }

  @XmlAttribute(name = "desc")
  public void setDescription(String description) {
    this.description = description;
  }

  public Long getTimestamp() {
    return timestamp;
  }

  @XmlAttribute
  public void setTimestamp(Long timestamp) {
    this.timestamp = timestamp;
  }

  public String getTime() {
    return time;
  }

  @XmlAttribute
  public void setTime(String time) {
    this.time = time;
  }

  public List<ModState> getModules() {
    return modules;
  }

  @XmlElement(name = "module")
  public void setModules(List<ModState> modules) {
    this.modules = modules;
  }
}

Z7p9UDGyuj============================================================

[BranchPrc.java:src\main\java\org\caixa\crelease\processors\BranchPrc.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.processors;

import org.caixa.crelease.exceptions.GitException;
import org.caixa.crelease.git.Git;
import org.caixa.crelease.models.MavenPOM;
import org.caixa.crelease.models.Module;
import org.caixa.crelease.models.Setup;
import org.caixa.crelease.utils.AppUtils;
import org.caixa.crelease.utils.CRelease;
import org.caixa.crelease.utils.MavenUtils;

import java.util.List;
import java.util.Scanner;

public class BranchPrc extends CRelease {

  public void createBranch(String target, String source) {
    title("Create Branch");
    Setup setup = AppUtils.getSetup();
    List<Module> modules = setup.getRegularModules();

    try {
      // usa a branch atual para criar uma nova branch
      if (source == null) {
        if (Git.getAllSameBranch().isEmpty()) {
          error("N├úo ├® poss├¡vel criar uma branch porque as branches locais s├úo divergentes.");
          return;
        }
      } else {
        if (!Git.hasAllBranch(true, source)) {
          error("A branch origem " + cs(BG, source) + " n├úo existe em um ou mais m├│dulos.");
          return;
        }
      }

      if (Git.hasAllBranch(false, target)) {
        error("A branch destino " + cs(BG, target) + " j├í foi criada em um ou mais m├│dulos.");
        return;
      }

      ////////////////////////
      // cria├º├úo da branch
      ////////////////////////
      if (source == null) {
        msg("Criando a branch ", cs(BG, target), "...");
      } else {
        for (Module mod : modules) {
          Git.download(mod.getPath(), source, false);
        }

        msg("Criando a branch ", cs(BG, target), " com base na ", cs(BG, source), "...");
      }

      for (Module mod : modules) {
        Git.createBranch(mod.getPath(), target, source);
      }

      msg("As branches foram criadas com sucesso. Use o comando 'cr' para listar.");

    } catch(GitException ex) {
      throw new RuntimeException(ex);
    }
  }

  public void deleteBranch(String branch) {
    title("Delete Branch");

    if ("develop".equals(branch) || "main".equals(branch)) {
      error("N├úo ├® poss├¡vel apagar a branch develop ou main.");
      return;
    }

    List<Module> modules = AppUtils.getSetup().getRegularModules();
    boolean changeDevelop = false;

    try {
      // se a branch atual for igual a branch target, muda para a branch develop
      for (Module mod : modules) {
        if (Git.isCurrentBranch(mod.getPath(), branch)) {
          changeDevelop = true;
          break;
        }
      }

      if (changeDevelop) {
        msg("Trocando para a branch develop...");
        for (Module mod : modules) {
          Git.download(mod.getPath(), "develop", false);
        }
      }

      msg(ln(), "Confirma a dele├º├úo da branch ", cs(BG, branch),"? ", cs(BB, "Digite \"s\" para confirmar: "), sl());
      Scanner scanner = new Scanner(System.in);
      String confirm = scanner.nextLine();
      if ("s".equals(confirm)) {
        msg("Apagando a branch ", cs(BG, branch), "...");
        for (Module mod : modules) {
          Git.deleteBranch(mod.getPath(), branch);
        }
        msg("A branch foi apagada com sucesso.");
      }

    } catch(GitException ex) {
      throw new RuntimeException(ex);
    }

  }

  public void remoteBranch(String branch) {
    title("Remote");
    Setup setup = AppUtils.getSetup();
    msg(ln(), "Procurando por ", cs(BM, branch), "...", ln());

    try {
      for (Module mod : setup.getRegularModules()) {
        Git.fetch(mod.getPath());
        List<String> branches = Git.findRemoteBranches(mod.getPath(), branch);

        if (branches.isEmpty()) {
          warn("N├úo foi encontrada nenhuma branch para " + mod.getFolder());
          continue;
        }

        msg(mod.getFolder(), " - ", branches.size() + ":");
        int bs = AppUtils.findMax(branches, String::toString);

        for (String e : branches) {
          String pomFile = Git.findFileContent(mod.getPath(), "pom.xml", e);
          MavenPOM versions = MavenUtils.getVersions(pomFile);

          if (versions != null) {
            msg("\t", cs(BG, fs(e, bs)), " pom: ", cs(BG, versions.getPomVersion()), " - ", "core: ", cs(BG, versions.getCoreVersion()));
          } else {
            msg("\t", cs(BG, fs(e,bs)));
          }
        }

      }

    } catch(GitException ex) {
      throw new RuntimeException(ex);
    }
  }

  public void upgradeBranch() {

  }

}

Z7p9UDGyuj============================================================

[ChangeVersionPrc.java:src\main\java\org\caixa\crelease\processors\ChangeVersionPrc.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.processors;

import org.caixa.crelease.models.MavenPOM;
import org.caixa.crelease.models.Module;
import org.caixa.crelease.models.ModulePOM;
import org.caixa.crelease.models.Setup;
import org.caixa.crelease.utils.AppUtils;
import org.caixa.crelease.utils.CRelease;
import org.caixa.crelease.utils.MavenUtils;

import java.util.Scanner;

public class ChangeVersionPrc  extends CRelease {

    public void changeVersion() {
        title("Change Version");

        Setup setup = AppUtils.getSetup();
        ModulePOM mp  = MavenUtils.getMaven();

        msg("Qual ├® a configura├º├úo?", ln());
        msg(sq(BM,fsr(String.valueOf(0), 1)), "Todos de uma vez.");
        msg(sq(BM,fsr(String.valueOf(1), 1)), "Um por um.");

        String option = msg(ln(), input(cs(BB, "Op├º├úo: ")));

        if ("0".equals(option)) {

        }

        for (Module mod : setup.getRegularModules()) {
            MavenPOM pom = mp.getVersionByModule(mod);
        }
    }
}

Z7p9UDGyuj============================================================

[CheckReleasePrc.java:src\main\java\org\caixa\crelease\processors\CheckReleasePrc.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.processors;

import org.caixa.crelease.exceptions.GitException;
import org.caixa.crelease.git.Git;
import org.caixa.crelease.models.Branch;
import org.caixa.crelease.models.Module;
import org.caixa.crelease.models.Release;
import org.caixa.crelease.models.Setup;
import org.caixa.crelease.utils.AppUtils;
import org.caixa.crelease.utils.CRelease;

import java.util.List;

public class CheckReleasePrc extends CRelease {

  public void checkRelease(String xmlReleaseFile, boolean isUserLocal) {
    title("Check Release");
    AppUtils.markTime();

    if (!xmlReleaseFile.toLowerCase().endsWith(".xml")) {
      xmlReleaseFile = xmlReleaseFile + ".xml";
    }

    msg("Arquivo: ", cs(GREEN, xmlReleaseFile), "\n");

    try {
      Setup setup = AppUtils.getSetup();
      String releasePath = AppUtils.getInternalPath("releases", xmlReleaseFile);

      if (!AppUtils.isPathFile(releasePath)) {
        msg("O arquivo ", cs(RED, releasePath), " ├® inexistente ou inv├ílido.");
        System.exit(1);
      }

      Release release = AppUtils.readXML(releasePath, Release.class);
      String releaseName = release.getName();

      // primeiramente, se o alvo for o reposit├│rio, baixa as branches da release, se o alvo for o caminho do usu├írio,
      // n├úo precisar├í baixar nenhuma branch, testa com as branches atuais do usu├írio definidas em setup.
      String branchName = "";
      List<Module> modules = setup.getModules();
      for (Module mod : modules) {
        if (isUserLocal) {
          String localPath = AppUtils.getFullUserPath(mod);
          branchName = Git.findBranchName(localPath);
          msg("Utilizando a ", cs(GREEN, branchName), " em ", cs(GREEN, localPath));
          mod.setPath(localPath);
          Git.fetch(localPath);
        } else {
          branchName = (mod.getVersion() == null || mod.getVersion().trim().equals("*")) ? releaseName : mod.getVersion();
          msg("Baixando a ", cs(GREEN, branchName), " em ", cs(GREEN, AppUtils.getJoinedPath(setup.getRepository(), releaseName, mod.getFolder())));
          mod.setPath(AppUtils.getFullRepositoryPath(releaseName, mod));

          if (mod.isSQL()) {
            Git.download(mod.getPath(), "develop", true);
          } else {
            Git.download(mod.getPath(), branchName, true);
          }
        }
      }
      System.out.println();

      // valida as branches definidas dentro de uma release
      for (Branch branch : release.getBranches()) {
        int titleSize = ("Validando a branch: " + branch.getName()).length();
        msg(rp("ÔöÇ", titleSize));
        msg("Validando a branch: ", cs(GREEN, branch.getName()));

        StringBuilder sb = new StringBuilder();
        String sqlFileList = "";

        for (Module mod : modules) {
          String path = mod.getPath();
          branchName = branch.getName();

          if (!mod.isSQL()) {
            if (!Git.hasRemoteBranch(path, branchName).isEmpty()) {
              sb.append(mod.getName());
              String remoteHash = Git.findLastCommitHash(path, branchName, false);
              if (!Git.containsCommitHash(path, remoteHash)) {
                sb.append(cs(YELLOW, " [sem merge]")).append(", ");
              } else {
                sb.append(", ");
              }
            }
          } else {
            if (!branchName.equals("develop") && !branchName.equals("main")) {
              sqlFileList = AppUtils.readBranchSQLFiles(setup.findRepModulePath(mod, releaseName), branchName, false);
            }
          }
        }

        // renderiza o resultado
        String result = sb.toString();
        if (result.length() > 2) {
          result = result.substring(0, result.length() - 2);
        }
        if (!sqlFileList.isEmpty()) {
          result += "\nArquivos:\n";
          result += sqlFileList;
        }

        System.out.println(result + "\n");
        sb.setLength(0);
      }

      // apresenta a dura├º├úo
      msg("Dura├º├úo: ", cs(GREEN, AppUtils.markTime()));

    } catch (GitException ex) {
      throw new RuntimeException(ex);
    }

  }
}

Z7p9UDGyuj============================================================

[ContainsPrc.java:src\main\java\org\caixa\crelease\processors\ContainsPrc.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.processors;

import org.caixa.crelease.exceptions.GitException;
import org.caixa.crelease.git.Git;
import org.caixa.crelease.models.Module;
import org.caixa.crelease.models.Setup;
import org.caixa.crelease.utils.AppUtils;
import org.caixa.crelease.utils.CRelease;

public class ContainsPrc extends CRelease {

  /**
   * Verifica se a branch source est├í contida na branch target.
   *
   * @param source - branch a ser verificada.
   * @param target - branch que testa se cont├¬m a branch source
   */
  public void directContains(String source, String target) {
    Setup setup = AppUtils.getSetup();
    title("Direct Contains");

    try {
      msg("A branch ", cs(GREEN, source), " est├í na branch ", cs(GREEN, target), "?\n");

      for (Module mod : setup.getRegularModules()) {
        String repPath = AppUtils.getFullRepositoryPath(target, mod);
        Git.download(repPath, target, true);

        String hashSource = Git.hasRemoteBranch(repPath, source);
        boolean hasSource = Git.containsCommitHash(repPath, hashSource);

        hashSource = AppUtils.getShortHash(hashSource);

        if (hasSource) {
          msg(sq(GREEN, "SIM"), " A branch " + cs(GREEN, source) + " sim est├í contida na branch " + cs(GREEN, target) +
             " em " + cs(GREEN, fs(repPath + ",", 55)) + " hash: " + cs(GREEN, hashSource));
        } else {
          msg(sq(RED, "N├âO"), " A branch " + cs(GREEN, source) + " n├úo est├í contida na branch " + cs(GREEN, target) +
             " em " + cs(GREEN, fs(repPath + ",", 55)) + " hash: " + cs(GREEN, hashSource));
        }
      }
    } catch (GitException ex) {
      throw new RuntimeException(ex);
    }
  }
}

Z7p9UDGyuj============================================================

[ConverterPrc.java:src\main\java\org\caixa\crelease\processors\ConverterPrc.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.processors;

import org.apache.logging.log4j.util.Strings;
import org.caixa.crelease.utils.AppUtils;
import org.caixa.crelease.utils.CRelease;

import java.nio.file.Path;

public class ConverterPrc extends CRelease {

    public void convert(String source, String target) {
        title("Converter");

        boolean convertToBinary = false;
        String sourcePath = "";
        String targetPath = "";

        if (Strings.isEmpty(source)) {
            msg("N├úo foi informado o arquivo de origem a ser convertido.");
            return;
        }
        sourcePath = AppUtils.getJoinedPath(AppUtils.getUserDir(), source);

        if (Strings.isEmpty(target)) {
            if (AppUtils.checkExt(Path.of(sourcePath), ".txt")) {
                convertToBinary = true;
            }

            String fileName = AppUtils.getFilenameWithoutExt(source);
            target = fileName + (convertToBinary ? ".zip" : ".txt");
        }
        targetPath = AppUtils.getJoinedPath(AppUtils.getUserDir(), target);

        // verifica se o source ├® bin├írio ou texto
        msg(ln(), "Convertendo...", ln());
        info("ORIGEM");
        msg(sourcePath);
        info("DESTINO");
        msg(targetPath);

        try {
            if (convertToBinary) {
                AppUtils.convertBase64ToBinary(AppUtils.readFile(sourcePath), targetPath);
            } else {
                String base64 = AppUtils.convertBinaryToBase64(sourcePath);
                AppUtils.saveFile(base64, targetPath);
            }
            msg(ln(), "Arquivo convertido com sucesso!");
        } catch(Exception e) {
            System.out.println(e.getMessage());
        }
    }
}

Z7p9UDGyuj============================================================

[PushPrc.java:src\main\java\org\caixa\crelease\processors\PushPrc.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.processors;

import org.caixa.crelease.exceptions.GitException;
import org.caixa.crelease.git.Git;
import org.caixa.crelease.models.Module;
import org.caixa.crelease.models.Setup;
import org.caixa.crelease.utils.AppUtils;
import org.caixa.crelease.utils.CRelease;
import org.caixa.crelease.utils.MavenUtils;

import java.util.List;
import java.util.Scanner;

public class PushPrc extends CRelease {

  public void pushBranches(String comment) {
    title("Push");

    /*
     1: verifica quais branches precisam de commit
     1.1 se elas forem todas iguais, prosiga no commit e depois o push
     1.2 se forem diferentes, avisa que N├âO pode prosseguir
     2: branches que n├úo precisam de commit, mas precisam de push, podem fazer o push (elas podem ter nomes distintos):
     2.1 verifica se a branch ├® nova (n├úo tem refer├¬ncia online), ent├úo faz o push com --set-upstream origin <nome_branch>
     2.2 se j├í existe, faz simplesmente o push
     */

    Setup setup = AppUtils.getSetup();
    String branch;

    try {
      List<Module> commitMods = Git.findAllCommitToMake(setup.getModules());
      branch = Git.getAllSameBranch();
      msg("Branch: ", !branch.isEmpty() ? cs(BG, branch) : cs(BG, "- n├úo identific├ível -"), ln());

      // 1. commit
      if (!commitMods.isEmpty()) {
        if (!branch.isEmpty()) {
          // 1.1
          if (comment == null || comment.trim().isEmpty()) {
            msg(ln(), "Escreva o coment├írio: ", sl());
            Scanner scanner = new Scanner(System.in);
            comment = scanner.nextLine();
          }

          String commitMessage = MavenUtils.createCommitMessage(comment);
          info("COMMENT", cs(GREEN, commitMessage));
          info("\nTentando fazer o commit...");
          for (Module mod : commitMods) {
            info("COMMIT", "Comitando em " + cs(BG, mod.getPath()));
            Git.commit(mod.getPath(), commitMessage);
          }
        } else {
          // 1.2
          error("As branches apresentam nomes diferentes, n├úo podem subir com a mesma mensagem.");
          return;
        }
      } else {
        warn("N├úo h├í commits a serem feitos.");
      }

      // 2. push
      info("\nTentando fazer o push...");
      for (Module mod : setup.getRegularModules()) {
        String path = mod.getPath();
        String branchName = Git.findBranchName(mod.getPath());

        if (!Git.hasSameState(path, branchName)) {
          // 2.1/2.2 faz o push (nova ou antiga)
          info("PUSH", "Fazendo o push em " + cs(BG, path));
          Git.push(path);
        }
      }
    } catch (GitException e) {
      throw new RuntimeException(e);
    }
  }
}

Z7p9UDGyuj============================================================

[RemotePrc.java:src\main\java\org\caixa\crelease\processors\RemotePrc.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.processors;

import org.caixa.crelease.enums.MsgStatusType;
import org.caixa.crelease.exceptions.GitException;
import org.caixa.crelease.git.Git;
import org.caixa.crelease.models.Branch;
import org.caixa.crelease.models.MavenPOM;
import org.caixa.crelease.models.Message;
import org.caixa.crelease.models.Module;
import org.caixa.crelease.models.ModulePOM;
import org.caixa.crelease.models.Setup;
import org.caixa.crelease.renders.DownloadModel;
import org.caixa.crelease.screen.WebSocketServer;
import org.caixa.crelease.utils.AppUtils;
import org.caixa.crelease.utils.MavenUtils;
import org.caixa.crelease.utils.Web;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class RemotePrc {

    private static Message msg;
    private static Setup setup;
    private static List<Module> modules;

    public static void download(Message message) {
        DownloadModel model = null;
        String branch = null;
        boolean isValid = true;

        if (setup == null) {
            setup = AppUtils.getSetup();
        }

        if (modules == null) {
            modules = setup.getModules();
        }

        if (msg == null) {
            msg = message;
            model = Web.fromJson(message.getContent(), DownloadModel.class);
            branch = model.getBranch();
            System.out.println("Fazendo o download da branch: " + branch);
        }

        /////////////////////////
        // fazendo a valida├º├úo
        /////////////////////////
        try {
            System.out.println("Validando...");
            List<Module> commitMods = Git.findAllCommitToMake(modules);
            List<Module> pushMods = Git.findAllPushToMake(modules);
            String saida = "";

            if (!setup.getForceReset()) {
                if (!commitMods.isEmpty()) {
                    isValid = false;
                    // todo-ito apresentar msg de erro que h├í commits a serem feitos
                    for (Module mod : commitMods) {
                        saida += mod.getPath() + "<br>";
                    }
                }

                if (!pushMods.isEmpty()) {
                    isValid = false;
                    // todo-ito apresentar msg de erro que h├í pushes a serem feitos
                    for (Module mod : pushMods) {
                        saida += mod.getFolder() + " - " + Git.findBranchName(AppUtils.getFullUserPath(mod));
                    }
                }
            }
            // ~ fim valida├º├úo

            if (isValid) {
                /////////////////////////
                // Baixando a branch
                /////////////////////////

                msg.setStatus(MsgStatusType.RUNNING.getValue());
                for (Module mod : modules) {
                    System.out.println("Baixando " + model.getModule() + "...");

                    String b = branch;
                    String path = AppUtils.getFullUserPath(mod);

                    if (mod.isSQL()) {
                        b = "develop";
                    }

                    // desfazendo altera├º├Áes.
                    if (setup.getForceReset()) {
                        Git.forceReset(path);
                    }

                    // envia para o front a informa├º├úo de que a branch est├í sendo baixada
                    model.setModule(mod.getName().toLowerCase());
                    msg.setContent(Web.toJson(model));
                    WebSocketServer.sendMessage(msg);

                    // deixar o nome dispon├¡vel do m├│dulo que est├í sendo baixado
                    Git.download(path, b, false);
                }
                // encerra o processo
                System.out.println("--- finalizando o processo ---");
            }

        } catch (GitException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Pesquisa as branches que cont├¬m a palavra search.
     *
     * @param search a palavra para identificar uma ou mais branch.
     * @return um mapa com as branches encontradas com os seus m├│dulos.
     * @throws GitException caso d├¬ algum erro.
     */
    public HashMap<String, List<Module>> branchList(String search) throws GitException {
        Setup setup = AppUtils.getSetup();
        final HashMap<String, List<Module>> branches = new HashMap<>();

        for (Module mod : setup.getRegularModules()) {
            List<String> sb = Git.findRemoteBranches(mod.getPath(), search);
            for (String branch : sb) {
                add(branches, branch, mod);
            }
        }

        return branches;
    }

    /**
     * Obt├¬m a branch atual configurada pelo setup.
     *
     * @return uma inst├óncia de Branch contendo a branch atual na m├íquina do usu├írio.
     * @throws GitException caso d├¬ algum erro.
     */
    public Branch branchAtual() throws GitException {
        Branch branch = new Branch();
        ModulePOM mvn = MavenUtils.getMaven();

        branch.setName(Git.getAllSameBranch());
        for (Module mod : AppUtils.getSetup().getRegularModules()) {
            mod.setPom(mvn.getVersionByModule(mod));
            branch.addModule(mod);
        }

        return branch;
    }

    private void add(HashMap<String, List<Module>> branches, String branch, Module mod) throws GitException {
        if (branch.contains("origin/")) {
            branch = branch.replace("origin/", "");
        }

        if (!branches.containsKey(branch)) {
            branches.put(branch, new ArrayList<>());
        }

        String version = "-";
        String pomFile = Git.findFileContent(mod.getPath(), "pom.xml", "origin/" + branch);
        MavenPOM pom = MavenUtils.getVersions(pomFile);
        if (pom != null) {
            version = pom.getPomVersion();
        } else {
            if (mod.getName().equalsIgnoreCase("shell")) {
                version = branch;
            }
        }

        Module m = new Module();
        m.setName(mod.getName());
        m.setBranch(branch);
        m.setVersion(version);
        
        branches.get(branch).add(m);
    }
}

Z7p9UDGyuj============================================================

[ShowPrc.java:src\main\java\org\caixa\crelease\processors\ShowPrc.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.processors;

import org.caixa.crelease.enums.StatusType;
import org.caixa.crelease.exceptions.GitException;
import org.caixa.crelease.git.BranchStatus;
import org.caixa.crelease.git.Git;
import org.caixa.crelease.models.MavenPOM;
import org.caixa.crelease.models.Module;
import org.caixa.crelease.models.ModulePOM;
import org.caixa.crelease.models.Setup;
import org.caixa.crelease.utils.AppUtils;
import org.caixa.crelease.utils.CRelease;
import org.caixa.crelease.utils.MavenUtils;

import java.util.List;

public class ShowPrc extends CRelease {

    public void show(boolean isFull) {
        title("Show");
        Setup setup = AppUtils.getSetup();
        ModulePOM m = MavenUtils.getMaven();

        String strPom = cs(BB, "pom-version") + ": ";
        String strCore = cs(BB, "core-version") + ": ";

        boolean hasCommit = false;
        boolean hasPush = false;
        boolean hasNew = false;
        boolean hasPull = false;

        List<Module> modules = setup.getModules();
        int sizeName = AppUtils.findMax(modules, Module::getName) + 2;
        int sizeBranch = AppUtils.findMax(modules, Module::getBranch) + 2;
        int sizePerk = 7;

        try {
            for (Module mod : modules) {
                MavenPOM pom = m.getVersionByModule(mod);
                String fullPath = AppUtils.getFullUserPath(mod);
                String branch = mod.getBranch();

                int c = 0;
                String strHash = "";
                String strCommit = "";
                String strPush = "";
                String strPull = "";
                String strNew = "";

                if (isFull) {
                    BranchStatus status = Git.checkStatus(fullPath);

                    // na vers├úo full, ele tr├ís informa├º├Áes como se h├í commit a ser feito e/ou se precisa fazer push
                    if (status.hasStatus(StatusType.NEW)) {
                        strNew = cs(BC, "(x)");
                        hasNew = true;
                        c += 3;
                    }
                    if (status.hasStatus(StatusType.COMMIT)) {
                        strCommit = cs(BY, "(!)");
                        hasCommit = true;
                        c += 3;
                    }
                    if (status.hasStatus(StatusType.PUSH)) {
                        strPush  = cs(BG, "(@)");
                        hasPush = true;
                        c += 3;
                    }
                    if (status.hasStatus(StatusType.PULL)) {
                        strPull = cs(BM, "(*)");
                        hasPull = true;
                        c += 3;
                    }

                    strHash = AppUtils.shortHash(Git.findLastCommitHash(fullPath, branch, true));
                }

                // apresenta├º├úo
                if (pom != null) {
                    // para m├│dulos com o POM
                    msg( fs(mod.getName() + ":", sizeName), cs(BG, fs(branch, sizeBranch)),
                       strCommit,
                       strPush,
                       strNew,
                       strPull,
                       sp(sizePerk - c),
                       strPom, cs(BG, fs(pom.getPomVersion(), 18)),
                       strCore, cs(BG, fs(pom.getCoreVersion(), 18)),
                       (!strHash.isEmpty() ? cs(BB, "hash: ") + cs(BG, strHash) + sp(1) : strHash)
                    );
                } else {
                    // para m├│dulos sem o POM
                    msg( fs(mod.getName() + ":", sizeName) , cs(BG, fs(branch, sizeBranch)),
                       strCommit,
                       strPush,
                       strNew,
                       strPull,
                       sp(sizePerk - c),
                       (!strHash.isEmpty() ? cs(BB, "hash: ") + cs(BG, strHash) + sp(1) : strHash)
                    );
                }
            }

            if (isFull && (hasCommit || hasPush || hasNew || hasPull)) {
                msg("\nLegenda:\n");
                if (hasCommit) {
                    msg(cs(BY,"- precisa fazer commit (!)"));
                }
                if (hasPull) {
                    msg(cs(BM,"- precisa fazer pull (*)"));
                }
                if (hasPush) {
                    msg(cs(BG,"- precisa fazer push (@)"));
                }
                if (hasNew) {
                    msg(cs(BC,"- nova branch, precisa de push (x)"));
                }
            }
        } catch(GitException ex) {
            new RuntimeException(ex);
        }
    }
}

Z7p9UDGyuj============================================================

[StatePrc.java:src\main\java\org\caixa\crelease\processors\StatePrc.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.processors;

import org.caixa.crelease.exceptions.GitException;
import org.caixa.crelease.git.Git;
import org.caixa.crelease.models.ModState;
import org.caixa.crelease.models.Module;
import org.caixa.crelease.models.Setup;
import org.caixa.crelease.models.State;
import org.caixa.crelease.models.HashStates;
import org.caixa.crelease.utils.AppUtils;
import org.caixa.crelease.utils.CRelease;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class StatePrc extends CRelease {

  public void saveState(String comment) {
    title("Save State");

    Setup setup = AppUtils.getSetup();
    try {
      String branch = Git.getAllSameBranch();

      if (comment == null) {
        error("├ë necess├írio informar um coment├írio para salvar o estado.");
      }

      if (!branch.isEmpty()) {
        msg(sq(BM, branch), cs(BG, comment), ln());

        String xmlPath = AppUtils.getInternalPath("states", "states.xml");
        HashStates hashStates;

        if (!AppUtils.isPathExists(xmlPath)) {
          hashStates = new HashStates();
        } else {
          hashStates = AppUtils.readXML(xmlPath, HashStates.class);
        }

        // salvando o estado atual da branch no arquivo states.xml
        State state = new State(branch, comment);
        List<ModState> modules = new ArrayList<>();
        for (Module mod : setup.getRegularModules()) {
          modules.add(new ModState(mod.getFolder(), Git.findLastCommitHash(mod.getPath(), branch, true)));
        }
        state.setModules(modules);
        hashStates.addState(state);
        hashStates.sortStates();

        AppUtils.saveXML(xmlPath, HashStates.class, hashStates);
        msg("A branch ", cs(BG, branch), " teve o seu estado salvo com sucesso em ", cs(BG, state.getTime()));
        msg("Commit hashes salvos:\n");
        for (ModState mod : modules) {
          msg(fs(mod.getName() + ":", 25), cs(BG, AppUtils.shortHash(mod.getHash())));
        }
      } else {
        error("As branches s├úo de nomes diferentes, portanto, n├úo ├® poss├¡vel salvar os seus estados atuais.");
      }
    } catch (GitException e) {
      throw new RuntimeException(e);
    }
  }

  public void loadState(int id) {
    title("Load State");

    try {
      String branch = Git.getAllSameBranch();

      if (branch.isEmpty()) {
        error("As branches apresentam nomes diferentes, n├úo pode mudar o estado das branches.");
        return;
      }

      HashStates hashStates = AppUtils.getHashStates();
      List<State> states = hashStates.findByBranch(branch);

      if (states.isEmpty()) {
        error("N├úo h├í estados registrados para a branch " + cs(BG, branch));
        return;
      }

      if (id < 0 || id > states.size() - 1) {
        error("O id " + cs(BM, id) + " n├úo corresponde em um estado v├ílido. " +
           "Estados registrados para " + cs(BG, branch) + " v├úo de " + cs(BM, 0) + " at├® " + cs(BM, states.size() - 1) + "." + ln());
      }

      ///////////////////
      // alterar estado
      ///////////////////
      State state = states.get(id);
      List<ModState> modules = state.getModules();
      msg("Estado registrado: ", cs(BG, state.getName(), " - ", state.getTime()), ln());
      for (ModState mod : modules) {
        String folder = mod.getName();
        String hash = mod.getHash();
        msg(fs(folder, 20), " - ", cs(BG, hash));
      }

      msg(ln(), "Confirma o carregamento desse estado? ", cs(BB, "Digite \"s\" para confirmar: "), sl());
      Scanner scanner = new Scanner(System.in);
      String confirm = scanner.nextLine();
      if (confirm.equalsIgnoreCase("s")) {
        System.out.println();
        // muda o HEAD das branches para os hashes registrados.
        int pathSize = AppUtils.findMax(AppUtils.getSetup().getRegularModules(), Module::getPath);
        for (ModState mod : modules) {
          Module target = AppUtils.getSetup().getModuleByFolder(mod.getName());
          msg("Resetando ", cs(BG, fs(target.getPath(), pathSize)), " para o hash ", cs(BG, mod.getHash()));
          Git.reset(target.getPath(), mod.getHash());
          Git.forcePush(target.getPath());
        }

        msg("\nOpera├º├úo realizada com sucesso.");
      } else {
        msg("Opera├º├úo cancelada.");
      }

    } catch (GitException e) {
      throw new RuntimeException(e);
    }

  }

  public void listStates() {
    title("List States");

    try {
      HashStates hashStates = AppUtils.getHashStates();
      String branch = Git.getAllSameBranch();
      int size = 0;

      List<State> states = hashStates.getStates();
      if (states.isEmpty()) {
        warn("N├úo h├í estados salvos. Use o comando 'cr state save \"coment├írio\"' para salvar um estado atual das branches.");
        return;
      }

      if (!branch.isEmpty()) {
        String msg = "Branch: " + cs(BG, branch);
        states = hashStates.findByBranch(branch);
        size = states.size();

        if (size > 0) {
          msg(msg, " - " + size + " estados registrados para a branch atual.");
        } else {
          msg(msg, " - ", cs(BR,"sem estados"), " registrados para a branch atual.");
        }
      }

      if (size > 0 ) {
        msg("├Ültimos estados registrados para a branch atual:", ln());
      } else {
        msg("├Ültimos estados registrados:", ln());
      }

      printStates(states);
      msg(ln(), "Use o comando ", cs(BG, "cr state load <"), cs(BM, "num"), cs(BG,">"), " para carregar um estado das branches atuais.");

    } catch(GitException ex) {
      throw new RuntimeException(ex);
    }
  }

  private void printStates(List<State> states) {
    int index = 0;
    int idxSize = AppUtils.findMax(states.size());

    for (State state : states) {
      msg(sq(BM,fsr(String.valueOf(index), idxSize)), cs(BG, state.getName()),
         " - ", cs(BG, state.getTime()), " - ", cs(BG, state.getDescription()));
      index++;
    }
  }

}

Z7p9UDGyuj============================================================

[SwitchPrc.java:src\main\java\org\caixa\crelease\processors\SwitchPrc.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.processors;

import org.caixa.crelease.exceptions.GitException;
import org.caixa.crelease.git.Git;
import org.caixa.crelease.models.Module;
import org.caixa.crelease.models.Setup;
import org.caixa.crelease.utils.AppUtils;
import org.caixa.crelease.utils.CRelease;

import java.util.List;

public class SwitchPrc extends CRelease {

    public void directSwitch(String branch) {
        title("Direct Switch");
        Setup setup = AppUtils.getSetup();
        List<Module> modules = setup.getModules();

        try {
            List<Module> commitMods = Git.findAllCommitToMake(modules);
            List<Module> pushMods = Git.findAllPushToMake(modules);

            if (!setup.getForceReset()) {
                if (!commitMods.isEmpty()) {
                    error("H├í commits a serem feitos:\n");
                    commitMods.forEach(mod -> msg(cs(BG, mod.getFolder())));
                    return;
                }

                if (!pushMods.isEmpty()) {
                    warn("H├í pushes a serem feitos:\n");
                    pushMods.forEach(mod -> {
                        try {
                            msg(cs(BG, mod.getFolder()), " - ",
                               cs(WHITE, Git.findBranchName(AppUtils.getFullUserPath(mod))) );
                        } catch (GitException e) {
                            throw new RuntimeException(e);
                        }
                    });
                    System.out.println();
                }
            }

            for (Module module : modules) {
                String b = branch;
                String path = AppUtils.getFullUserPath(module);
                if (module.isSQL()) {
                    b = "develop";
                }

                // desfazendo altera├º├Áes.
                // todo-ito colocar msg quando for o m├│dulo que ir├í desfazer as altera├º├Áes
                if (setup.getForceReset()) {
                    Git.forceReset(path);
                }

                msg("Trocando para ", cs(BG, b), " em ", cs(BG, path), "...");
                Git.download(path, b, false);
            }
        } catch (GitException e) {
            throw new RuntimeException(e);
        }
    }

    private boolean hasModuleBranch(Module module, String branch, List<Module> modCommits) {

        return false;
    }
}

Z7p9UDGyuj============================================================

[TestPrc.java:src\main\java\org\caixa\crelease\processors\TestPrc.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.processors;

import org.caixa.crelease.utils.CRelease;

public class TestPrc extends CRelease {

  // ANSI escape code to move the cursor to specific position
  public static final String ANSI_ESC = "\u001B[";
  // ANSI escape codes to hide and show the cursor
  public static final String HIDE_CURSOR = ANSI_ESC + "?25l";
  public static final String SHOW_CURSOR = ANSI_ESC + "?25h";

  public void testFixedPos() throws InterruptedException {
    // Clear the screen
    System.out.print(ANSI_ESC + "2J");
    System.out.println(HIDE_CURSOR);

    // Move cursor to row 10, column 10 and print text
    moveCursor(10, 10);
    System.out.print("Posi├º├úo fixa 1");

    // Move cursor to row 15, column 20 and print text
    moveCursor(15, 20);
    System.out.print("Posi├º├úo fixa 2");

    // Simulate updating text in fixed position
    for (int i = 0; i < 10; i++) {
      Thread.sleep(1000);

      // Move cursor back to the position to update it
      moveCursor(10, 10);
      System.out.print("Posi├º├úo fixa 1: " + i);
    }

    // Move cursor to a new position before ending
    moveCursor(20, 0);
    System.out.println("Fim da atualiza├º├úo");
    System.out.println(SHOW_CURSOR);
  }

  public void testProgressBar() {
    int total = 100; // Total de etapas a serem completadas

    for (int i = 0; i <= total; i++) {
      printProgress(i, total);
      try {
        Thread.sleep(100); // Simula o trabalho sendo feito
      } catch (InterruptedException e) {
        e.printStackTrace();
      }
    }
  }

  // Helper method to move the cursor to specific row and column
  private static void moveCursor(int row, int col) {
    System.out.print(ANSI_ESC + row + ";" + col + "H");
  }

  public static void printProgress(int current, int total) {
    int barWidth = 50; // Largura da barra de progresso
    float progressPercentage = (float) current / total;
    int progress = Math.round(progressPercentage * barWidth);

    StringBuilder bar = new StringBuilder("[");
    for (int i = 0; i < barWidth; i++) {
      if (i < progress) {
        bar.append("=");
      } else {
        bar.append(" ");
      }
    }
    bar.append("] ").append(String.format("%.2f", progressPercentage * 100)).append("%");

    System.out.print("\r" + bar); // Retorna ao in├¡cio da linha e imprime a barra de progresso
    System.out.flush();
  }
}
Z7p9UDGyuj============================================================

[DownloadAction.java:src\main\java\org\caixa\crelease\remote\DownloadAction.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.remote;

import org.caixa.crelease.git.Git;
import org.caixa.crelease.models.Message;
import org.caixa.crelease.models.Module;
import org.caixa.crelease.models.Setup;
import org.caixa.crelease.renders.DownloadModel;
import org.caixa.crelease.utils.AppUtils;

import java.util.List;

public class DownloadAction extends RemoteAction<DownloadModel> {

    private Setup setup;
    private List<Module> modules;
    private boolean isValid = true;

    public DownloadAction(Message message) {
        super(message);
    }

    @Override
    public Class<DownloadModel> getType() {
        return DownloadModel.class;
    }

    @Override
    protected void action() {
        try {
            String branch = model.getBranch();

            // muda o status para running e come├ºa a baixar a branch
            if (isStarted()) {
                setup = AppUtils.getSetup();
                modules = setup.getRegularModules();

                /////////////////////////
                // fazendo a valida├º├úo
                /////////////////////////
                System.out.println("Validando...");
                List<Module> commitMods = Git.findAllCommitToMake(modules);
                List<Module> pushMods = Git.findAllPushToMake(modules);
                String erro = "";

                if (!setup.getForceReset()) {
                    if (!commitMods.isEmpty()) {
                        isValid = false;
                        erro += "<strong>Commits a serem feitos:</strong><br>";
                        for (Module mod : commitMods) {
                            erro += mod.getPath() + "<br>";
                        }
                    }

                    if (!pushMods.isEmpty()) {
                        if (!isValid) {
                            erro += "<br>";
                        }
                        isValid = false;
                        erro += "<strong>Pushes a serem feitos:</strong><br>";
                        for (Module mod : pushMods) {
                            erro += mod.getFolder() + " - " + Git.findBranchName(AppUtils.getFullUserPath(mod));
                        }
                    }
                }

                // envia para o usu├írio o erro
                if (!isValid) {
                    System.out.println("Erro na valida├º├úo da branch: " + erro);
                    doError(erro);
                    sendMessage();
                    return;
                }

                // ~ fim valida├º├úo
                doRun();
            }

            /*
             * Baixando a demanda.
             */
            if (isValid && isRunning()) {
                for (Module mod : modules) {
                    model.setModule(mod.getName().toLowerCase());
                    model.setPercent("50");

                    System.out.println("Baixando " + model.getModule() + "...");
                    sendMessage();

                    String b = branch;
                    String path = AppUtils.getFullUserPath(mod);
                    if (mod.isSQL()) {
                        b = "develop";
                    }

                    // desfazendo altera├º├Áes.
                    if (setup.getForceReset()) {
                        Git.forceReset(path);
                    }

                    // baixando
                    Git.download(path, b, false);
                    // completou o m├│dulo, configura como 100%
                    model.setPercent("100");
                    sendMessage();
                }
                // encerra o processo
                System.out.println("--- finalizando o processo ---");
                doFinish();
                sendMessage();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}

Z7p9UDGyuj============================================================

[RemoteAction.java:src\main\java\org\caixa\crelease\remote\RemoteAction.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.remote;

import com.google.gson.Gson;
import org.caixa.crelease.enums.MsgStatusType;
import org.caixa.crelease.models.Message;
import org.caixa.crelease.renders.Model;
import org.caixa.crelease.screen.WebSocketServer;

/**
 * RemoteAction permite criar uma estrutura que controla uma a├º├úo e a prepara para um tipo Message.
 * O tipo Message ├® usado para enviar dados via socket para o front-end. Para enviar a Message, ├® preciso
 * especificar qual ├® o conte├║do dessa Message e esse conte├║do ├® controlado pelo m├®todo action(). Uma vez que
 * existir a necessidade de enviar a mensagem para o front, executa-se o m├®todo sendMessage().
 *
 * @param <T> classe que representa o conte├║do da mensagem. Essa classe deve estender Model.
 */
public abstract class RemoteAction<T extends Model> {

    protected Message message;
    protected T model;

    protected abstract void action();
    public abstract Class<T> getType();

    private RemoteAction() {}

    public RemoteAction(Message message) {
        this.message = message;
        this.model = new Gson().fromJson(this.message.getContent(), getType());
    }

    /**
     * Executa o m├®todo action() em uma Thread para n├úo travar o processo de execu├º├úo da thread default do sistema.
     * Durante o processo, o status da evolu├º├úo do action() pode ser enviado para o front-end.
     */
    public void execute() {
        Thread t = new Thread(this::action);
        t.start();
    }

    public MsgStatusType getStatus() {
        if (message == null) return null;
        return MsgStatusType.fromValue(message.getStatus());
    }

    protected void doRun() {
        if (message == null) return;
        message.setStatus(MsgStatusType.RUNNING.getValue());
    }

    protected void doFinish() {
        if (message == null) return;
        message.setStatus(MsgStatusType.FINISHED.getValue());
    }

    protected void doError(String errorMsg) {
        if (message == null) return;
        message.setExtra(errorMsg);
        message.setStatus(MsgStatusType.ERROR.getValue());
    }

    public T getModel() {
        return model;
    }

    public void setModel(T model) {
        this.model = model;
    }

    protected String getMessage() {
        if (message == null) return null;

        message.setContent(new Gson().toJson(model));
        return new Gson().toJson(message);
    }

    /**
     * Envia a mensagem para o front-end.
     */
    protected void sendMessage() {
        if (message == null) return;
        WebSocketServer.sendMessage(getMessage());
    }

    protected boolean isStarted() {
        if (message == null) return false;
        return MsgStatusType.STARTED.getValue().equals(message.getStatus());
    }

    protected boolean isRunning() {
        if (message == null) return false;
        return MsgStatusType.RUNNING.getValue().equals(message.getStatus());
    }

    protected boolean isFinished() {
        if (message == null) return false;
        return MsgStatusType.FINISHED.getValue().equals(message.getStatus());
    }
}

Z7p9UDGyuj============================================================

[BranchesModel.java:src\main\java\org\caixa\crelease\renders\BranchesModel.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.renders;

import java.util.List;

public class BranchesModel extends Model {
  List<BranchModel> branches;

  public List<BranchModel> getBranches() {
    return branches;
  }

  public void setBranches(List<BranchModel> branches) {
    this.branches = branches;
  }
}

Z7p9UDGyuj============================================================

[BranchModel.java:src\main\java\org\caixa\crelease\renders\BranchModel.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.renders;

import java.util.Objects;

public class BranchModel extends Model {

    private String id;
    private String name;
    private String render;

    private String corePom;
    private String coreCore;
    private String batchPom;
    private String batchCore;
    private String webPom;
    private String webCore;
    private String shellVersion;

    private String core;
    private String batch;
    private String web;
    private String shell;

    private String baixar;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getRender() {
        return render;
    }

    public void setRender(String render) {
        this.render = render;
    }

    public String getCorePom() {
        return corePom;
    }

    public void setCorePom(String corePom) {
        this.corePom = corePom;
    }

    public String getCoreCore() {
        return coreCore;
    }

    public void setCoreCore(String coreCore) {
        this.coreCore = coreCore;
    }

    public String getBatchPom() {
        return batchPom;
    }

    public void setBatchPom(String batchPom) {
        this.batchPom = batchPom;
    }

    public String getBatchCore() {
        return batchCore;
    }

    public void setBatchCore(String batchCore) {
        this.batchCore = batchCore;
    }

    public String getWebPom() {
        return webPom;
    }

    public void setWebPom(String webPom) {
        this.webPom = webPom;
    }

    public String getWebCore() {
        return webCore;
    }

    public void setWebCore(String webCore) {
        this.webCore = webCore;
    }

    public String getShellVersion() {
        return shellVersion;
    }

    public void setShellVersion(String shellVersion) {
        this.shellVersion = shellVersion;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getCore() {
        return core;
    }

    public void setCore(String core) {
        this.core = core;
    }

    public String getBatch() {
        return batch;
    }

    public void setBatch(String batch) {
        this.batch = batch;
    }

    public String getWeb() {
        return web;
    }

    public void setWeb(String web) {
        this.web = web;
    }

    public String getShell() {
        return shell;
    }

    public void setShell(String shell) {
        this.shell = shell;
    }

    public String getBaixar() {
        return baixar;
    }

    public void setBaixar(String baixar) {
        this.baixar = baixar;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        BranchModel that = (BranchModel) o;
        return Objects.equals(getName(), that.getName()) && Objects.equals(getRender(), that.getRender());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getName(), getRender());
    }
}

Z7p9UDGyuj============================================================

[DownloadModel.java:src\main\java\org\caixa\crelease\renders\DownloadModel.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.renders;

public class DownloadModel extends Model {

    private String id;
    private String branch;
    private String module;
    private String percent;

    public DownloadModel() {}

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getBranch() {
        return branch;
    }

    public void setBranch(String branch) {
        this.branch = branch;
    }

    public String getModule() {
        return module;
    }

    public void setModule(String module) {
        this.module = module;
    }

    public String getPercent() {
        return percent;
    }

    public void setPercent(String percent) {
        this.percent = percent;
    }
}

Z7p9UDGyuj============================================================

[FetchModel.java:src\main\java\org\caixa\crelease\renders\FetchModel.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.renders;

import org.caixa.crelease.enums.MsgStatusType;

import java.util.Objects;

public class FetchModel extends Model {

    String url;
    MsgStatusType status;
    String params;
    Integer counter;

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public MsgStatusType getStatus() {
        return status;
    }

    public void setStatus(MsgStatusType status) {
        this.status = status;
    }

    public String getParams() {
        return params;
    }

    public void setParams(String params) {
        this.params = params;
    }

    public Integer getCounter() {
        return counter;
    }

    public void setCounter(Integer counter) {
        this.counter = counter;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        FetchModel that = (FetchModel) o;
        return Objects.equals(getUrl(), that.getUrl()) && getStatus() == that.getStatus();
    }

    @Override
    public int hashCode() {
        return Objects.hash(getUrl(), getStatus());
    }

    @Override
    public String toString() {
        return "FetchRender{" +
           "url='" + url + '\'' +
           ", status=" + status +
           ", counter=" + counter +
           ", params='" + params + '\'' +
           '}';
    }
}

Z7p9UDGyuj============================================================

[FetchProcessModel.java:src\main\java\org\caixa\crelease\renders\FetchProcessModel.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.renders;

public class FetchProcessModel extends Model {

    private String status;
    private Integer counter;
    private String params;

    public FetchProcessModel() {}

    public FetchProcessModel(String status, Integer counter, String params) {
        this.status = status;
        this.counter = counter;
        this.params = params;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public Integer getCounter() {
        return counter;
    }

    public void setCounter(Integer counter) {
        this.counter = counter;
    }

    public String getParams() {
        return params;
    }

    public void setParams(String params) {
        this.params = params;
    }
}

Z7p9UDGyuj============================================================

[Model.java:src\main\java\org\caixa\crelease\renders\Model.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.renders;

import java.io.Serial;
import java.io.Serializable;

public class Model implements Serializable {

    @Serial
    private static final long serialVersionUID = 1L;
}

Z7p9UDGyuj============================================================

[App.java:src\main\java\org\caixa\crelease\screen\App.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.screen;

import com.sun.javafx.scene.control.LabeledText;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.concurrent.Task;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.TitledPane;
import javafx.scene.control.skin.TitledPaneSkin;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Modality;
import javafx.stage.Stage;
import org.caixa.crelease.exceptions.GitException;
import org.caixa.crelease.git.Git;
import org.caixa.crelease.models.MavenPOM;
import org.caixa.crelease.models.Module;
import org.caixa.crelease.utils.AppUtils;
import org.caixa.crelease.utils.MavenUtils;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.Function;

public class App extends Application {

  public void start() {
    launch();
  }

  @Override
  public void start(Stage primaryStage) {

    VBox root = new VBox();
    root.setSpacing(5);
    root.setPadding(new Insets(5));  // Set space from edge of scene

    // Demanda
    TitledPane demandPane = makeNonCollapsibleTitledPane("Demanda");
    setTitledPaneBold(demandPane);

    TextField txtSearch = new TextField();
    Button btnSearch = new Button("Pesquisar");
    btnSearch.setStyle("-fx-font-weight: bold");
//    btnSearch.setOnAction(e -> showModal(txtSearch.getText()));

    VBox boxDemand = new VBox(txtSearch, btnSearch);
    demandPane.setContent(boxDemand);
    boxDemand.setSpacing(4);
    boxDemand.setPadding(new Insets(4));

    // Lista de Demandas
    TitledPane paneDemand = makeNonCollapsibleTitledPane("Lista de Demandas");
    setTitledPaneBold(paneDemand);

    TableView<String> tblDemand = new TableView<>();

    TableColumn<String, String> clDemanda = new TableColumn<>("demanda");
    clDemanda.setCellValueFactory(cell -> new SimpleStringProperty(cell.getValue()));
    clDemanda.setStyle("-fx-text-fill: black; ");

    TableColumn<String, String> clCore = new TableColumn<>("core");
    clCore.setCellValueFactory(cell -> new SimpleStringProperty(cell.getValue()));
    clCore.setStyle("-fx-text-fill: black; ");

    TableColumn<String, String> clBatch = new TableColumn<>("batch");
    clBatch.setCellValueFactory(cell -> new SimpleStringProperty(cell.getValue()));
    clBatch.setStyle("-fx-text-fill: black; ");

    TableColumn<String, String> clWeb = new TableColumn<>("web");
    clWeb.setCellValueFactory(cell -> new SimpleStringProperty(cell.getValue()));
    clWeb.setStyle("-fx-text-fill: black; ");

    TableColumn<String, String> clShell = new TableColumn<>("shell");
    clShell.setCellValueFactory(cell -> new SimpleStringProperty(cell.getValue()));
    clShell.setStyle("-fx-text-fill: black; ");

    tblDemand.getColumns().add(clDemanda);
    tblDemand.getColumns().add(clCore);
    tblDemand.getColumns().add(clBatch);
    tblDemand.getColumns().add(clWeb);
    tblDemand.getColumns().add(clShell);
    tblDemand.setStyle("-fx-text-fill: black; ");
//    tblDemand.setStyle("-fx-font-family: 'Book Antiqua'; -fx-font-size: 12px; -fx-color-label-visible: true; -fx-text-fill: black; ");

    paneDemand.setContent(tblDemand);

    // btn action
    btnSearch.setOnAction(e -> actSearch(tblDemand, txtSearch.getText()));
//    btnSearch.setOnAction(e -> runAction(btnSearch, tblDemand, txtSearch.getText()));

    // Informa├º├Áes
    TitledPane infoPane = makeNonCollapsibleTitledPane("Informa├º├Áes");
    setTitledPaneBold(infoPane);

    Label nameLabel = new Label("Nome:");
    Label nameValue = new Label("-- nome branch --");
    Label versionLabel = new Label("Vers├úo atual:");

    nameLabel.setStyle("-fx-font-weight: bold");
    versionLabel.setStyle("-fx-font-weight: bold");

    Button downloadButton = new Button("Baixar");
    downloadButton.setStyle("-fx-font-weight: bold");

    VBox infoBox = new VBox(
       new HBox(nameLabel, nameValue),versionLabel, downloadButton
    );
    infoBox.setSpacing(4);
    infoBox.setPadding(new Insets(4));
    infoPane.setContent(infoBox);

    // System color refs: https://docs.oracle.com/javafx/2/api/javafx/scene/doc-files/cssref.html
    root.setStyle("-fx-background-color: lightgray;");
    demandPane.setStyle("-fx-border-color: blue; -fx-border-width: 1px;");
    paneDemand.setStyle("-fx-border-color: blue; -fx-border-width: 1px;");
    infoPane.setStyle("-fx-border-color: blue; -fx-border-width: 1px;");

    // Putting everything together
    root.getChildren().addAll(demandPane, paneDemand, infoPane);

    primaryStage.setTitle("Carregar v1.0");
    primaryStage.setScene(new Scene(root, 500, 500));
    primaryStage.show();
  }

  // Make a TitledPane that is not collapsible.
  private TitledPane makeNonCollapsibleTitledPane(String title) {
    TitledPane pane = new TitledPane();
    pane.setText(title);
    pane.setStyle("-fx-font-weight: bold; -fx-background-color: lightgray;");
    pane.setCollapsible(false);    // Set pane to non-collapsible
    return pane;
  }

  private void setTitledPaneBold(TitledPane pane) {
    pane.skinProperty().addListener(observable -> {
      TitledPaneSkin skin = (TitledPaneSkin) pane.getSkin();
      Node title = skin.getChildren().get(0);
      if (title instanceof Parent) {
        Parent parent = (Parent) title;
        parent.getChildrenUnmodifiable().stream()
           .filter(node -> node instanceof LabeledText)
           .map(node -> ((LabeledText) node))
           .forEach(labeledText -> labeledText.setStyle("-fx-font-weight: bold;"));
      }
    });
  }

  private void actSearch(TableView<String> table, String branch) {
    System.out.println("actSearch");

    ObservableList<String> row = FXCollections.observableArrayList();
    row.add("row1 name");
    row.add("row1 col1");
    row.add("row1 col2");
    row.add("row1 col3");
    row.add("row1 col4");

    ObservableList<String> items = table.getItems();
    int counter = 0;
    for (String item : items) {
      item = "" + ++counter;
    }

    if (true == true) return;

    // -----------------------------
    List<Module> modules = AppUtils.getSetup().getRegularModules();
    Map<String, List<Module>> branches = new HashMap<>();

    try {
      // obt├¬m as branches e o seu conte├║do
      for (Module mod : modules) {
        Git.fetch(mod.getPath());
        System.out.println("Caminho: " + mod.getPath() + " - " + branch);
        List<String> branchesMod = Git.findRemoteBranches(mod.getPath(), branch);
        fillBranchesModules(branches, branchesMod, mod);
      }

      // formata o conte├║do para usar na tabela
      System.out.println("## apresentacao ##");
      for (String branchName : branches.keySet()) {
        ObservableList<String> rowBranch = FXCollections.observableArrayList();
        System.out.print("Branch: " + branchName);
        rowBranch.add(branchName);

        for (Module mod : branches.get(branchName)) {
          System.out.print(" " + (mod.getVersion() != null ? mod.getVersion() : "-"));
          rowBranch.add(mod.getVersion() != null ? mod.getVersion() : "-");
        }

        table.getItems().add("1");
//        table.getItems().add(rowBranch);
      }

    } catch(GitException | CloneNotSupportedException ex) {
      System.err.println("Erro ao pesquisar branches: " + ex.getMessage());
      ex.printStackTrace();
    }

  }

  private void fillBranchesModules(Map<String, List<Module>> branches, List<String> branchesMod, Module module)
     throws CloneNotSupportedException, GitException {

    for (String branch : branchesMod) {
      List<Module> modules;

      if (!branches.containsKey(branch)) {
        branches.put(branch, new ArrayList<>());
      }
      modules = branches.get(branch);

      Module mod = (Module) module.clone();
      String pomFile = Git.findFileContent(mod.getPath(), "pom.xml", branch);
      MavenPOM versions = MavenUtils.getVersions(pomFile);
      mod.setBranch(branch);
      if (versions != null)
        mod.setVersion(versions.getPomVersion() == null ? "-" : versions.getPomVersion());
      else
        mod.setVersion("-");

      modules.add(mod);
    }

  }

  private void runAction(Button button, TableView<String> table, String branch) {
    button.setOnAction(e -> {
      System.out.println("Pesquisando...");
      button.setText("Pesquisando...");
      button.setDisable(true);

      Task<Void> longRunningTask = new Task<>() {
        @Override
        protected Void call() {
          // chama o c├│digo aqui
          actSearch(table, branch);
          Platform.runLater(() -> {
            button.setText("Pesquisar");
            button.setDisable(false);
          });
          return null;
        }
      };

//      longRunningTask.setOnSucceeded(workerStateEvent -> {
//        button.setText("Pesquisar");
//        button.setDisable(false);
//      });

      // inicializa a thread
      Thread thread = new Thread(longRunningTask, "My-Thread");
      thread.setDaemon(true);
      thread.start();
    });
  }

  private void showModal(String inputText) {
    final Stage dialog = new Stage();
    dialog.initModality(Modality.APPLICATION_MODAL);

    Label label = new Label("Input: " + inputText);
    VBox layout = new VBox(label);
    layout.setAlignment(Pos.CENTER);

    Scene dialogScene = new Scene(layout, 200, 100);
    dialog.setScene(dialogScene);
    dialog.show();
  }
}

Z7p9UDGyuj============================================================

[MessageManager.java:src\main\java\org\caixa\crelease\screen\MessageManager.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.screen;

import org.caixa.crelease.enums.MsgType;
import org.caixa.crelease.exceptions.GitException;
import org.caixa.crelease.git.Git;
import org.caixa.crelease.models.Message;
import org.caixa.crelease.remote.DownloadAction;
import org.caixa.crelease.utils.Web;
import org.java_websocket.WebSocket;

import java.text.SimpleDateFormat;
import java.util.Date;

public class MessageManager {

    private final SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");

    public void receiveMessage(WebSocket conn, String message) {
        System.out.println("Mensagem [" + conn.getRemoteSocketAddress() + " - " + sdf.format(new Date()) + "]: " + message);
        Message msg = convert(message);

        if (MsgType.DOWNLOAD.getValue().equals(msg.getType())) {
            // download de uma branch
            DownloadAction download = new DownloadAction(msg);
            download.execute();
        }
    }

    public void scheduleMessage() {
        try {
            // efetuar um fetch a cada pasta do projeto a cada 15s.
            Git.fetchAll();
        } catch (GitException e) {
            throw new RuntimeException(e);
        }
    }

    private void sendMessage(String message) {
        WebSocketServer.sendMessage(message);
    }

    private void sendMessage(Message message) {
        WebSocketServer.sendMessage(message);
    }

    private Message convert(String message) {
        return Web.fromJson(message, Message.class);
    }
}

Z7p9UDGyuj============================================================

[WebApp.java:src\main\java\org\caixa\crelease\screen\WebApp.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.screen;

import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;
import org.caixa.crelease.exceptions.GitException;
import org.caixa.crelease.exceptions.WebException;
import org.caixa.crelease.models.Branch;
import org.caixa.crelease.models.MavenPOM;
import org.caixa.crelease.models.Module;
import org.caixa.crelease.models.Setup;
import org.caixa.crelease.processors.RemotePrc;
import org.caixa.crelease.renders.BranchModel;
import org.caixa.crelease.renders.BranchesModel;
import org.caixa.crelease.utils.AppUtils;

import java.awt.*;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import static org.caixa.crelease.utils.Web.CODE_ERROR;
import static org.caixa.crelease.utils.Web.CODE_OK;
import static org.caixa.crelease.utils.Web.getBody;
import static org.caixa.crelease.utils.Web.getValue;
import static org.caixa.crelease.utils.Web.loadPage;
import static org.caixa.crelease.utils.Web.loadResourceContent;
import static org.caixa.crelease.utils.Web.loadResourceWebFiles;
import static org.caixa.crelease.utils.Web.publishHTML;
import static org.caixa.crelease.utils.Web.publishJSON;
import static org.caixa.crelease.utils.Web.verboseOFF;

public class WebApp {

  public WebApp() {
    try {
      Setup setup = AppUtils.getSetup();
      verboseOFF();

      /////////////////////////////////
      // Socket
      /////////////////////////////////

      Thread wsThread = new Thread(new Runnable() {
        @Override
        public void run() {
          int socketPort = 9092;
          WebSocketServer server = new WebSocketServer(new InetSocketAddress(socketPort));
          server.start();
          System.out.println("Servidor socket iniciado em " + socketPort);
        }
      });
      //wsThread.start();
      //TODO-ITO depois ativar o start, por enquanto testando os paths dos arquivos

      /////////////////////////////////
      // web
      /////////////////////////////////

      // carregando as p├íginas
      loadResourceWebFiles();

      // criando o servidor
      int port = setup.getPort();
      HttpServer server = HttpServer.create(new InetSocketAddress(port), 0);

      // registrando as rotas
      server.createContext("/", rootHandler());
      server.createContext("/pesquisar", pesquisarHandler());
      server.createContext("/branch", branchHandler());
      server.createContext("/compilar", compilarHandler());
      server.createContext("/teste", testeHandler());
      server.createContext("/flow", flowHandler());

      server.setExecutor(null);
      server.start();

      System.out.println("Servidor web iniciado em " + port);

      // se suporta a abretura do browser pela aplica├º├úo, assim o far├í
      if (Desktop.isDesktopSupported()) {
        Desktop desktop = Desktop.getDesktop();
        if (desktop.isSupported(Desktop.Action.BROWSE)) {
          desktop.browse(new URI("http://localhost:" + port + "/"));
        }
      }
    } catch (IOException e) {
      System.err.println("@erro server(IOException): " + e.getMessage());
      e.printStackTrace();
      throw new RuntimeException(e);
    } catch (URISyntaxException e) {
      System.err.println("@erro server(URISyntaxException): " + e.getMessage());
      e.printStackTrace();
      throw new RuntimeException(e);
    } catch (Exception e) {
      System.err.println("@erro server(Exception): " + e.getMessage());
      e.printStackTrace();
      throw new RuntimeException(e);
    }
  }

  private HttpHandler flowHandler() {
    return exchange -> {
      String page;

      try {
        page = loadPage("flowchart");
        publishHTML(CODE_OK, exchange, page);
      } catch (WebException e) {
        publishHTML(CODE_ERROR, exchange, "<h3>N├úo foi poss├¡vel carregar a p├ígina index.</h3><p>" + e.getMessage() + "</p>");
      }
    };
  }

  /**
   * P├ígina index principal do sistema.
   *
   * @return inst├óncia de HttpHandler.
   */
  HttpHandler rootHandler() {
    return exchange -> {
      String page;

      try {
        page = loadPage("index");
        publishHTML(CODE_OK, exchange, page);
      } catch (WebException e) {
        publishHTML(CODE_ERROR, exchange, "<h3>N├úo foi poss├¡vel carregar a p├ígina index.</h3><p>" + e.getMessage() + "</p>");
      }
    };
  }

  HttpHandler testeHandler() {
    return exchange -> {
      String page;

      try {
        page = loadPage("teste");
        publishHTML(CODE_OK, exchange, page);
      } catch (WebException e) {
        publishHTML(CODE_ERROR, exchange, "<h3>N├úo foi poss├¡vel carregar a p├ígina index.</h3><p>" + e.getMessage() + "</p>");
      }
    };
  }

  HttpHandler pesquisarHandler() {
    return exchange -> {
      if ("POST".equals(exchange.getRequestMethod())) {
        String search = getValue(getBody(exchange), "branch");
        System.out.println("PESQUISAR: " + search);

        RemotePrc prc = new RemotePrc();
        HashMap<String, List<Module>> branches = null;
        try {
          branches = prc.branchList(search);
        } catch (GitException e) {
          throw new RuntimeException(e);
        }

        BranchesModel result = new BranchesModel();
        List<BranchModel> branchList = new ArrayList<>();

        for (String branch : branches.keySet()) {
          BranchModel bm = new BranchModel();

          bm.setName(branch);
          bm.setId("branch-" + AppUtils.generateId(5));
          bm.setBaixar("Baixar " + branch);

          List<Module> mods = branches.get(branch);
          for (Module mod : mods) {
            if (mod.getName().equalsIgnoreCase("core")) {
              bm.setCore(mod.getVersion());
            } else if (mod.getName().equalsIgnoreCase("batch")) {
              bm.setBatch(mod.getVersion());
            } else if (mod.getName().equalsIgnoreCase("web")) {
              bm.setWeb(mod.getVersion());
            } else if (mod.getName().equalsIgnoreCase("shell")) {
              bm.setShell(mod.getVersion());
            }
          }

          System.out.printf("Branch %s - core: %s, batch: %s, web: %s, shell: %s\n",
             branch, bm.getCore(), bm.getBatch(), bm.getWeb(), bm.getShell());

          branchList.add(bm);
        }

        result.setBranches(branchList);
        publishJSON(CODE_OK, exchange, result);
      }
    };
  }

  HttpHandler branchHandler() {
    return exchange -> {
      RemotePrc prc = new RemotePrc();
      try {
        Branch b = prc.branchAtual();
        BranchModel r = new BranchModel();

        r.setName(b.getName());

        for (Module mod : b.getModules()) {
          MavenPOM pom = mod.getPom();

          if (mod.getName().equalsIgnoreCase("core")) {
            r.setCoreCore(pom.getCoreVersion());
            r.setCorePom(pom.getPomVersion());
          }

          if (mod.getName().equalsIgnoreCase("batch")) {
            r.setBatchCore(pom.getCoreVersion());
            r.setBatchPom(pom.getPomVersion());
          }

          if (mod.getName().equalsIgnoreCase("web")) {
            r.setWebCore(pom.getCoreVersion());
            r.setWebPom(pom.getPomVersion());
          }

          if (mod.getName().equalsIgnoreCase("shell")) {
            r.setShellVersion(r.getName());
          }
        }

        // saida
        publishJSON(CODE_OK, exchange, r);
      } catch (GitException e) {
        publishHTML(CODE_ERROR, exchange, "ERROR: " + e.getMessage());
      }
    };
  }

  HttpHandler compilarHandler() {
    return exchange -> {
      String page = loadResourceContent("pages/compilar.html");
      publishHTML(CODE_OK, exchange, page);
    };
  }
}

Z7p9UDGyuj============================================================

[WebSocketServer.java:src\main\java\org\caixa\crelease\screen\WebSocketServer.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.screen;

import org.caixa.crelease.models.Message;
import org.caixa.crelease.utils.Web;
import org.java_websocket.WebSocket;
import org.java_websocket.handshake.ClientHandshake;

import java.net.InetSocketAddress;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class WebSocketServer extends org.java_websocket.server.WebSocketServer {

    private static final Set<WebSocket> clients = Collections.synchronizedSet(new HashSet<>());
    private final ScheduledExecutorService service = Executors.newScheduledThreadPool(1);
    private final MessageManager manager = new MessageManager();

    public WebSocketServer(InetSocketAddress address) {
        super(address);
    }

    @Override
    public void onOpen(WebSocket conn, ClientHandshake handshake) {
        clients.add(conn);
        System.out.println("Nova conex├úo: " + conn.getRemoteSocketAddress());
    }

    @Override
    public void onClose(WebSocket conn, int code, String reason, boolean remote) {
        clients.remove(conn);
        System.out.println("Conex├úo fechada: " + conn.getRemoteSocketAddress());
    }

    @Override
    public void onMessage(WebSocket conn, String message) {
        manager.receiveMessage(conn, message);
    }

    @Override
    public void onError(WebSocket conn, Exception ex) {
        System.err.println("[Erro] Socket: " + ex.getMessage());
        ex.printStackTrace();
    }

    @Override
    public void onStart() {
        System.out.println("Servidor socket iniciado com sucesso!");

        // agenda mensagens peri├│dicas
        service.scheduleAtFixedRate(manager::scheduleMessage, 1, 5, TimeUnit.MINUTES);
    }

    public static void sendMessage(WebSocket sender, String message) {
        synchronized (clients) {
            for (WebSocket client : clients) {
                if (client != sender) {
                    client.send(message);
                }
            }
        }
    }

    public static void sendMessage(String message) {
        sendMessage(null, message);
    }

    public static void sendMessage(Message message) {
        sendMessage(Web.toJson(message));
    }
}
Z7p9UDGyuj============================================================

[AppUtils.java:src\main\java\org\caixa\crelease\utils\AppUtils.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.utils;

import org.caixa.crelease.models.HashStates;
import org.caixa.crelease.models.Module;
import org.caixa.crelease.models.Setup;
import org.caixa.crelease.html.Structure;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Base64;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Function;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class AppUtils {

  private static Setup setup;
  private static Map<String, String> filesContent = new HashMap<>();
  private static DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
  private static LocalTime startTime;
  private static LocalTime endTime;

  /**
   * Obt├¬m o caminho de um arquivo ou pasta com
   *
   * @param args - caminhos
   * @return o caminho absoluto a partir do user.home + os outros caminhos passados pelos argumentos.
   */
  public static String getInternalPath(String... args) {
    String sep = FileSystems.getDefault().getSeparator();
    String baseDir = System.getProperty("user.home");
    baseDir = String.join(sep, baseDir, ".crelease");

    Path path = Paths.get(baseDir, args);

    return path.toString();
  }

  public static String removeLastDir(String path) {
    Path p = Paths.get(path);
    return p.getParent().toString();
  }

  /**
   * Retorna o ├║ltimo elemento de um caminho que pode ser um arquivo ou um diret├│rio.
   *
   * @param path - caminho a ser utilizado.
   * @return o ├║ltimo elemento de um caminho.
   */
  public static String getLastPathElement(String path) {
    Path p = Paths.get(path);
    return p.getFileName().toString();
  }

  public static String getUserDir() {
    return System.getProperty("user.dir");
  }

  /**
   * Obt├¬m uma inst├óncia de configura├º├úo de Setup.
   *
   * @return uma inst├óncia de setup.
   */
  public static Setup getSetup() {
    if (setup == null) {
      String xmlPath = getInternalPath("config", "setup.xml");
      setup = readXML(xmlPath, Setup.class);
    }

    return setup;
  }

  /**
   * Obt├¬m uma inst├óncia de Hash States.
   *
   * @return uma inst├óncia de hash setates.
   */
  public static HashStates getHashStates() {
    String xmlPath = AppUtils.getInternalPath("states", "states.xml");
    return AppUtils.readXML(xmlPath, HashStates.class);
  }

  public static boolean isEqualsValues(String value1, String value2) {
    if ((value1 == null && value2 != null) || (value1 != null && value2 == null)) {
      return false;
    }

    assert value1 != null;
    String v1 = value1.replace(System.lineSeparator(), "").trim();
    String v2 = value2.replace(System.lineSeparator(), "").trim();

    return v1.equals(v2);
  }

  /**
   * Verifica se o caminho informado representa um arquivo. Retorna falso se n├úo existir ou se for um diret├│rio.
   *
   * @param path - caminho do arquivo informado.
   * @return verdadeiro se o caminho informado ├® um arquivo.
   */
  public static boolean isPathFile(String path) {
    return Files.isRegularFile(Paths.get(path));
  }

  /**
   * Verifica se o caminho informado representa um diret├│rio/pasta. Retorna falso se n├úo existir ou se for um arquivo.
   *
   * @param path - caminho do diret├│rio informado.
   * @return verdadeiro se o caminho informado ├® um diret├│rio.
   */
  public static boolean isPathDir(String path) {
    return Files.isDirectory(Paths.get(path));
  }

  /**
   * Verifica se o caminho informado existe. Caso exista, ele pode ser um arquivo, um diret├│rio ou um link simb├│lico.
   *
   * @param path
   * @return
   */
  public static boolean isPathExists(String path) {
    return Files.exists(Paths.get(path));
  }

  /**
   * Retorna verdadeiro se o local informado ├® um diret├│rio do tipo git. Caso exista o caminho informado, mas n├úo ├® do
   * tipo git, ent├úo retorna falso.
   *
   * @param path - caminho informado que se espera ter o diret├│rio .git
   * @return verdadeiro se o caminho ├® um diret├│rio git.
   */
  public static boolean isGitPath(String path) {
    File dir = new File(path, ".git");
    return dir.exists() && dir.isDirectory();
  }

  public static String getJoinedPath(Object... paths) {
    StringBuilder sb = new StringBuilder();
    String sep = FileSystems.getDefault().getSeparator();

    for (int i = 0; i < paths.length; i++) {
      Object path = paths[i];
      if (path instanceof String) {
        sb.append(path);
      } else if (path instanceof File) {
        sb.append(((File) path).getPath());
      }

      // apenda o separador apenas quando o caminho atual n├úo ├® o ├║ltimo
      if (i < paths.length - 1) {
        sb.append(sep);
      }
    }

    return Paths.get(sb.toString()).normalize().toString();
  }

  /**
   * Obt├¬m o caminho do reposit├│rio a partir do caminho da release (os m├│dulos de dentro do reposit├│rio s├úo separados por
   * release) mais o caminho do m├│dulo definido pelo setup.
   * Ex: /git-output/release/3.17.0/SICDT_JavaWeb_Core
   *
   * @param module  - m├│dulo do caminho final.
   * @param release - release aonde o m├│dulo desejado se encontra.
   * @return o caminho absoluto a partir do reposit├│rio.
   */
  public static String getFullRepositoryPath(String release, Module module) {
    return AppUtils.getJoinedPath(getSetup().getRepository(), release, getSetup().getModuleByName(module.getName()).getFolder());
  }

  /**
   * Obt├¬m o caminho do projeto do usu├írio a partir do m├│dulo desejado.
   *
   * @param module - m├│dulo do caminho final.
   * @return o caminho absoluto a partir do caminho do projeto do usu├írio.
   */
  public static String getFullUserPath(Module module) {
    return AppUtils.getJoinedPath(getSetup().getPath(), getSetup().getModuleByName(module.getName()).getFolder());
  }

  /**
   * Obt├¬m apenas os d├¡gitos de uma string. "-", "." e "," ser├úo tamb├®m removidos.
   *
   * @param value uma string alfanum├®rica
   * @return valor formatado apenas como d├¡gitos.
   */
  public static String getDigits(String value) {
    return value.replaceAll("\\D+", "");
  }

  public static void saveXML(String xmlPath, Class xmlClass, Object xmlObject) {
    File file = new File(xmlPath);

    try {
      JAXBContext ctx = JAXBContext.newInstance(xmlClass);
      Marshaller save = ctx.createMarshaller();
      save.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
      save.marshal(xmlObject, file);

    } catch (JAXBException e) {
      throw new RuntimeException(e);
    }
  }

  public static void saveFile(String content, String filePath) throws IOException {
    try {
      Files.writeString(Path.of(filePath), content);
    } catch (IOException e) {
      throw new IOException(String.format("N├úo foi poss├¡vel salvar o arquivo %s, Erro: %s", filePath, e.getMessage()));
    }
  }

  public static <T> T readXML(String xmlPath, Class<T> xmlClass) {
    try {
      File file = new File(xmlPath);
      JAXBContext ctx = JAXBContext.newInstance(xmlClass);

      Unmarshaller reader = ctx.createUnmarshaller();
      return xmlClass.cast(reader.unmarshal(file));
    } catch (JAXBException e) {
      throw new RuntimeException(e);
    }
  }

  public static String readFile(String filePath) {
    List<String> charsets = Arrays.asList("UTF-8", "windows-1252", "ISO-8859-1");
    AtomicReference<String> content = new AtomicReference<>("");

    charsets.stream()
       .map(Charset::forName)
       .filter(cs -> {
         try {
           content.set(Files.readString(Path.of(filePath), cs));
           return true;
         } catch (IOException e) {
           return false;
         }
       })
       .findFirst()
       .orElseThrow(() -> new RuntimeException("Erro ao ler o arquivo: " + filePath));
    return content.toString();
  }

  public static String readBranchSQLFiles(String path, String branch, boolean refresh) {
    String branchToken = getDigits(branch);
    StringBuilder sb = new StringBuilder();
    List<Path> files = new ArrayList<>();
    Path dir = Paths.get(path);

    try {
      if (refresh || filesContent.isEmpty()) {
        filesContent.clear();
        Files.list(dir)
           .filter(file -> file.toString().toLowerCase().endsWith(".sql"))
           .forEach(file -> files.add(file.getFileName()));

        if (!files.isEmpty()) {
          for (Path file : files) {
            String content = readFile(getJoinedPath(path, file.getFileName().toString()));
            filesContent.put(file.getFileName().toString(), content);
          }
        }
      }

      if (!filesContent.isEmpty()) {
        for (String fileName : filesContent.keySet()) {
          String content = filesContent.get(fileName);
          if (content.contains(branchToken)) {
            sb.append(fileName).append("\n");
          }
        }
      }

      String output = sb.toString();
      if (output.endsWith("\n")) {
        output = output.substring(0, output.length() - 1);
      }

      return output;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  public static String getShortHash(String hash) {
    if (hash == null || hash.trim().isEmpty()) {
      return "";
    }
    if (hash.length() >= 8) {
      return hash.substring(0, 8);
    }
    return hash;
  }

  public static String markTime() {
    // marca o primeiro tempo
    if (startTime == null && endTime == null) {
      startTime = LocalTime.now();
      return null;
    }

    // marca o segundo tempo e apresenta o resultado
    if (startTime != null && endTime == null) {
      endTime = LocalTime.now();
    }

    // calcula a dura├º├úo
    Duration d = Duration.between(startTime, endTime);
    long hours = d.toHours();
    long minutes = d.toMinutesPart();
    long seconds = d.toSecondsPart();

    String duration = String.format("%02d:%02d:%02d", hours, minutes, seconds);

    startTime = null;
    endTime = null;

    return duration;
  }

  /**
   * Formata uma DateTime ou LocalTime para o padr├úo dd/MM/yyyy HH:mm:ss.
   *
   * @param time a ser convertido em string formatada.
   * @return uma string de data + hora formatada.
   */
  public static String formatDatetime(LocalDateTime time) {
    return time.format(dtf);
  }

  public static String shortHash(String hash) {
    if (hash != null && hash.length() >= 10) {
      return hash.substring(0, 10);
    }

    return hash;
  }

  /**
   * A partir de uma lista, retorna o tamanho m├íximo de posi├º├Áes para um valor informado.
   *
   * @param values ├® uma lista de strings.
   * @return o tamanho m├íximo.
   */
  public static <T> int findMax(List<T> values) {
    int max = 0;

    for (T value : values) {
      String stringValue = String.valueOf(value);
      if (stringValue.length() > max) {
        max = stringValue.length();
      }
    }

    return max;
  }

  /**
   * A partir de uma lista, retorna o tamanho m├íximo de posi├º├Áes para um valor informado.
   *
   * @param values ├® uma lista gen├®rica
   * @param mapper ├® o campo em formato lambda a ser obtido que espera estar dentro da lista.
   * @return o tamanho m├íximo.
   * @param <T> uma lista de um T tipo fixo.
   * @param <R> um campo R que espera existir dentro da lista.
   */
  public static <T, R> int findMax(List<T> values, Function<? super T, ? extends R> mapper) {
    int max = 0;
    List<? extends R> mappedList = values.stream().map(mapper).toList();

    for (R r : mappedList) {
      String stringValue = String.valueOf(r);
      if (stringValue.length() > max) {
        max = stringValue.length();
      }
    }

    return max;
  }

  /**
   * Retorna o tamanho m├íximo em posi├º├Áes de um valor n├║merico.
   * Ex:
   * 1, retorna 1;
   * 33. retorna 2;
   * 3122, retorna 4;
   * e por a├¡ vai.
   *
   * @param number que ser├í pego o seu tamanho em posi├º├Áes.
   * @return quantidade de posi├º├Áes do n├║mero.
   */
  public static int findMax(int number) {
    return String.valueOf(number).length();
  }

  /**
   * Verifica se o arquivo termina com alguma das extens├Áes permitidas.
   *
   * @param filePath nome de arquivo
   * @param allowedExts extens├Áes permitidas
   * @return verdadeiro se o arquivo terminar com alguma das extens├Áes permitidas.
   */
  public static boolean checkExt(Path filePath, String... allowedExts) {
    if (filePath == null) return false;

    return Arrays
       .stream(allowedExts)
       .anyMatch(ext -> filePath.getFileName().toString().toLowerCase().endsWith(ext));
  }

  /**
   * Obt├¬m o nome do arquivo sem a sua extens├úo.
   *
   * @param filename nome do arquivo com a extens├úo
   * @return nome do arquivo sem a extens├úo.
   */
  public static String getFilenameWithoutExt(String filename) {
    if (filename == null || !filename.contains(".")) return null;
    return filename.substring(0, filename.lastIndexOf("."));
  }

  /**
   * Verifica qual ├® a pasta de estrutura que o arquivo encontra-se.
   *
   * @param filePath ├® o arquivo utilizado.
   * @return a estrutura utilizada pelo aquivo que representa a pasta que ele se encontra.
   */
  public static Structure findStructure(Path filePath) {
    if (filePath == null) return null;

    for (Structure structure : Structure.values()) {
      String path = filePath.toFile().getAbsolutePath();

      if (path.toLowerCase().contains(structure.getFolder()))
        return structure;
    }

    return null;
  }

  /**
   * Procura todos os tokens que podem estar numa p├ígina que seguem um padr├úo determinado.
   *
   * @param pattern ├® o padr├úo usado para detectar toekns
   * @param input ├® o texto de entrada que cont├¬m os tokens
   * @return uma lista de tokens
   */
  public static List<String> findTokens(String pattern, String input) {
    String regex = pattern + "[\\w\\-]+";

    Matcher matcher = Pattern.compile(regex).matcher(input);
    List<String> tokenList = new ArrayList<>();

    while (matcher.find()) {
      tokenList.add(matcher.group());
    }

    return tokenList;
  }

  /**
   * Gera um hash alfanum├®rico com o tamanho desejado.
   *
   * @param length - tamanho de caract├®res do hash
   * @return o hash
   */
  public static String generateId(int length) {
    String CHARACTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
       + "abcdefghijklmnopqrstuvwxyz"
       + "0123456789";

    Random random = new Random(System.nanoTime());
    StringBuilder id = new StringBuilder(length);

    for (int i = 0; i < length; i++) {
      int index = random.nextInt(CHARACTERS.length());
      id.append(CHARACTERS.charAt(index));
    }

    return id.toString();
  }

  /**
   * Converte um arquivo bin├írio em formato texto base64.
   *
   * @param filePath caminho do arquivo bin├írio.
   * @return conte├║do do arquivo bin├írio convertido em base64.
   * @throws IOException se n├úo for poss├¡vel converter o arquivo.
   */
  public static String convertBinaryToBase64(String filePath) throws IOException {
    File file = new File(filePath);
    byte[] fileContent = new byte[(int) file.length()];

    try {
      FileInputStream fis = new FileInputStream(file);
      fis.read(fileContent);
      return Base64.getEncoder().encodeToString(fileContent);
    } catch(IOException e) {
      throw new IOException("N├úo foi poss├¡vel ler o arquivo " + filePath + ", Erro: " + e.getMessage());
    }
  }

  /**
   * Converte texto em formato base64 para um arquivo bin├írio.
   *
   * @param base64 ├® uma string em formato base64.
   * @param filePath o caminho do arquivo de saida.
   * @throws IOException se n├úo for poss├¡vel converter para o arquivo destino.
   */
  public static void convertBase64ToBinary(String base64, String filePath) throws IOException {
    byte[] decodedBytes = Base64.getDecoder().decode(base64);

    try {
      FileOutputStream fos = new FileOutputStream(filePath);
      fos.write(decodedBytes);
      fos.close();

    } catch(IOException e) {
      throw new IOException("N├úo foi poss├¡vel converter o arquivo " + filePath + ", Erro: " + e.getMessage());
    }
  }

}

Z7p9UDGyuj============================================================

[Argument.java:src\main\java\org\caixa\crelease\utils\Argument.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.utils;

public interface Argument {
    String getCommand();
    int getMinArg();
    int getMaxArg();
}

Z7p9UDGyuj============================================================

[CommandRunner.java:src\main\java\org\caixa\crelease\utils\CommandRunner.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.utils;

import org.caixa.crelease.models.Command;
import org.caixa.crelease.models.Error;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

public class CommandRunner {

    private static final String LN = System.lineSeparator();

    /**
     * Executa um comando.
     *
     * @param path    - caminho de onde o comando ser├í executado.
     * @param command - comando a ser executado
     * @param args    - argumentos que ser├úo passados pelo comando
     * @return inst├óncia de Command com as informa├º├Áes da execu├º├úo.
     */
    public Command cmd(String path, String command, String... args) {
        int exitCode = 0;
        File filePath = new File(path);
        List<String> cmdList = new ArrayList<>();
        List<String> cmdArgs = getCommandArguments(args);

        cmdList.add(command);
        cmdList.addAll(cmdArgs);

        Command cmd = new Command(path, command, cmdArgs);

        if (contains("cmd:createFolder", args)) {
            cmd = cmdCreateFolder(cmd);
            filePath = new File(cmd.getPath());
        }

        try {
            ProcessBuilder pb = new ProcessBuilder(cmdList);
            pb.directory(filePath);

            Process process = pb.start();
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

            StringBuilder result = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                cmd.addLines(line);
                result.append(line).append(LN);
            }
            exitCode = process.waitFor();
            cmd.setResult(result.toString());
            cmd.setExitCode(exitCode);

            return cmd;
        } catch (IOException | InterruptedException e) {
            cmd.setExitCode(-1);

            Error error = new Error(exitCode, "N├úo foi poss├¡vel executar o CommandRunner.Command(...): " + e.getMessage());
            error.setTarget(this.getClass().descriptorString());
            cmd.setError(error);
            return cmd;
        }
    }

    private Command cmdCreateFolder(Command cmd) {
        Path rootPath = Path.of(AppUtils.removeLastDir(cmd.getPath()));

        if (!Files.exists(rootPath)) {
            try {
                Files.createDirectories(rootPath);
            } catch (IOException ex) {
                cmd.setError(new Error(-1, "N├úo foi poss├¡vel criar o caminho " + rootPath));
            }
        }

        // se o comando for clone, remove o ├║ltimo diret├│rio
        if (contains("clone", cmd.getArgs().toArray(new String[0]))) {
            cmd.setPath(rootPath.toString());
        }

        return cmd;
    }

    private List<String> getCommandArguments(String... args) {
        List<String> argList = new ArrayList<>();

        for (String arg : args) {
            if (!arg.contains("cmd:"))
                argList.add(arg);
        }

        return argList;
    }

    private boolean contains(String cmdCode, String... args) {
        for (String arg : args) {
            if (arg.contains(cmdCode))
                return true;
        }

        return false;
    }
}

Z7p9UDGyuj============================================================

[CRelease.java:src\main\java\org\caixa\crelease\utils\CRelease.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.utils;

import com.google.gson.Gson;

import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Scanner;
import java.util.stream.Collectors;

public class CRelease {
    // geral
    public static final String RESET = "\u001B[0m";
    public static final String BOLD = "\u001B[1m";
    public static final String BLINK = "\033[5m";

    // foreground
    public static final String BLACK = "\u001B[30m";
    public static final String RED = "\u001B[31m";
    public static final String GREEN = "\u001B[32m";
    public static final String YELLOW = "\u001B[33m";
    public static final String BLUE = "\u001B[34m";
    public static final String MAGENTA = "\u001B[35m";
    public static final String CYAN = "\u001B[36m";
    public static final String WHITE = "\u001B[37m";
    public static final String BRIGHT_BLACK = "\u001B[90m";
    public static final String BRIGHT_RED = "\u001B[91m";
    public static final String BRIGHT_GREEN = "\u001B[92m";
    public static final String BRIGHT_YELLOW = "\u001B[93m";
    public static final String BRIGHT_BLUE = "\u001B[94m";
    public static final String BRIGHT_MAGENTA = "\u001B[95m";
    public static final String BRIGHT_CYAN = "\u001B[96m";
    public static final String BRIGHT_WHITE = "\u001B[97m";

    // background
    public static final String BG_BLACK = "\u001B[40m";
    public static final String BG_RED = "\u001B[41m";
    public static final String BG_GREEN = "\u001B[42m";
    public static final String BG_YELLOW = "\u001B[43m";
    public static final String BG_BLUE = "\u001B[44m";
    public static final String BG_MAGENTA = "\u001B[45m";
    public static final String BG_CYAN = "\u001B[46m";
    public static final String BG_WHITE = "\u001B[47m";
    public static final String BG_BRIGHT_BLACK = "\u001B[100m";
    public static final String BG_BRIGHT_RED = "\u001B[101m";
    public static final String BG_BRIGHT_GREEN = "\u001B[102m";
    public static final String BG_BRIGHT_YELLOW = "\u001B[103m";
    public static final String BG_BRIGHT_BLUE = "\u001B[104m";
    public static final String BG_BRIGHT_MAGENTA = "\u001B[105m";
    public static final String BG_BRIGHT_CYAN = "\u001B[106m";
    public static final String BG_BRIGHT_WHITE = "\u001B[107m";

    public static final String BG = BRIGHT_GREEN;
    public static final String BR = BRIGHT_RED;
    public static final String BB = BRIGHT_BLUE;
    public static final String BY = BRIGHT_YELLOW;
    public static final String BM = BRIGHT_MAGENTA;
    public static final String BW = BRIGHT_WHITE;
    public static final String BC = BRIGHT_CYAN;
    public static final String BBL = BRIGHT_BLACK;

    public static final String TYPE_HTML = "text/html";
    public static final String TYPE_XML = "application/xml";
    public static final String TYPE_JSON = "application/json";

    public static final Integer CODE_OK = 200;
    public static final Integer CODE_TRANSFER = 300;
    public static final Integer CODE_NOT_FOUND = 400;
    public static final Integer CODE_ERROR = 500;

    private final StringBuilder sb = new StringBuilder();
    private boolean verbose = false;
    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    private Gson gson = new Gson();

    /**
     * Formata uma mensagem de sa├¡da que permite msgs em formatos complexos como a exemplo do uso do `cs`, `fs` emtre outros.
     * @param msgs ├® a entrada de dados de mensagens como cs, fs, etc.
     */
    public String msg(Object...msgs) {
        if (msgs == null) {
            return null;
        }

        sb.setLength(0);
        for (Object msg : msgs) {
            sb.append(msg);
        }

        String s = sb.toString();

        if (s.endsWith(sl())) {
            s = s.substring(0, s.length() - sl().length());
            System.out.print(s);
        } else if (s.endsWith(":input:")) {
            s = s.substring(0, s.length() - ":input:".length());
            System.out.print(s);
            Scanner scanner = new Scanner(System.in);
            return scanner.nextLine();
        } else {
            System.out.println(s);
        }

        return null;
    }

    /**
     * <code>Color String</code> retorna um texto formatado com a combina├º├úo de cores desejada.
     * @param any - qualquer objeto imprim├¡vel
     * @return uma string colorida formatada
     */
    public String cs(Object... any) {
        if (any == null) return "";

        sb.setLength(0);
        for (Object o : any) {
            sb.append(o.toString());
        }

        sb.append(CRelease.RESET);
        return sb.toString();
    }

    /**
     * <code>Repeater</code>, repete uma string com o tamanho desejado.
     * @param msg - string da mensagem
     * @param size - tamanho de formata├º├úo
     * @return - string formata com o tamanho previsto.
     */
    public String rp(String msg, int size) {
        if (msg == null) return "";

        if (msg.length() < size) {
            return msg.repeat(size);
        }

        return msg;
    }

    /**
     * <code>Fixed Size</code>, retorna uma string com o m├íximo de tamanho informado desde que ela n├úo seja maior que a quantidade de tamanho informada.
     * Caso a string seja maior, ent├úo ela retornar├í com o seu pr├│prio tamanho.
     *
     * @param msg string da mensagem.
     * @param size tamanho de formata├º├úo.
     * @return uma string formata com o tamanho previsto.
     */
    public String fs(String msg, int size) {
        if (msg == null) return "";

        if (msg.length() < size) {
            return msg + " ".repeat(size - msg.length());
        }

        return msg;
    }

    /**
     * <code>Fixed Size Right</code> formata a msg de forma an├íloga ao <code>Fixed Size</code>, por├®m, o alinhamento ├® ├á direita.
     *
     * @param msg string da mensagem.
     * @param size tamanho de formata├º├úo.
     * @return string formata com o tamanho previsto.
     */
    public String fsr(String msg, int size) {
        if (msg == null) return "";

        if (msg.length() < size) {
            return " ".repeat(size - msg.length()) + msg;
        }

        return msg;
    }

    /**
     * <code>Line</code> cria uma quebra de linha conforme o separador usado pelo SO corrente.
     *
     * @return string de comando de msg que ├® interpretada pelo msg().
     */
    public String ln() {
        return System.lineSeparator();
    }

    /**
     * <code>Same Line</code> faz com que uma msg() n├úo quebre a linha e continua a pr├│xima msg.
     *
     * @return string de comando de msg que ├® interpretada pelo msg().
     */
    public String sl() {
        return "ln:sl";
    }

    /**
     * <code>Input</code> executa uma opera├º├úo de entrada de texto retornado para o sistema.
     *
     * @param msg que ser├í exibigada antes do input pelo usu├írio. O input ficar├í na mesma linha que a msg.
     * @return a entrada inserida pelo usu├írio.
     */
    public String input(String msg) {
        return msg + ":input:";
    }

    /**
     * <code>Space</code> retorna a quantidade de espa├ºos desejados em forma de string vazia.
     *
     * @param size quantidade de espa├ºos.
     * @return uma string com espa├ºamento ├á esquerda.
     */
    public String sp(int size) {
        return String.format("%" + size + "s", "");
    }

    /**
     * <code>Square</code> formata uma msg de string no padr├úo de quadros com o [].
     *
     * @param msgs que ficar├úo de dentro do [].
     * @return uma msg formatada no padr├úo <code>Square</code>.
     */
    public String sq(Object... msgs) {
        String msg = Arrays.stream(msgs).map(Object::toString).collect(Collectors.joining(""));
        return cs(WHITE, "[") + msg + cs(WHITE, "]: ");
    }

    /**
     * <code>Title</code> gera um t├¡tulo para uma msg formatada com background e foreground color e moldura.
     *
     * @param msg a ser utilizada como t├¡tulo.
     */
    public void title(String msg, String backcolor, String forecolor) {
        String colors = backcolor + forecolor;
        String m = "Ôöé" + msg + "Ôöé";

        msg(cs(colors, "Ôöî" + rp("ÔöÇ", m.length() - 2), "ÔöÉ"));
        msg(cs(colors, m));
        msg(cs(colors, "Ôöö" + rp("ÔöÇ", m.length() - 2), "Ôöÿ"));
        System.out.println();
    }

    /**
     * <code>Title</code> gera um t├¡tulo para uma msg formatada com o background WHITE e a forecolor BLUE.
     *
     * @param msg a ser utilizada como t├¡tulo.
     */
    public void title(String msg) {
        title(msg, BG_BRIGHT_WHITE, BLUE);
    }

    private void log(String color, String title, String msg) {
        String escape = "";
        if (msg != null && !msg.trim().isEmpty() && msg.startsWith("\n")) {
            escape = "\n";
            msg = msg.substring(1, msg.length() - 1);
        }

        msg(escape, cs(WHITE, "["), cs(color, title), cs(WHITE, "]: "), msg);
    }

    public void info(String title, String msg) {
        log(BB, title, msg);
    }

    public void info(String msg) {
        info("INFO", msg);
    }

    public void warn(String title, String msg) {
        log(BY, title, msg);
    }

    public void warn(String msg) {
        warn("AVISO", msg);
    }

    public void error(String title, String msg) {
        log(BR, title, msg);
    }

    public void error(String msg) {
        error("ERROR", msg);
    }

    public String gr(Object... msgs) {
        return cs(BG, msgs);
    }

    public String rd(Object... msgs) {
        return cs(BR, msgs);
    }

    public String yy(Object... msgs) {
        return cs(BY, msgs);
    }

    //=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
    // PARTE WEB
    //=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

}

Z7p9UDGyuj============================================================

[MavenUtils.java:src\main\java\org\caixa\crelease\utils\MavenUtils.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.utils;

import org.caixa.crelease.exceptions.GitException;
import org.caixa.crelease.git.Git;
import org.caixa.crelease.models.MavenPOM;
import org.caixa.crelease.models.Module;
import org.caixa.crelease.models.ModulePOM;
import org.caixa.crelease.models.Setup;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MavenUtils {

  public static ModulePOM getMaven() {
    ModulePOM modPOM = new ModulePOM();
    modPOM.setPoms(getMavenPOMs());

    return modPOM;
  }

  /**
   * Cria uma mensagem de commit com base nas vers├Áes dos POMs de cada um dos m├│dulos.
   *
   * @param msg personalidade pelo usu├írio.
   * @return uma mensagem de commit com base nas vers├Áes dos POMs + mensagem de usu├írio.
   * @throws GitException se ocorrer um erro na execu├º├úo do comando git.
   */
  public static String createCommitMessage(String msg) throws GitException {
    String branch = "";
    StringBuilder m;
    Map<String, List<String>> modVersions = new HashMap<>();

    for (Module mod : AppUtils.getSetup().getRegularModules()) {
      MavenPOM pom = MavenUtils.getMaven().getVersionByModule(mod);

      if (branch.isEmpty()) {
        branch = Git.findBranchName(mod.getPath());
      }
      if (pom != null) {
        if (!modVersions.containsKey(pom.getPomVersion())) {
          modVersions.put(pom.getPomVersion(), new ArrayList<>());
        }

        // adiciona a vers├úo para o m├│dulo
        modVersions.get(pom.getPomVersion()).add(mod.getName());
      } else if (!modVersions.containsKey(branch)) {
        modVersions.put(branch, new ArrayList<>());
        modVersions.get(branch).add(mod.getName());
      }
    }

    // montando a mensagem final do commit
    m = new StringBuilder(branch + " [");

    for (String v : modVersions.keySet()) {
      for (String name : modVersions.get(v)) {
        m.append(name).append(", ");
      }
      m = new StringBuilder(m.substring(0, m.length() - 2));
      m.append(": ").append(v).append("; ");
    }
    m = new StringBuilder(m.substring(0, m.length() - 1) + "] - " + msg);

    return m.toString();
  }

  private static Map<Module, List<MavenPOM>> getMavenPOMs() {
    Setup setup = AppUtils.getSetup();
    Map<Module, List<MavenPOM>> maven = new HashMap<>();

    for (Module module : setup.getRegularModules()) {
      List<MavenPOM> mavenPOMs = new ArrayList<>();

      if (module.getPoms().isEmpty()) {
        continue;
      }

      for (String pomPath : module.getPoms()) {
        String path = AppUtils.getJoinedPath(AppUtils.getFullUserPath(module), pomPath);
        MavenPOM mavenPOM = getVersions(AppUtils.readFile(path));
        mavenPOMs.add(mavenPOM);
      }
      maven.put(module, mavenPOMs);
    }

    return maven;
  }

  /**
   * Obt├¬m as vers├Áes do POM em formato pom_version:core_version. Ex:
   * pom: 3.13.0
   * core: 3.10.0
   * retorna: 3.13.0:3.10.0
   *
   * @param pomFile - arquivo contendo o conte├║do do pom.xml
   * @return as vers├Áes do pom em formato pom e core.
   */
  public static MavenPOM getVersions(String pomFile) {
    String pv = "";
    String cv = "";

    if (pomFile.contains("<version>")) {
      // obter <version>
      int startIndex = pomFile.indexOf("<version>") + "<version>".length();
      int endIndex = pomFile.indexOf("</version>", startIndex);
      pv = pomFile.substring(startIndex, endIndex);

      // obter <sicdt-core-version>
      if (pomFile.contains("<sicdt-core-version>")) {
        int startIndexCore = pomFile.indexOf("<sicdt-core-version>") + "<sicdt-core-version>".length();
        int endIndexCore = pomFile.indexOf("</sicdt-core-version>", startIndexCore);
        cv = pomFile.substring(startIndexCore, endIndexCore);

        // se a vers├úo for a mesma do pai, substitui para a do pai
        if (cv.contains("project.version")) {
          cv = pv;
        }
      }
    }

    if (!cv.isEmpty() && !pv.isEmpty()) {
      return new MavenPOM(pv, cv);
    }

    return null;
  }
}

Z7p9UDGyuj============================================================

[Web.java:src\main\java\org\caixa\crelease\utils\Web.java]
Z7p9UDGyuj============================================================
package org.caixa.crelease.utils;

import com.google.gson.Gson;
import com.sun.net.httpserver.HttpExchange;
import org.caixa.crelease.exceptions.WebException;
import org.caixa.crelease.html.Content;
import org.caixa.crelease.html.MIMEType;
import org.caixa.crelease.renders.Model;
import org.springframework.core.io.ResourceLoader;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.lang.reflect.Field;
import java.net.URI;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.jar.JarFile;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Web {

    public static final Integer CODE_OK = 200;
    public static final Integer CODE_TRANSFER = 300;
    public static final Integer CODE_NOT_FOUND = 400;
    public static final Integer CODE_ERROR = 500;

    private static final SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
    private static final Gson gson = new Gson();

    private static final Map<String, Content> filesContent = new HashMap<>();
    private static final StringBuilder sb = new StringBuilder();
    private static boolean verbose = false;

    /**
     * Carrega todos os arquivos a partir da pasta src/main/resources. O conte├║do ├® carregado dinamicamente mesmo se houve altera├º├úo durante
     * a execu├º├úo do servidor.
     *
     * @throws IOException caso ocorra algum erro de acesso aos dados.
     */
    public static void loadResourceWebFiles() throws IOException {
        filesContent.clear();

        if (isRunningFromJar()) {
            System.out.println("load from jar");
            loadResourcesFromJar();
        } else {
            System.out.println("load from file system");
            loadResourceFromFileSystem();
        }
    }

    /**
     * Carrega uma p├ígina e as suas sub-p├íginas associadas em seu arquivo. O arquivo retorna em formato String
     * que poder├í ser renderizado como HTML (application/html) para uma p├ígina de sa├¡da.
     *
     * @param pageName ├® o nome do arquivo da p├ígina presente em src/main/resources/.../pages/{pageName}
     * @return o conte├║do da p├ígina preenchido tamb├®m com as subp├íginas, caso existam.
     * @throws WebException ├® lan├ºado se por algum motivo n├úo for poss├¡vel executar a p├ígina.
     */
    public static String loadPage(String pageName) throws WebException {
        String page = null;

        try {
            // carrega a p├ígina inicial
            for (String fileName : filesContent.keySet()) {
                if (fileName.equals(pageName + ".html")) {
                    Content content = filesContent.get(fileName);
                    page = loadFileContent(content);
                    break;
                }
            }

            if (page == null) {
                throw new WebException("N├úo foi poss├¡vel encontrar a p├ígina informada. " +
                   "Verifique se h├í uma p├ígina em alguma pasta chamada \"pages\" com o mesmo nome da p├ígina informada.");
            }

            // verifica se h├í sub-p├íginas e, caso existam, carregue cada uma
            page = fillContent(page);
        } catch (IOException e) {
            throw new WebException("Error: n├úo foi poss├¡vel carregar o arquivo da p├ígina. Msg: " + e.getMessage(), e.getCause());
        }

        return page;
    }

    private static String fillContent(String page) throws IOException {
        String strContent = null;
        List<String> tokens = AppUtils.findTokens("@@", page);

        for (String token : tokens) {
            String tokenValue = token.replace("@@", "");

            for (String fileName : filesContent.keySet()) {
                Content content = filesContent.get(fileName);

                if (content.getName().equals(tokenValue)) {
                    strContent = loadFileContent(content);
                    break;
                }
            }

            // se achou strContent
            if (strContent != null) {
                page = page.replace(token, strContent);
                return fillContent(page);
            }
        }

        return page;
    }

    /**
     * Gera uma response para uma requisi├º├úo web.
     *
     * @param code
     * @param contentType
     * @param exchange
     * @param content
     * @throws IOException
     */
    public static void publish(int code, MIMEType contentType, HttpExchange exchange, String content) throws IOException {
        exchange.getResponseHeaders().add("Content-Type", contentType.getValue() + "; charset=UTF-8");
        exchange.sendResponseHeaders(code, content.getBytes().length);

        if (verbose) {
            System.out.println(sdf.format(new Date()) + " : Publicando [" + contentType + "]: code: " + code + " - size: " + content.getBytes().length);
        }

        OutputStream os = exchange.getResponseBody();
        os.write(content.getBytes());
        os.close();
    }

    public static void publishHTML(int code, HttpExchange exchange, String content) throws IOException {
        publish(code, MIMEType.HTML, exchange, content);
    }

    public static void publishJSON(int code, HttpExchange exchange, Model content) throws IOException {
        String json = gson.toJson(content);
        System.out.println("JSON Result: " + json);
        publish(code, MIMEType.JSON, exchange, json);
    }

    public static void publishXML(int code, HttpExchange exchange, String content) throws IOException {
        publish(code, MIMEType.XML, exchange, content);
    }

    /**
     * Carrega o conte├║do de um arquivo que encontra-se na pasta "/resources".
     *
     * @param fileName nome do arquivo a ser carregado.
     * @return o conte├║do do arquivo.
     * @throws IOException caso ocorra erro de leitura do arquivo.
     */
    public static String loadResourceContent(String fileName) throws IOException {
        String path = new File("src/main/resources/" + fileName).getAbsolutePath();
        StringBuilder sb = new StringBuilder();

        try (Stream<String> lines = Files.lines(Path.of(path), StandardCharsets.UTF_8)) {
            lines.forEach(line -> sb.append(line).append("\n"));
        }

        return sb.toString();
    }

    /**
     * Carrega o conte├║do do arquivo que est├í em Content. Se a execu├º├úo da aplica├º├úo ├® via .jar, ent├úo o conte├║do do arquivo
     * j├í est├í carregado de antem├úo. Para conte├║do din├ómico (classpath), o arquivo ├® carregado toda vez que ele for solicitado.
     *
     * @param content inst├óncia de Content.
     * @return a string do conte├║do do arquivo.
     * @throws IOException caso n├úo consiga ler o arquivo (via classpath).
     */
    public static String loadFileContent(Content content) throws IOException {
        if (content.getContent() != null) {
            // proveniente do JAR
            return content.getContent();
        } else {
            String path = new File(content.getAbsolutePath()).getAbsolutePath();
            StringBuilder sb = new StringBuilder();

            try (Stream<String> lines = Files.lines(Path.of(path), StandardCharsets.UTF_8)) {
                lines.forEach(line -> sb.append(line).append("\n"));
            }

            return sb.toString();
        }
    }

    /**
     * Obt├¬m o BODY conte├║do de uma requisi├º├úo POST.
     *
     * @param exchange HttpExchange usado para receber o body.
     * @return string em UTF-8 contendo o conte├║do do body que for passado como par├ómetro.
     * @throws IOException caso ocorra erro de leitura do arquivo.
     */
    public static String getBody(HttpExchange exchange) throws IOException {
        if ("POST".equals(exchange.getRequestMethod())) {
            InputStream is = exchange.getRequestBody();
            if (is == null) return null;

            try (InputStreamReader isr = new InputStreamReader(is, StandardCharsets.UTF_8);
                 BufferedReader br = new BufferedReader(isr)) {

                String body = br.lines().collect(Collectors.joining("\n"));
                return URLDecoder.decode(body, StandardCharsets.UTF_8);

            } catch (IOException e) {
                throw e;
            }
        }

        return null;
    }

    /**
     * Obt├¬m um valor de uma requisi├º├úo POST atrav├®s do seu BODY.
     *
     * @param body      ├® o corpo da requisi├º├úo
     * @param attribute ├® o atributo a ser encontrado no BODY da requisi├º├úo
     * @return o valor do atributo requerido.
     */
    public static String getValue(String body, String attribute) {
        if (body != null && !body.isEmpty()) {
            return body.split(attribute + "=")[1].trim();
        }

        return null;
    }

    /**
     * Obt├¬m um conjunto de par├ómetros de uma requisi├º├úo HTTP GET.
     *
     * @param uri Uniform Resource Identify da requisi├º├úo que ├® utilizada.
     * @return um conjunto com todos os par├ómetros da requisi├º├úo.
     */
    public static Map<String, String> getQueryParams(URI uri) {
        if (uri.getQuery() != null) {
            Map<String, String> queryParams = new HashMap<>();
            String[] params = uri.getQuery().split("&");
            for (int i = 0; i < params.length; i++) {
                String param = params[i];
                if (param.contains(".")) {
                    String keyMap = param.split("\\.", 2)[0];
                    String value = param.split("\\.", 2)[1];
//                    String value = key + "=" + param.split("\\.", 2)[1];

                    if (!queryParams.containsKey(keyMap)) {
                        queryParams.put(keyMap, value);
                    } else {
                        String values = queryParams.get(keyMap);
                        values += "&" + value;
                        queryParams.put(keyMap, values);
                    }

                } else {
                    String[] keyValue = param.split("=", 2);
                    queryParams.put(keyValue[0], keyValue.length > 1 ? keyValue[1] : null);
                }
            }
            return queryParams;
        }
        return new HashMap<>();
    }

    /**
     * Serializa o conte├║do de um objeto como string JSON.
     *
     * @param object que extende de ModelRender
     * @return o objeto convertido para uma string JSON.
     */
    public static <T extends Model> String toJson(T object) {
        return gson.toJson(object);
    }

    /**
     * Convert uma string em formato JSON para uma classe Java estendida de ModelRender.
     *
     * @param params     string serializada em formato JSON.
     * @param modelClass a classe que ser├í usada para a cria├º├úo do objeto.
     * @param <T>        Classe usada para marshall.
     * @return uma inst├óncia da classe a ser serializada.
     */
    public static <T extends Model> T fromJson(String params, Class<T> modelClass) {
        return gson.fromJson(params, modelClass);
    }

    /**
     * @param queryString
     * @param modelClass
     * @param <T>
     * @return
     */
    public static <T> T fromQueryString(String queryString, Class<T> modelClass) {
        try {
            T model = modelClass.getDeclaredConstructor().newInstance();
            String[] pairs = queryString.split("&");
            Map<String, String> paramMap = new HashMap<>();

            for (String pair : pairs) {
                int idx = pair.indexOf("=");
                String key = idx > -1 ? pair.substring(0, idx) : pair;
                String value = idx > -1 ? pair.substring(idx + 1) : "";
                paramMap.put(key, value);
            }

            for (Field field : modelClass.getDeclaredFields()) {
                field.setAccessible(true);
                String fieldName = field.getName();
                if (paramMap.containsKey(fieldName)) {
                    field.set(model, paramMap.get(fieldName));
                }
            }

            return model;
        } catch (Exception e) {
            throw new RuntimeException("Falha em converter a query string para o model", e);
        }
    }

    public static void verboseON() {
        verbose = true;
    }

    public static void verboseOFF() {
        verbose = false;
    }

    /**
     * Verifica se est├í rodando diretamente do .jar ou execu├º├úo direta passando classpath.
     *
     * @return verdadeiro se est├í executando a app via jar.
     */
    private static boolean isRunningFromJar() {
        String path = Web.class.getProtectionDomain().getCodeSource().getLocation().getPath();
        return path.endsWith(".jar");
    }

    private static void loadResourceFromFileSystem() throws IOException {
        String dir = "src/main/resources";
        filesContent.clear();

        Map<String, Path> filesMap = Files.walk(Paths.get(dir))
           .filter(Files::isRegularFile)
           .collect(Collectors.toMap(
              path -> path.getFileName().toString(),
              Path::toAbsolutePath
           ));

        for (String fileName : filesMap.keySet()) {
            Path filePath = filesMap.get(fileName);

            if (AppUtils.checkExt(filePath, ".html", ".js", ".css")) {
                // registra uma nova p├ígina de conte├║do
                Content content = new Content();
                content.setName(AppUtils.getFilenameWithoutExt(fileName));
                content.setPath(filePath);
                content.setStructure(AppUtils.findStructure(filePath));

                filesContent.put(fileName, content);
            }
            //todo-ito adicinar para registrar os arquivos que est├úo na pasta p├║blica.
        }
    }

    private static void loadResourcesFromJar() throws IOException {
        // Path to the running jar
        String jarPath = ResourceLoader.class
           .getProtectionDomain()
           .getCodeSource()
           .getLocation()
           .getPath();

        try (JarFile jarFile = new JarFile(jarPath)) {
            jarFile.stream()
               .filter(e -> !e.isDirectory() && e.getName().startsWith("resources/"))
               .forEach(e -> {
                   Path filePath = Paths.get(e.getName());
                   String fileName = filePath.getFileName().toString();

                   if (AppUtils.checkExt(filePath, ".html", ".js", ".css")) {
                       // registra uma nova p├ígina de conte├║do
                       Content content = new Content();
                       content.setName(AppUtils.getFilenameWithoutExt(fileName));
                       content.setPath(filePath);
                       content.setStructure(AppUtils.findStructure(filePath));

                       InputStream inputStream = null;
                       try {
                           inputStream = jarFile.getInputStream(e);
                       } catch (IOException ex) {
                           System.out.println("Erro ao pegar o InputStream: " + ex.getMessage());
                           throw new RuntimeException(ex);
                       }

                       InputStreamReader streamReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);
                       BufferedReader reader = new BufferedReader(streamReader);
                       content.setContent(reader.lines().collect(Collectors.joining(System.lineSeparator())));

                       filesContent.put(fileName, content);
                   }
               });
        }
    }

}

Z7p9UDGyuj============================================================

[application.properties:src\main\resources\application.properties]
Z7p9UDGyuj============================================================
server.port=9988
Z7p9UDGyuj============================================================

[modal.css:src\main\resources\css\modal.css]
Z7p9UDGyuj============================================================
/* ----- Modal (INICIO) ----- */

.modal {
    position: fixed; /* fixada */
    z-index: 1000; /* fica acima dos outros elementos */
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto; /* ativa o scroll, se precisar */
    background-color: rgba(0,0,0,0.4); /* preto com opacidade */
    backdrop-filter: blur(8px); /* aplica o efeito de blur no background */
    display: none; /* adiciona flex para centralizar o conte├║do */
    justify-content: center; /* centraliza horizontalmente */
    align-items: center; /* centraliza verticalmente */
}

/* modal: cabecalho */
.modal-header {
    margin-top: -10px;
    margin-bottom: 5px;
    padding: 7px 7px;
    background-color: rgba(16,185,129, 1);
    color: white;
}

/* modal: conteudo */
.modal-content {
    position: relative;
    background-color: #fefefe;
    padding: 10px 0;
    border: 1px solid #888;
    width: 50%; /* pode ser mais ou menos, 50% ├® metade da tela */
    height: 50%;
    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);
    animation-name: animatetop;
    animation-duration: 0.4s;
    display: flex;
    flex-direction: column; /* permite o uso de justify-content: space-between */
    justify-content: space-between; /* espa├ºa o conte├║do para que os bot├Áes estejam na parte inferior */
    border-radius: 20px; /* cantos arredondados */
}

.modal-body {
    padding: 10px;
    flex-grow: 1; /* permite o crescimento do corpo para ocupar espa├ºo dispon├¡vel */
}

.modal-buttons {
    display: flex;
    justify-content: flex-end;
    background-color: #E5E5E5;
    padding: 7px;
    margin-bottom: -10px;
    gap: 10px; /* espa├ºamento entre os bot├Áes */
}

/* ----- Modal (FIM) ----- */
Z7p9UDGyuj============================================================

[modal2.css:src\main\resources\css\modal2.css]
Z7p9UDGyuj============================================================
/* ----- Modal (INICIO) ----- */

.modal {
    display: none; /* escondida por padrao */
    position: fixed; /* fixada */
    z-index: 1000; /* fica acima dos outros elementos */
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto; /* ativa o scroll, se precisar */
    background-color: rgba(0,0,0,0.4); /* preto com opacidade */
    backdrop-filter: blur(8px); /* aplica o efeito de blur no background */
}

/* modal: cabecalho */
.modal-header {
    margin-top: -10px;
    margin-bottom: 5px;
    padding: 7px 7px;
    background-color: #5cb85c;
    background-color: rgba(16,185,129);
    color: white;
}

/* modal: conteudo */
.modal-content {
    position: relative;
    background-color: #fefefe;
    margin: 15% auto; /* 15% do topo e do centro */
    padding: 10px 0;
    border: 1px solid #888;
    width: 50%; /* pode ser mais ou menos, 50% ├® metade da tela */
    height: 50%;
    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);
    animation-name: animatetop;
    animation-duration: 0.4s;
}

.modal-body {
    padding: 10px;
}

.modal-buttons {
    position: relative;
    background-color: #E5E5E5;
    margin: -15px auto;
    padding: 7px;
}

/* ----- Modal (FIM) ----- */
Z7p9UDGyuj============================================================

[output.css:src\main\resources\output.css]
Z7p9UDGyuj============================================================
.tab-button {
    /* Non-active tabs color */
    @apply text-gray-500 bg-white;
}

.tab-button.active {
    /* Active tab color */
    @apply text-white bg-blue-500;
}
Z7p9UDGyuj============================================================

[atual.html:src\main\resources\pages\atual.html]
Z7p9UDGyuj============================================================
<p>ATUAL</p>
Z7p9UDGyuj============================================================

[backup.html:src\main\resources\pages\backup.html]
Z7p9UDGyuj============================================================
<tr class="table-row cursor-pointer">
  <td class="border px-3 py-2">release/3.16.0</td>
  <td class="border px-3 py-2">3.16.0</td>
  <td class="border px-3 py-2">3.16.0</td>
  <td class="border px-3 py-2">3.16.0</td>
  <td class="border px-3 py-2">release/3.16.0</td>
  <td class="border px-3 py-2">
    <button class="p-2 bg-green-500 text-white rounded">
      <i class="fas fa-download"></i>
    </button>
  </td>
</tr>
<tr class="table-row cursor-pointer">
  <td class="border px-3 py-2">release/3.17.0</td>
  <td class="border px-3 py-2">3.17.0</td>
  <td class="border px-3 py-2">3.17.0</td>
  <td class="border px-3 py-2">3.17.0</td>
  <td class="border px-3 py-2">release/3.17.0</td>
  <td class="border px-3 py-2">
    <button class="p-2 bg-green-500 text-white rounded">
      <i class="fas fa-download"></i>
    </button>
  </td>
</tr>
Z7p9UDGyuj============================================================

[baixar.html:src\main\resources\pages\baixar.html]
Z7p9UDGyuj============================================================
<!-- Baixar -->
<div class="mb-6 flex items-end">
  <div class="relative flex-grow">
    <input id="txt-pesquisar" class="border rounded px-3 pl-10 py-2 w-full outline-none focus:outline-none focus:ring" type="text" autofocus
           placeholder="Pesquisar branch...">
    <i class="fas fa-search absolute left-3 top-3 text-gray-300"></i>
  </div>
  <button id="btn-pesquisar" class="mt-2 bg-blue-500 text-white rounded px-3 py-2 ml-4 w-32"
           type="button" onclick="actionPesquisarBranches()">
    Pesquisar
  </button>
</div>
<div class="mb-6 font-bold" id="processamento"></div>
<!-- Lista de demandas -->
<span class="block text-gray-800 bg-gray-100 rounded border-b-2 p-2 font-bold">Lista de demandas</span>
<div class="mb-6">
  <!-- tabela de demandas -->
  <table class="w-full table-fixed bg-white">
    <thead>
    <tr class="bg-blue-600 text-yellow-400">
      <th class="border px-3 py-2">Branch</th>
      <th class="border px-3 py-2">Core</th>
      <th class="border px-3 py-2">Web</th>
      <th class="border px-3 py-2">Batch</th>
      <th class="border px-3 py-2">Shell</th>
      <th class="border px-3 py-2">A├º├úo</th>
    </tr>
    </thead>
    <!-- conteudo -->
    <tbody id="demandas">
      <tr class="table-row cursor-pointer anim-row hidden text-3xl">
        <td class="border px-3 py-2"><span class="anim-dot">.</span></td>
        <td class="border px-3 py-2"><span class="anim-dot">.</span></td>
        <td class="border px-3 py-2"><span class="anim-dot">.</span></td>
        <td class="border px-3 py-2"><span class="anim-dot">.</span></td>
        <td class="border px-3 py-2"><span class="anim-dot">.</span></td>
        <td class="border px-3 py-2"><span class="anim-dot">.</span></td>
      </tr>
    </tbody>
  </table>
</div>

<!-- branch atual -->
<div id="branch-atual"></div>
Z7p9UDGyuj============================================================

[compilar.html:src\main\resources\pages\compilar.html]
Z7p9UDGyuj============================================================
<p>COMPILAR</p>
Z7p9UDGyuj============================================================

[componentes.html:src\main\resources\pages\componentes.html]
Z7p9UDGyuj============================================================
<!-- ------------------------- -->
<!-- colocar novos componentes -->
<!-- ------------------------- -->

<!-- Alerta -->

<div class="text-white px-6 py-4 border-0 rounded relative mb-4 bg-blueGray-500 hidden">
  <span class="text-xl inline-block mr-5 align-middle">
    <i class="fas fa-bell" />
  </span>
  <span class="inline-block align-middle mr-8">
    <b class="capitalize">blueGray!</b> This is a blueGray alert - check it out!
  </span>
  <button class="absolute bg-transparent text-2xl font-semibold leading-none right-0 top-0 mt-4 mr-6 outline-none focus:outline-none">
    <span>├ù</span>
  </button>
</div>

<!-- modal -->

<button class="bg-pink-500 text-white active:bg-pink-600 font-bold uppercase text-sm px-6 py-3 rounded shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150" type="button" onclick="toggleModal('modal-id')">
  Open regular modal
</button>
<div class="hidden overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none justify-center items-center" id="modal-id">
  <div class="relative w-auto my-6 mx-auto max-w-3xl">
    <!--content-->
    <div class="border-0 rounded-lg shadow-lg relative flex flex-col w-full bg-white outline-none focus:outline-none">
      <!--header-->
      <div class="flex items-start justify-between p-5 border-b border-solid border-blueGray-200 rounded-t">
        <h3 class="text-3xl font-semibold">
          Modal Title
        </h3>
        <button class="p-1 ml-auto bg-transparent border-0 text-black opacity-5 float-right text-3xl leading-none font-semibold outline-none focus:outline-none" onclick="toggleModal('modal-id')">
          <span class="bg-transparent text-black opacity-5 h-6 w-6 text-2xl block outline-none focus:outline-none">
            ├ù
          </span>
        </button>
      </div>
      <!--body-->
      <div class="relative p-6 flex-auto">
        <p class="my-4 text-blueGray-500 text-lg leading-relaxed">
          I always felt like I could do anything. ThatÔÇÖs the main
          thing people are controlled by! Thoughts- their perception
          of themselves! They're slowed down by their perception of
          themselves. If you're taught you canÔÇÖt do anything, you
          wonÔÇÖt do anything. I was taught I could do everything.
        </p>
      </div>
      <!--footer-->
      <div class="flex items-center justify-end p-6 border-t border-solid border-blueGray-200 rounded-b">
        <button class="text-red-500 background-transparent font-bold uppercase px-6 py-2 text-sm outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150" type="button" onclick="toggleModal('modal-id')">
          Close
        </button>
        <button class="bg-emerald-500 text-white active:bg-emerald-600 font-bold uppercase text-sm px-6 py-3 rounded shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1 ease-linear transition-all duration-150" type="button" onclick="toggleModal('modal-id')">
          Save Changes
        </button>
      </div>
    </div>
  </div>
</div>
<div class="hidden opacity-25 fixed inset-0 z-40 bg-black" id="modal-id-backdrop"></div>
<script type="text/javascript">
    function toggleModal(modalID){
        document.getElementById(modalID).classList.toggle("hidden");
        document.getElementById(modalID + "-backdrop").classList.toggle("hidden");
        document.getElementById(modalID).classList.toggle("flex");
        document.getElementById(modalID + "-backdrop").classList.toggle("flex");
    }
</script>

<!-- outros scripts -->

<script>
    //////////////////////////////////
    // Progress bar
    //////////////////////////////////

    function registerProgressBar() {
        document.querySelectorAll('.table-row button').forEach(button => {
            button.addEventListener('click', function() {
                // Get the parent row
                var row = this.parentNode.parentNode;
                // Get the progress bars
                var progressBars = row.querySelectorAll('.progress-bar');
                // Initialize the progress bars
                progressBars.forEach(progressBar => {
                    progressBar.style.backgroundColor = 'green';
                    progressBar.style.width = '0%';
                });
                // Simulate progress update. Real progress update mechanism via Java backend is required.
                let progress = 0;
                let interval = setInterval(function() {
                    if (progress < 100) {
                        progress++;
                        progressBars.forEach(progressBar => {
                            progressBar.style.width = progress + '%';
                        });
                    } else {
                        clearInterval(interval);
                    }
                }, 100);
            });
        });
    }

</script>

<!-- Backup de row-demanda -->
<script>
    <tr className="table-row cursor-pointer" id="@id">
        <td className="border px-3 py-2 font-semibold" id="branch-name">@branch</td>
      <!-- core -->
        <td className="border px-3 py-2">
            <div className="relative pt-1">
                <div className="flex mb-2 items-center justify-between">
                    <div>
      <span className="text-xs font-bold">
        @core
      </span>
                    </div>
                    <div className="text-right">
      <span className="text-xs font-bold inline-block text-blue-600 mod-core-percent hidden">
        50%
      </span>
                    </div>
                </div>
                <div className="overflow-hidden h-2 mb-4 text-xs flex rounded bg-white">
                    <div style="width:0%"
                         className="mod-core-bar shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500"></div>
                </div>
            </div>
        </td>
      <!-- web -->
        <td className="border px-3 py-2">
            <div className="relative pt-1">
                <div className="flex mb-2 items-center justify-between">
                    <div>
      <span className="text-xs font-bold">
        @web
      </span>
                    </div>
                    <div className="text-right">
      <span className="text-xs font-bold inline-block text-blue-600 mod-web-percent hidden">
        0%
      </span>
                    </div>
                </div>
                <div className="overflow-hidden h-2 mb-4 text-xs flex rounded bg-white">
                    <div style="width:0%"
                         className="mod-web-bar shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500"></div>
                </div>
            </div>
        </td>
      <!-- batch -->
        <td className="border px-3 py-2">
            <div className="relative pt-1">
                <div className="flex mb-2 items-center justify-between">
                    <div>
      <span className="text-xs font-bold">
        @batch
      </span>
                    </div>
                    <div className="text-right">
      <span className="text-xs font-bold inline-block text-blue-600 mod-batch-percent hidden">
        0%
      </span>
                    </div>
                </div>
                <div className="overflow-hidden h-2 mb-4 text-xs flex rounded bg-white">
                    <div style="width:0%"
                         className="mod-batch-bar shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500"></div>
                </div>
            </div>
        </td>
      <!-- shell -->
        <td className="border px-3 py-2">
            <div className="relative pt-1">
                <div className="flex mb-2 items-center justify-between">
                    <div>
      <span className="text-xs font-bold">
        @shell
      </span>
                    </div>
                    <div className="text-right">
      <span className="text-xs font-bold inline-block text-blue-600 mod-shell-percent hidden">
        0%
      </span>
                    </div>
                </div>
                <div className="overflow-hidden h-2 mb-4 text-xs flex rounded bg-white">
                    <div style="width:0%"
                         className="mod-shell-bar shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500"></div>
                </div>
            </div>
        </td>
        <td className="border px-3 py-2">
            <button className="p-2 bg-blue-500 text-white rounded"
                    title="@baixar"
                    onClick="download('@branch', this)">
                Baixar
                <i className="fas fa-download"></i>
            </button>
        </td>
    </tr>
</script>
Z7p9UDGyuj============================================================

[flowchart.html:src\main\resources\pages\flowchart.html]
Z7p9UDGyuj============================================================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>CDT TOOLS v1.0 - Execu├º├úo de Batches</title>
  <script defer>
    //@@flowchart
  </script>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <style>
      body {
          margin: 0;
          background-color: #E5E5E5;
      }

      .sidebar {
          position: fixed;
          top: 20px;
          left: 20px;
          width: 200px;
          padding: 15px;
          background-color: #2D3748;
          color: white;
          border-radius: 8px;
          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
          z-index: 1; /* Ensure the sidebar is always on top */
      }

      .search-bar {
          position: fixed;
          top: 50%;
          left: 50%;
          transform: translate(-50%, -50%);
          background-color: #FFF;
          border-radius: 9999px;
          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
          width: 400px;
          padding: 10px 20px;
          z-index: 2; /* Ensure the search bar is above everything else */
          display: none;
      }

      .search-input {
          width: 100%;
          border: none;
          outline: none;
      }

      .search-results {
          background-color: #FFF;
          border: 1px solid #E5E7EB;
          border-radius: 8px;
          margin-top: 10px;
          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }

      .search-result-item {
          padding: 10px;
          border-bottom: 1px solid #ccc; /* Add a separator line between items */
          cursor: pointer;
      }

      .search-result-item:last-child {
          border-bottom: none; /* Remove bottom border for the last item */
      }

      .search-result-item:hover {
          background-color: #f0f0f0; /* Light grey background on hover */
      }

      .search-results-container {
          position: absolute;
          top: 100%; /* Position right below the search bar */
          width: 100%; /* Match search bar width */
          max-height: 200px; /* Limit the height */
          overflow-y: auto; /* Add scrolling for overflow */
          border: 1px solid #ccc; /* Add border for separation */
          background-color: #fff; /* Ensure background color is white */
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Add slight shadow for effect */
          z-index: 1000; /* Ensure it's above other elements */
      }

      .grid-container {
          position: relative;
          width: 100%;
          height: 100vh;
          overflow: hidden;
          background-color: #a5a9ac; /** original: #3a4750 */
      }

      .bg-grid {
          background-image:
                  linear-gradient(to right, #303841 1px, transparent 1px),
                  linear-gradient(to bottom, #303841 1px, transparent 1px);
          background-size: 20px 20px;
          position: absolute;
          width: 100%;
          height: 100%;
          top: 0;
          left: 0;
          cursor: grab;
      }

      .modal-box {
          width: 390px;
          background-color: white;
          border-radius: 8px;
          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
          position: absolute;
          padding: 20px;
          border: 1px solid #E5E7EB;
          transition: border-color 0.2s, box-shadow 0.2s; /* adiciona um efeito de transi├º├úo */
          cursor: grab;
      }

      .modal-box.grabbing {
          cursor: grabbing;
      }

      .modal-box.selected {
          /* previne a sele├º├úo de texto quando uma box for selecionada */
          user-select: none;
          -webkit-user-select: none;
          -ms-user-select: none;
          -moz-user-select: none;

          /* em foco a box fica com essa borda */
          border-color: #3182CE;
          box-shadow: 0 0 10px 2px #3182CE;
      }

      .connector-point {
          width: 20px;
          height: 20px;
          background-color: blue;
          position: absolute;
          cursor: pointer;
          border-radius: 4px;
      }

      .svg-connector {
          position: absolute;
          pointer-events: none;
          width: 100%;
          height: 100%;
          top: 0;
          left: 0;
      }
  </style>
</head>

<body>

<!-- Template -->
<div id="modal-content-template" style="display: none;">
  <h3 class="text-lg font-bold">T├¡tulo do Modal</h3>
  <p class="text-sm text-gray-600">descri├º├úo</p>
  <div class="connector-point" style="bottom: -10px; right: -10px;"></div>
</div>

<div class="sidebar">
  <h1 class="text-lg font-bold">Batch Selecionado</h1>
  <div id="selectedComponent" class="text-sm">Nenhum</div>
</div>

<div class="grid-container" id="grid">
  <div class="bg-grid" id="grid-bg"></div>

  <!-- box1 -->
  <div class="modal-box" id="box1" style="top: 180px; left: 50px;">
    <h3 class="text-lg font-bold">BATCH_LIBERACAO_RECURSO</h3>
    <p class="text-sm text-gray-600">Libera os recursos para o contrato.</p>
    <div class="connector-point" id="sc-box1" style="bottom: 35px; right: 380px;"></div>
    <div class="connector-point" id="end-box1" style="bottom: 35px; right: -10px;"></div>
  </div>

  <!-- box2 -->
  <div class="modal-box" id="box2" style="top: 330px; left: 300px;">
    <h3 class="text-lg font-bold">BATCH_GERAR_ARQUIVO_SIACC_CREDITO</h3>
    <p class="text-sm text-gray-600">Gera cr├®dito ao cliente via SIACC.</p>
    <div class="connector-point" id="sc-box2" style="bottom: 35px; right: 380px;"></div>
    <div class="connector-point" id="end-box2" style="bottom: 35px; right: -10px;"></div>
  </div>

  <svg class="svg-connector"></svg>

</div>
<div id="searchBar" class="search-bar">
  <input id="searchInput" type="text" class="search-input" placeholder="Pesquisar...">
  <div id="searchResults" class="search-results-container hidden"></div>
</div>
</body>
</html>
Z7p9UDGyuj============================================================

[branch.html:src\main\resources\pages\fragments\branch.html]
Z7p9UDGyuj============================================================
<div class="container mx-auto p-6">
  <div class="grid grid-cols-3 gap-4">
    <div class="font-bold">Module</div>
    <div class="font-bold">POM version</div>
    <div class="font-bold">CORE version</div>

    <div>Core</div>
    <div>pom: 3.16.0</div>
    <div>core: 3.16.0</div>

    <div>Batch</div>
    <div>pom: 3.16.0</div>
    <div>core: 3.16.0</div>

    <div>Web</div>
    <div>pom: 3.16.13</div>
    <div>core: 3.16.0</div>

    <div>Shell</div>
    <div>pom: 3.16.0</div>
    <div>core: 3.16.0</div>
  </div>
</div>
Z7p9UDGyuj============================================================

[row-demanda.html:src\main\resources\pages\fragments\row-demanda.html]
Z7p9UDGyuj============================================================
<tr class="table-row cursor-pointer" id="@id">
  <!-- branch -->
  <td class="border py-2 font-semibold">@branch</td>
  <!-- core -->
  <td class="border px-3 py-2 fixed-width">
    <div class="relative pt-1">
      <div class="flex mb-2 items-center justify-between">
        <div>
          <span class="text-xs font-bold">
            @core
          </span>
        </div>
        <div class="text-right">
          <span class="mod-core-percent text-xs font-bold inline-block text-blue-600"></span>
        </div>
      </div>
      <div class="mod-core-bar-color overflow-hidden h-2 mb-4 text-xs flex rounded bg-white">
        <div style="width:0%" class="mod-core-bar shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500"></div>
      </div>
    </div>
  </td>
  <!-- batch -->
  <td class="border px-3 py-2 fixed-width">
    <div class="relative pt-1">
      <div class="flex mb-2 items-center justify-between">
        <div>
          <span class="text-xs font-bold">
            @batch
          </span>
        </div>
        <div class="text-right">
          <span class="mod-batch-percent text-xs font-bold inline-block text-blue-600"></span>
        </div>
      </div>
      <div class="mod-batch-bar-color overflow-hidden h-2 mb-4 text-xs flex rounded bg-white">
        <div style="width:0%" class="mod-batch-bar shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500"></div>
      </div>
    </div>
  </td>
  <!-- web -->
  <td class="border px-3 py-2 fixed-width">
    <div class="relative pt-1">
      <div class="flex mb-2 items-center justify-between">
        <div>
          <span class="text-xs font-bold">
            @web
          </span>
        </div>
        <div class="text-right">
          <span class="mod-web-percent text-xs font-bold inline-block text-blue-600"></span>
        </div>
      </div>
      <div class="mod-web-bar-color overflow-hidden h-2 mb-4 text-xs flex rounded bg-white">
        <div style="width:0%" class="mod-web-bar shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500"></div>
      </div>
    </div>
  </td>
  <!-- shell -->
  <td class="border px-3 py-2 fixed-width">
    <div class="relative pt-1">
      <div class="flex mb-2 items-center justify-between">
        <div>
          <span class="text-xs font-bold">
            @shell
          </span>
        </div>
        <div class="text-right">
          <span class="mod-shell-percent text-xs font-bold inline-block text-blue-600"></span>
        </div>
      </div>
      <div class="mod-shell-bar-color overflow-hidden h-2 mb-4 text-xs flex rounded bg-white">
        <div style="width:0%" class="mod-shell-bar shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500"></div>
      </div>
    </div>
  </td>
  <td class="border px-3 py-2 fixed-width">
    <button id="btn-val-@id" class="p-2 bg-green-500 text-white rounded"
            title="Validar a branch: @branch"
            onclick="actionValidateBranch('@id', '@branch')"><i class="fas fa-check"></i></button>
    <button id="btn-@id" class="p-2 bg-blue-500 text-white rounded"
            title="@baixar"
            onclick="actionDownload('@id', '@branch')"><i class="fas fa-download"></i> Baixar</button>
  </td>
</tr>
Z7p9UDGyuj============================================================

[index.html:src\main\resources\pages\index.html]
Z7p9UDGyuj============================================================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
  <style>
      .cx-title {
          @apply block text-gray-800 bg-gray-100 rounded border-b-2 p-2 font-bold;
      }
      .active-row {
          background-color: #c6f6d552;
      }

      .cx-title {
          @apply block text-gray-800 bg-gray-100 rounded border-b-2 p-2 font-bold;
      }

      .menu-top {
          position: sticky;
          top: 0;
          z-index: 10;
      }

      @keyframes dots {
          0%   {content: ".";}
          33%  {content: "..";}
          66%  {content: "...";}
          100% {content: ".";}
      }

      /* Aplica a anima├º├úo para os elementos de dentro do span `td` */
      .table-row td span {
          animation: dots 4s infinite; /* nome, dura├º├úo, repeti├º├úo */
      }

      /* ----- Progress Bar ----- */

      .data {
          position: relative;
          z-index: 1;
      }

      .progress-bar {
          position: absolute;
          height: 100%;
          background-color: red;
      }

      /* -------------------- */

      /* @@modal */
  </style>
  <script src="https://unpkg.com/htmx.org@1.8.0"></script>
  <title>CDT Tools 1.0</title>
</head>
<body class="bg-gray-200 text-gray-800">

<!-- ----- -->
<!-- MODAL -->
<!-- ----- -->
<div id="modal" class="modal">
  <div class="modal-content">
    <!-- Modal: Cabe├ºalho -->
    <div class="modal-header font-semibold">
      <h2 id="modal-title">T├¡tulo</h2>
    </div>
    <!-- Modal: corpo -->
    <div class="modal-body">
      <p id="modal-question" class="mb-4 mt-4"></p>
    </div>
    <!-- Modal: botoes -->
    <div class="modal-buttons text-yellow-400">
      <button id="confirm-btn" class="border rounded px-3 pl-10 py-2 bg-blue-500 hover:bg-blue-300 font-bold">Confirm</button>
      <button id="cancel-btn" class="border rounded px-3 pl-10 py-2 bg-blue-500 hover:bg-blue-300 font-bold">Cancel</button>
    </div>
  </div>
</div>

<div class="container mx-auto my-5 p-5">
  <div class="w-full">
    <span class="font-bold text-blue-700 mb-1 ml-1 py-2 text-lg">CDT Tools 1.0</span>

    <ul class="flex border-b text-xl bg-gray-300 p-2 menu-top">
      <li data-tab-target="#tab1" class="tab-control py-1 px-4 cursor-pointer -mb-px mr-1 bg-blue-500 text-white">Baixar</li>
      <li data-tab-target="#tab2" class="tab-control py-1 px-4 cursor-pointer -mb-px mr-1 bg-white text-blue-500">Compilar</li>
      <li data-tab-target="#tab3" class="tab-control py-1 px-4 cursor-pointer -mb-px mr-1 bg-white text-blue-500">Servidor</li>
    </ul>

    <div id="tab1" class="tab-content py-2 border-b-2">
      @@baixar
    </div>
    <div id="tab2" class="tab-content hidden py-2  border-b-2">
      @@compilar
    </div>
    <div id="tab3" class="tab-content hidden py-2  border-b-2">
      @@servidor
    </div>
  </div>
</div>
<!-- HandleBars -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/4.7.7/handlebars.min.js"></script>

@@templates

<script>
    // renderiza o script principal:
    //@@main

    // renderiza o script da p├ígina index
    //@@index-source

    // implementa├º├úo de modais
    //@@panelmodals

    window.onload = function () {
        // chama o arquivo onload.js que cont├®m todas as chamadas de js que precisam ser executadas quando a tela estiver carregada
        //@@onload
    }
</script>
</body>
</html>
Z7p9UDGyuj============================================================

[templates.html:src\main\resources\pages\templates.html]
Z7p9UDGyuj============================================================
<!-- mostra a branch atual na tela de baixar -->
<script id="branch-template" type="text/x-handlebars-template">
  <span class="block text-gray-800 bg-gray-100 rounded border-b-2 p-2">
    <button class="p-2 bg-green-500 text-white rounded" onclick="openModal()" title="Atualizar">
      <i class="fas fa-sync"></i> Atualiza├º├úo completa
    </button>
    <button class="p-2 bg-blue-500 text-white rounded" onclick="loadBranchAtual()" title="Atualizar">
      <i class="fas fa-sync"></i>
    </button>
    <span class="font-bold">Branch atual: </span>{{name}}
  </span>
  <div class="mb-6">
    <table class="w-full table-auto bg-white">
      <thead>
      <tr class="bg-blue-600 text-yellow-400">
        <th class="border px-3 py-2">M├│dulo</th>
        <th class="border px-3 py-2">POM Version</th>
        <th class="border px-3 py-2">Core Version</th>
      </tr>
      </thead>
      <tbody>
      <tr class="table-row">
        <td class="border px-3 py-2"><span class="font-bold">Core</span></td>
        <td class="border px-3 py-2"><span>{{corePom}}</span></td>
        <td class="border px-3 py-2"><span>{{coreCore}}</span></td>
      </tr>
      <tr class="table-row">
        <td class="border px-3 py-2"><span class="font-bold">Batch</span></td>
        <td class="border px-3 py-2"><span>{{batchPom}}</span></td>
        <td class="border px-3 py-2"><span>{{batchCore}}</span></td>
      </tr>
      <tr class="table-row">
        <td class="border px-3 py-2"><span class="font-bold">Web</span></td>
        <td class="border px-3 py-2"><span>{{webPom}}</span></td>
        <td class="border px-3 py-2"><span>{{webCore}}</span></td>
      </tr>
      <tr class="table-row">
        <td class="border px-3 py-2"><span class="font-bold">Shell</span></td>
        <td class="border px-3 py-2"><span>{{shellVersion}}</span></td>
        <td class="border px-3 py-2"><span>-</span></td>
      </tr>
      </tbody>
    </table>
  </div>
</script>

<!-- Lista as demandas que s├úo pesquisas no campo de pesquisa da p├ígina inicial -->
<script id="branch-lista-template" type="text/x-handlebars-template">
  {{#each branches}}
    <tr class="table-row cursor-pointer" id="{{id}}">
      <!-- branch -->
      <td class="border py-2 font-semibold">{{name}}</td>
      <!-- core -->
      <td class="border px-3 py-2 fixed-width">
        <div class="relative pt-1">
          <div class="flex mb-2 items-center justify-between">
            <div>
            <span class="text-xs font-bold">
              {{core}}
            </span>
            </div>
            <div class="text-right">
              <span class="mod-core-percent text-xs font-bold inline-block text-blue-600"></span>
            </div>
          </div>
          <div class="mod-core-bar-color overflow-hidden h-2 mb-4 text-xs flex rounded bg-white">
            <div style="width:0%" class="mod-core-bar shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500"></div>
          </div>
        </div>
      </td>
      <!-- batch -->
      <td class="border px-3 py-2 fixed-width">
        <div class="relative pt-1">
          <div class="flex mb-2 items-center justify-between">
            <div>
            <span class="text-xs font-bold">
              {{batch}}
            </span>
            </div>
            <div class="text-right">
              <span class="mod-batch-percent text-xs font-bold inline-block text-blue-600"></span>
            </div>
          </div>
          <div class="mod-batch-bar-color overflow-hidden h-2 mb-4 text-xs flex rounded bg-white">
            <div style="width:0%" class="mod-batch-bar shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500"></div>
          </div>
        </div>
      </td>
      <!-- web -->
      <td class="border px-3 py-2 fixed-width">
        <div class="relative pt-1">
          <div class="flex mb-2 items-center justify-between">
            <div>
            <span class="text-xs font-bold">
              {{web}}
            </span>
            </div>
            <div class="text-right">
              <span class="mod-web-percent text-xs font-bold inline-block text-blue-600"></span>
            </div>
          </div>
          <div class="mod-web-bar-color overflow-hidden h-2 mb-4 text-xs flex rounded bg-white">
            <div style="width:0%" class="mod-web-bar shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500"></div>
          </div>
        </div>
      </td>
      <!-- shell -->
      <td class="border px-3 py-2 fixed-width">
        <div class="relative pt-1">
          <div class="flex mb-2 items-center justify-between">
            <div>
            <span class="text-xs font-bold">
              {{shell}}
            </span>
            </div>
            <div class="text-right">
              <span class="mod-shell-percent text-xs font-bold inline-block text-blue-600"></span>
            </div>
          </div>
          <div class="mod-shell-bar-color overflow-hidden h-2 mb-4 text-xs flex rounded bg-white">
            <div style="width:0%" class="mod-shell-bar shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-blue-500"></div>
          </div>
        </div>
      </td>
      <td class="border px-3 py-2 fixed-width">
        <button id="btn-val-{{id}}" class="p-2 bg-green-500 text-white rounded"
                title="Validar a branch: {{name}}"
                onclick="actionValidateBranch('{{id}}', '{{name}}')"><i class="fas fa-check"></i></button>
        <button id="btn-{{id}}" class="p-2 bg-blue-500 text-white rounded"
                title="{{baixar}}"
                onclick="actionDownload('{{id}}', '{{name}}')"><i class="fas fa-download"></i> Baixar</button>
      </td>
    </tr>
  {{/each}}
</script>
Z7p9UDGyuj============================================================

[teste.html:src\main\resources\pages\teste.html]
Z7p9UDGyuj============================================================
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tailwind Alert with Fade</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <style>
      .fade-enter {
          opacity: 0;
          transition: opacity 0.5s;
      }

      .fade-enter-active {
          opacity: 1;
      }

      .fade-exit {
          opacity: 1;
          transition: opacity 0.5s;
      }

      .fade-exit-active {
          opacity: 0;
      }

      .overlay {
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          background: rgba(0, 0, 0, 0.5);
          display: flex;
          align-items: center;
          justify-content: center;
          z-index: 50;
      }

      .blur-effect {
          filter: blur(1px);
          -webkit-filter: blur(1px);
      }
  </style>
</head>

<body class="bg-gray-100 flex items-center justify-center min-h-screen">
<div id="content">
  <span>
    alskmdlaskmdl kamsdlk masdl kmasldkm aslkdm alsdnm aksjnd kasjnd kjasndk ansdk ansdkl ansdkl jnasdkl nasdkljn askldn askldn ajskld
    alsd alskdm laskmd laskmd laskmd lkasmd laksmdl aksmdl kasdl amsd asld askldm akjlsnkasnxkalsjnx kjasnxkj ansdkj nasdkjn askjdn aksjnd
    akldnm kasndk jansdk jnasdkj nasdkjn askjdn askjd knasd ak sjdn kajsnd kjadk jansdkj naskdjn askjnd kasjdn kasjnd kjanskjasioxaoweidaois
    oasdn oiamdo qimwodm aosim oi3mdo qimwio
  </span>
  <br>
  <br>
  <br>
  <br>
  <button id="showAlertButton"
          class="bg-blue-500 text-white px-4 py-2 rounded-lg shadow-lg hover:bg-blue-600">
    Show Alert
  </button>
</div>
<!-- alert -->
<div id="alertContainer2" class="hidden">
  <span>
    Valor de entrada.<br> Valor de dados <strong>Dados</strong>
  </span>
</div>

<div id="alertContainer" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
  <strong class="font-bold">Holy smokes!</strong>
  <span class="block sm:inline">Something seriously bad happened.</span>
  <span class="absolute top-0 bottom-0 right-0 px-4 py-3">
    <svg class="fill-current h-6 w-6 text-red-500" role="button" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><title>Close</title><path d="M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1 1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10 8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0 1.698z"/></svg>
  </span>
</div>

<script>
    document.getElementById('showAlertButton').addEventListener('click', function() {
        const alertContainer = document.getElementById('alertContainer');
        const alertBox = document.createElement('div');
        alertBox.id = 'alert';
        alertBox.classList.add('max-w-sm', 'w-full', 'bg-blue-500', 'text-white', 'p-4', 'rounded-lg', 'shadow-lg', 'fade-enter');
        alertBox.setAttribute('role', 'alert');

        alertContainer.classList.add('overlay');
        alertContainer.classList.remove('hidden');
        alertContainer.appendChild(alertBox);

        document.getElementById('content').classList.add('blur-effect');

        // Fade in effect
        setTimeout(() => {
            alertBox.classList.remove('fade-enter');
            alertBox.classList.add('fade-enter-active');
        }, 10); // Slight delay to ensure the class is added for the transition

        // Set a timeout for the alert to fade out and be removed after 3 seconds
        setTimeout(() => {
            alertBox.classList.remove('fade-enter-active');
            alertBox.classList.add('fade-exit');

            // After the fade-out transition is complete, remove the element from the DOM
            setTimeout(() => {
                alertBox.classList.add('fade-exit-active');
            }, 10); // Slight delay to ensure the class is added for the transition

            // Removing alert after the fade-out animation
            setTimeout(() => {
                alertContainer.classList.remove('overlay');
                alertContainer.classList.add('hidden');
                alertContainer.removeChild(alertBox);
                document.getElementById('content').classList.remove('blur-effect');
            }, 500); // Match this duration with the opacity transition duration
        }, 3000); // 3-second delay before starting to fade out
    });
</script>
</body>

</html>
Z7p9UDGyuj============================================================

[websocket.html:src\main\resources\pages\websocket.html]
Z7p9UDGyuj============================================================
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Simple Chat</title>
</head>
<body>
<h1>Chat Room</h1>
<div id="chatbox" style="border:1px solid #ccc; height:300px; overflow:auto;"></div>
<br/>
<input type="text" id="messageInput" placeholder="Type a message..."/>
<button onclick="sendMessage()">Send</button>
<script type="text/javascript">
    const chatbox = document.getElementById('chatbox');
    const messageInput = document.getElementById('messageInput');

    const ws = new WebSocket('ws://localhost:9092/');

    ws.onopen = function() {
        console.log('Connected to the chat server');
    };

    ws.onmessage = function(event) {
        const message = event.data;
        const messageElement = document.createElement('div');
        messageElement.textContent = message;
        chatbox.appendChild(messageElement);
        chatbox.scrollTop = chatbox.scrollHeight;
    };

    ws.onclose = function() {
        console.log('Disconnected from the chat server');
    };

    function sendMessage() {
        const message = messageInput.value;
        ws.send(message);
        messageInput.value = '';
    }
</script>
</body>
</html>
Z7p9UDGyuj============================================================

[flowchart.js:src\main\resources\scripts\flowchart.js]
Z7p9UDGyuj============================================================
//--script
document.addEventListener('DOMContentLoaded', () => {
    const grid = document.getElementById('grid');
    const svg = document.querySelector('.svg-connector');
    const selectedComponent = document.getElementById('selectedComponent');
    const searchBar = document.getElementById('searchBar');
    const searchInput = document.getElementById('searchInput');
    const searchResults = document.getElementById('searchResults');

    const searchTerms = [
        'BATCH_TEST_INFRA',
        'BATCH_CRIACAO_CONTRATOS',
        'BATCH_LIBERACAO_RECURSO',
        'BATCH_REEMBOLSO_GERACAO_PARCELA',
        'BATCH_CONTABILIZAR_PARCELA_VENCIMENTO',
        'BATCH_PARCELA_VENCIDA_NAO_RECEBIDA',
        'BATCH_GERAR_ARQUIVO_SIACC_DEBITO',
        'BATCH_GERAR_ARQUIVO_SIACC_CREDITO'
    ];
    const modalContainer = document.querySelector('.grid-container');

    let currentDraggingBox = null;
    let offsetX, offsetY;
    let gridPosition = { top: 0, left: 0 };
    let selectedBox = null;
    let isSearchBarActive = false;

    function initiateDragging(box) {
        box.addEventListener('mousedown', (e) => {
            if (isSearchBarActive) return; // prevene o arrasto se a barra de pesquisa estiver ativa
            if (e.target.classList.contains('connector-point')) return; // previne o movimento se o conector estiver ativo.

            currentDraggingBox = box;
            offsetX = e.clientX - parseInt(box.style.left);
            offsetY = e.clientY - parseInt(box.style.top);
            box.classList.add('grabbing');

            // seleciona a box
            selectBox(box);

            document.addEventListener('mouseup', () => {
                if (currentDraggingBox) {
                    currentDraggingBox.classList.remove('grabbing');
                    currentDraggingBox = null;
                    updateConnector();
                }
            }, { once: true });
        });

        box.addEventListener('mousemove', (e) => {
            if (currentDraggingBox && !isSearchBarActive) {
                currentDraggingBox.style.left = `${e.clientX - offsetX}px`;
                currentDraggingBox.style.top = `${e.clientY - offsetY}px`;
                updateConnector();
            }
        });

        box.addEventListener('click', (e) => {
            selectBox(box);
        });
    }

    document.querySelectorAll('.modal-box').forEach(box => initiateDragging(box));

    grid.addEventListener('mousedown', (e) => {
        if (!e.target.closest('.modal-box') && !isSearchBarActive) {
            currentDraggingBox = grid;
            offsetX = e.clientX;
            offsetY = e.clientY;
            document.body.style.cursor = 'grabbing';

            // desmarca uma box
            deselectBox();

            document.addEventListener('mouseup', () => {
                if (currentDraggingBox === grid) {
                    document.body.style.cursor = 'default';
                    currentDraggingBox = null;
                }
            }, { once: true });
        }
    });

    grid.addEventListener('mousemove', (e) => {
        if (currentDraggingBox === grid && !isSearchBarActive) {
            const deltaX = e.clientX - offsetX;
            const deltaY = e.clientY - offsetY;

            gridPosition.left += deltaX;
            gridPosition.top += deltaY;

            document.querySelectorAll('.modal-box').forEach(box => {
                box.style.left = `${parseInt(box.style.left) + deltaX}px`;
                box.style.top = `${parseInt(box.style.top) + deltaY}px`;
            });

            offsetX = e.clientX;
            offsetY = e.clientY;

            updateConnector();
        }
    });

    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && isSearchBarActive) {
            closeSearchBar();
            return;
        }

        if (isSearchBarActive) return; // previne o movimento quando uma barra de pesquisa est├í ativa

        let moveStep = 30; // aumenta o scrolling
        switch(e.key) {
            case 'ArrowUp':
            case 'w':
                moveGrid(0, -moveStep);
                break;
            case 'ArrowDown':
            case 's':
                moveGrid(0, moveStep);
                break;
            case 'ArrowLeft':
            case 'a':
                moveGrid(-moveStep, 0);
                break;
            case 'ArrowRight':
            case 'd':
                moveGrid(moveStep, 0);
                break;
            case 'Delete':
                removeSelectedComponent();
                break;
            case ' ':
                if (searchBar.style.display === 'block') {
                    closeSearchBar();
                } else {
                    openSearchBar();
                }
                e.preventDefault(); // previne a a├º├úo padr├úo da barra de espa├ºo
                break;
        }
    });

    searchInput.addEventListener('input', (e) => {
        const value = e.target.value.toLowerCase();
        searchResults.innerHTML = '';

        const filteredTerms = searchTerms.filter(term => term.toUpperCase().includes(value.toUpperCase()));
        filteredTerms.forEach(term => {
            const div = document.createElement('div');
            div.classList.add('search-result-item');
            div.textContent = term;
            div.addEventListener('click', () => {
                createModalBox(term);
                closeSearchBar();
            });
            searchResults.appendChild(div);
        });

        searchResults.classList.toggle('hidden', filteredTerms.length === 0);
    });

    searchInput.addEventListener('focus', () => {
        searchResults.classList.remove('hidden');
    });

    searchInput.addEventListener('blur', () => {
        setTimeout(() => searchResults.classList.add('hidden'), 200);
    });

    function selectBox(box) {
        // desmarca a box anterior
        if (selectedBox) {
            selectedBox.classList.remove('selected');
        }
        // marca o componente selecionado
        box.classList.add('selected');
        selectedBox = box;

        // atualiza o sidebar com o componente selecionado
        selectedComponent.textContent = box.querySelector('h3').textContent;
        selectedComponent.setAttribute('data-box-id', box.id);
    }

    function deselectBox() {
        if (selectedBox) {
            selectedBox.classList.remove('selected');
            selectedBox = null;
            selectedComponent.textContent = 'Nenhum';
        }
    }

    function updateConnector() {
        const box1 = document.getElementById('box1');
        const box2 = document.getElementById('box2');
        const connector1 = document.getElementById('end-box1');
        const connector2 = document.getElementById('sc-box2');
        drawConnection(connector1, connector2);
    }

    function drawConnection(startConnector, endConnector) {
        const startRect = startConnector.getBoundingClientRect();
        const endRect = endConnector.getBoundingClientRect();

        const startX = startRect.left + window.scrollX + startRect.width / 2;
        const startY = startRect.top + window.scrollY + startRect.height / 2;
        const endX = endRect.left + window.scrollX + endRect.width / 2;
        const endY = endRect.top + window.scrollY + endRect.height / 2;

        const path = `M ${startX},${startY} C ${startX + 100},${startY} ${endX - 100},${endY} ${endX},${endY}`;

        svg.innerHTML = `<path d="${path}" stroke="blue" fill="transparent" stroke-width="2"/>`;
    }

    function moveGrid(deltaX, deltaY) {
        gridPosition.left += deltaX;
        gridPosition.top += deltaY;

        document.querySelectorAll('.modal-box').forEach(box => {
            box.style.left = `${parseInt(box.style.left) + deltaX}px`;
            box.style.top = `${parseInt(box.style.top) + deltaY}px`;
        });

        updateConnector();
    }

    function openSearchBar() {
        isSearchBarActive = true;
        searchBar.style.display = 'block';
        searchInput.focus();
    }

    function closeSearchBar() {
        isSearchBarActive = false;
        searchBar.style.display = 'none';
        searchInput.value = '';
        searchResults.innerHTML = '';
        searchResults.classList.add('hidden');
    }

    function createModalBox(name) {
        const template = document.getElementById('modal-content-template');

        // cria o modal box
        const modalBox = document.createElement('div');
        modalBox.classList.add('modal-box');
        modalBox.style.top = '200px';
        modalBox.style.left = '200px';

        // define o innerHTML do modal box com base no conte├║do do template
        if (template) {
            modalBox.innerHTML = template.innerHTML;

            // caso precise alterar o conte├║do dinamicamente
            const title = modalBox.querySelector('h3');
            if (title) {
                title.textContent = name;
            }
        }

        modalContainer.appendChild(modalBox);

        // adiciona eventos de arrastar ao novo modal box
        initiateDragging(modalBox);
    }

    function removeSelectedComponent() {
        const selectedComponent = document.getElementById('selectedComponent');
        const boxID = selectedComponent.getAttribute('data-box-id');

        if (boxID) {
            const box = document.getElementById(boxID);
            // remove a box criada
            box.remove();
            // atualiza as outras informa├º├Áes
            selectedComponent.textContent = 'Nenhum';
            selectedComponent.removeAttribute('data-box-id');
        }
    }

    document.addEventListener('click', (e) => {
        if (isSearchBarActive && !searchBar.contains(e.target) && !e.target.closest('.modal-box')) {
            closeSearchBar();
        }
    });

    updateConnector();
});
Z7p9UDGyuj============================================================

[index-source.js:src\main\resources\scripts\index-source.js]
Z7p9UDGyuj============================================================
//--- script --

/////////////////
// tabs
/////////////////
const tabs = Array.from(document.querySelectorAll(".tab-control"));
const contentPanels = Array.from(document.querySelectorAll(".tab-content"));

tabs.forEach(tab => {
    tab.addEventListener('click', () => {
        // remove o estado de "active" das tabs
        tabs.forEach(tab => {
            tab.classList.remove('bg-blue-500', 'text-white')
            tab.classList.add('bg-white', 'text-blue-500');
        });

        // esconde o conte├║do de todas as tabs
        contentPanels.forEach(panel => panel.classList.add('hidden'));

        // mostra o conte├║do da tab clicada
        document.querySelector(tab.dataset.tabTarget).classList.remove('hidden');
        tab.classList.add('bg-blue-500', 'text-white');
        tab.classList.remove('bg-white', 'text-blue-500');
    });

    /////////////////
    // baixar - tabela de demandas
    /////////////////
    document.querySelectorAll('.table-row').forEach(row => {
        row.addEventListener('click', () => {
            // remove o estado de "active" de todas as rows
            document.querySelectorAll('.table-row').forEach(row => row.classList.remove('active-row'));

            // marca a row clicada como "active"
            row.classList.add('active-row');

            // obt├¬m o detalhe da linha selecionada
            const rowData = Array.from(row.children).map(cell => cell.textContent).join(', ');

            // atualiza a div de resultado
            document.getElementById('resultado').textContent = `Selecionada: ${rowData}`;
        });
    });
});

/**
 * Carrega a branch atual.
 */
function loadBranchAtual() {
    fetchTemplate(HTTPMethod.GET, '/branch', 'branch-template', 'branch-atual', null);
}

function actionPesquisarBranches() {
    let branchValue = document.getElementById('txt-pesquisar').value;
    let params = "branch=" + branchValue

    // demanda-anim .anim-row
    // executa anima├º├úo
    startAnimation('#demandas .anim-row');
    fetchTemplate(HTTPMethod.POST, '/pesquisar', 'branch-lista-template', 'demandas', params, () => stopAnimation());
}

function processarPesquisaBranch(event) {
    if (event.target.id === 'btn-pesquisar' && event.detail.successful) {
        var response = event.detail.xhr.responseText;
        console.log("Response PESQUISAR: " + response);
        var data = JSON.parse(response);

        // Compila o template Handlebars e atualiza o elemento
        var source = document.getElementById('demandas-template').innerHTML;
        var template = Handlebars.compile(source);
        var html = template(data);
        document.getElementById('demandas').innerHTML = html;
    } else if (event.detail.target.id === 'btn-pesquisar') {
        console.error('Erro ao processar a requisi├º├úo:', event.detail);
    }
}

/**
 * Baixa a branch escolhida pelo usu├írio.
 *
 * @param id da linha onde encontra-se a branch
 * @param branch nome da branch
 */
function actionDownload(id, branch) {
    let msg = createMessage(MsgType.DOWNLOAD);
    let content = {
        id: id,
        branch: branch,
        module: null,
        percent: 0
    };

    // prepara as barras de progresso
    prepareBars(id, 'Validando...');

    // envia para o servidor o pedido para baixar a demanda
    msg = createContent(msg, content);
    sendMessage(msg);
}

function handleDownload(data) {
    const status = data.status;
    const content = JSON.parse(data.content);
    const id = content.id;
    const branch = content.branch;
    const module = ".mod-" + content.module;
    const percent = content.percent;

    if (StatusType.RUNNING === status) {
        console.log("RUNNING: " + branch + " - " + module + " - " + percent);
        let isValid = window.localStorage.getItem("branch-validar");
        if (isValid && isValid === "true") {
            doHTML('#btn-' + id, `<i class="fas fa-spinner fa-spin loading-icon"></i> Baixando...`);
            setValorPorcentagemAll(id, '0%');
            window.localStorage.setItem("branch-validar", "false");
        }

        let row = document.getElementById(id);

        // atualiza a porcentagem da barra
        row.querySelector(module + '-bar').style.width = percent + '%';
        // atualiza o texto com a porcentagem
        row.querySelector(module + '-percent').innerText = percent + '%';

    } else if (StatusType.FINISHED === status) {
        console.log("FINISHED");
        removeItem('branch-validar');
        resetProgressBars(id);
        loadBranchAtual();

        let resultado = modalDownload;
        resultado.question = `A branch <strong>${branch}</strong> foi baixada com sucesso!`;
        openModal(resultado);
    } else if (StatusType.ERROR === status) {
        console.log("ERROR");
        removeItem('branch-validar');
        resetProgressBars(id);
        loadBranchAtual();

        let resultado = modalDownload;
        let erro = `Ocorreu um erro ao baixar a branch <strong>${branch}</strong>!<br><br>`;
        erro += data.extra;
        resultado.question = erro;
        openModal(resultado);
    }
}

/**
 * Coloca o texto do valor do porcentagem nas barras.
 *
 * @param id da linha
 * @param valor textual que ├® mostrado para o usu├írio.
 */
function setValorPorcentagemAll(id, valor) {
    doHTML(`#`+ id + ` .mod-core-percent`, valor);
    doHTML(`#`+ id + ` .mod-batch-percent`, valor);
    doHTML(`#`+ id + ` .mod-web-percent`, valor);
    doHTML(`#`+ id + ` .mod-shell-percent`, valor);
}

/**
 * Substitui as corres das barras.
 *
 * @param id da linha
 * @param oldclass
 * @param newclass
 */
function setColorBars(id, oldclass, newclass) {
    classReplace(`#`+ id + ` .mod-core-bar-color`, oldclass, newclass);
    classReplace(`#`+ id + ` .mod-batch-bar-color`, oldclass, newclass);
    classReplace(`#`+ id + ` .mod-web-bar-color`, oldclass, newclass);
    classReplace(`#`+ id + ` .mod-shell-bar-color`, oldclass, newclass);
}

/**
 * Prepara as barras para o in├¡cio do processo de download.
 *
 * @param id linha que ser├í processado o download.
 * @param text inicial no processamento do download.
 */
function prepareBars(id, text) {
    window.localStorage.setItem("branch-validar", "true");
    classReplace('#' + id + ' .mod-core-bar-color', 'bg-white', 'bg-blue-200');
    classReplace('#' + id + ' .mod-batch-bar-color', 'bg-white', 'bg-blue-200');
    classReplace('#' + id + ' .mod-web-bar-color', 'bg-white', 'bg-blue-200');
    classReplace('#' + id + ' .mod-shell-bar-color', 'bg-white', 'bg-blue-200');
    document.querySelector(`#${id} .mod-core-percent`).innerText = text;
    document.querySelector(`#${id} .mod-batch-percent`).innerText = text;
    document.querySelector(`#${id} .mod-web-percent`).innerText = text;
    document.querySelector(`#${id} .mod-shell-percent`).innerText = text;
    disableElements('demandas', DOMElementType.BUTTON, true);
    doHTML('#btn-' + id, `<i class="fas fa-spinner fa-spin loading-icon"></i> Validando...`);
}

/**
 * Reseta as barras de progresso para o estado inicial anterior ao estado de valida├º├úo ou de download das demandas.
 *
 * @param id da row da demanda a ser resetada na tabela.
 */
function resetProgressBars(id) {
    document.querySelector('#' + id + ' .mod-core-bar').style.width = '0%';
    document.querySelector('#' + id + ' .mod-batch-bar').style.width = '0%';
    document.querySelector('#' + id + ' .mod-web-bar').style.width = '0%';
    document.querySelector('#' + id + ' .mod-shell-bar').style.width = '0%';
    setValorPorcentagemAll(id, '');
    setColorBars(id, 'bg-blue-200', 'bg-white');
    doHTML('#btn-' + id, `<i class="fas fa-download"></i> Baixar`);
    disableElements('demandas', DOMElementType.BUTTON, false);
}

////////////////////
// requests, eventos e loads
////////////////////

document.body.addEventListener('htmx:beforeRequest', function(e) {
    if (timer) clearInterval(timer);
    startAnimation();
});

document.body.addEventListener('htmx:afterOnLoad', function(e) {
    stopAnimation();
});

// quando os elementos DOMs estiverem carregados e validados (n├úo precisa estar toda carregada)
window.addEventListener('DOMContentLoaded', (event) => {
    document.getElementById('txt-pesquisar').addEventListener('keyup', function(event) {
        if (event.key === 'Enter') {
            document.getElementById('btn-pesquisar').click();
            event.preventDefault();
        }
    });
});

let modalBranch =
    {
        title: 'Branch Atual',
        question: 'Deseja carregar todos os dados da branch atual? Essa opera├º├úo poder├í durar at├® um minuto!',
        confirm: {
            text: 'Sim',
            callback: function() {
                closeModal();
            }
        },
        cancel: {
            text: 'N├úo',
            callback: function() {
                closeModal();
            }
        }
    };

let modalDownload = {
    title: 'Download',
    question: 'A branch foi baixada com sucesso!',
    confirm: {
        text: 'Sim',
        callback: function() {
            closeModal();
        }
    }
};
Z7p9UDGyuj============================================================

[main.js:src\main\resources\scripts\main.js]
Z7p9UDGyuj============================================================
//--- script --

// import do script de tipos
//@@types

let timer;
let rowsTimer = [];
let modules = {};

/////////////
// WebSocket
/////////////

const ws = new WebSocket('ws://localhost:9092/')

ws.onopen = () => {
    console.log('[CONECTADO] WebSocket foi conectado com o servidor com sucesso!');
}

ws.onclose = () => {
    console.log('[DESCONECTADO] WebSocket foi desconectado com o servidor!');
}

ws.onmessage = (e) => {
    // recebendo as msgs do servidor
    console.log(`Recebendo Mensagem: ${e.data}`);
    let msg = JSON.parse(e.data);

    if (MsgType.DOWNLOAD === msg.type) {
        handleDownload(msg);
    }
}

/**
 * Envia uma mensagem via web socket para o servidor.
 *
 * @param object em estrutura Message.
 */
function sendMessage(object) {
    if (object !== null) {
        if (isObject(object)) {
            ws.send(JSON.stringify(object));
        } else {
            ws.send(String(object));
        }
    }
}

/**
 * Verifica se a vari├ível passada ├® do tipo objeto puro. Um objeto puro n├úo pode ser um array.
 *
 * @param variable informada.
 * @returns {boolean} verdadeiro se a vari├ível for um objeto puro.
 */
function isPlainObject(variable) {
    return variable !== null && typeof variable === 'object' && !Array.isArray(variable);
}

/**
 * Verifica se a vari├ível ├® do tipo fun├º├úo (geralmente fun├º├Áes para callback)
 *
 * @param variable
 * @returns {boolean}
 */
function isFunction(variable) {
    return !isNull(variable) && typeof variable === 'function';
}

/**
 * Verifica se a vari├ível passada ├® do tipo objeto. Um objeto pode ser tamb├®m um array.
 *
 * @param variable informada.
 * @returns {boolean} verdadeiro se a vair├ível for um objeto.
 */
function isObject(variable) {
    return variable !== null && typeof variable === 'object'
}

/**
 * Verifica se a vari├ível ├® nula. Para ser nula ela pode atender uma das condi├º├Áes:
 * - null (sem refer&encia)
 * - undefined (indefinido)
 * - 'undefined' (existe, por├®m, em algum lugar ela recebeu um valor indefinido
 *
 * @param variable
 * @returns {boolean}
 */
function isNull(variable) {
    return variable === null || variable === undefined || variable === 'undefined';
}

/**
 * Cria uma mensagem do formato que ├® usado pelo websocket.
 *
 * @param msgType ├® um objeto do tipo MsgType.
 * @returns {{type, content: null, status: string}}
 */
function createMessage(msgType) {
    return {
        status: StatusType.STARTED,
        type: msgType,
        content: null,
        extra: null,
    };
}

/**
 * Cria um conte├║do atrelado a uma mensagem que ser├í usada pelo websocket.
 *
 * @param message no formato Message.
 * @param content no formato livre.
 */
function createContent(message, content) {
    if (isPlainObject(message) && isPlainObject(content)) {
        if (!message.hasOwnProperty('type')) {
            throw new Error('[ERRO]: N├úo existe um campo "type" do tipo MsgType definido.');
        }

        if (!message.hasOwnProperty('status')) {
            message.status = StatusType.STARTED;
        }

        if (!message.hasOwnProperty('extra')) {
            message.extra = null;
        }

        // aplicando o conte├║do no formato string o campo content
        message.content = JSON.stringify(content);
        return message;
    } else {
        throw new Error('[ERRO]: Componentes de Message ou Content est├úo nulos.');
    }

}

/**
 * Atualiza um template com os dados providos de uma URL e renderiza no ID do target informado.
 *
 * @param baseURL que busca os dados necess├írios em formato JSON.
 * @param methodType m├®todo HTTP para os tipos GET ou POST.
 * @param templateName que ser├í preenchido com os dados providos da URL.
 * @param target o alvo que ser├í renderizado.
 * @param params par├ómetros que ser├úo passados ├á requisi├º├úo, se existirem.
 * @params se a fun├º├úo callback for informada, ela ser├í executada logo ap├│s a execu├º├úo do response.
 */
async function fetchTemplate(methodType, baseURL, templateName, target, params, callback) {
    const url = new URL(window.location.origin + baseURL);
    let response;

    try {
        if (HTTPMethod.GET === methodType.toUpperCase()) {
            if (params !== null) {
                Object.keys(params).forEach(key => url.searchParams.append(key, params[key]));
            }
            response = await fetch(url);
        } else if (HTTPMethod.POST === methodType.toUpperCase()) {
            let p = null;

            if (!isNull(params) && isPlainObject()) {
                p = JSON.stringify(params);
            } else if (!isNull(params)) {
                p = String(params);
            }

            console.log("Params: " + p);
            response = await fetch(url, {
                method: HTTPMethod.POST,
                headers: {
                    'Content-Type': 'application/json'
                },
                body: p
            });

        }

        // renderiza a resposta como template do Handlebars
        const data = await response.json();
        console.log(`Response: ${JSON.stringify(data)}`);

        let template = Handlebars.compile(document.getElementById(templateName).innerHTML);
        document.getElementById(target).innerHTML = template(data);

        if (isFunction(callback)) {
            callback();
        }

    } catch (e) {
        console.error(`@error[fetchTemplate]: Ocorreu um erro na requisi├º├úo: ${e}`);
    }
}

function startAnimation(selector) {
    const rows = Array.from(document.querySelectorAll(selector));

    rows.forEach(row => {
        row.classList.remove('hidden');
        let dots = "";
        let rowTimer = setInterval(function() {
            dots += ".";
            if (dots.length > 3) dots = ".";

            let cells = row.querySelectorAll(".anim-dot");
            cells.forEach(cell => {
                cell.innerText = dots;
            });
        }, 300);
        rowsTimer.push(rowTimer);
    });
}

function stopAnimation(selector) {
    const rows = Array.from(document.querySelectorAll(selector));

    // limpa os intervalos
    rowsTimer.forEach(row => {
        if (row) clearInterval(row);
    });

    // deixa os elementos escondidos
    rows.forEach(row => {
        row.classList.add('hidden');
    });
}

/////////////
// MODAL
/////////////

// id da modal
let modal = document.getElementById("modal");
let isModalProcessing = false;

// quando clica em qualquer lugar fora da modal, ela ├® fechada
window.onclick = function(e) {
    if (e.target === modal) {
        // a modal ├® renderizada em toda a ├írea ocup├ível, portanto, ao clicar em qualquer lugar de fora, ir├í fechar, se puder fechar
        if (!isModalProcessing) {
            modal.style.display = "none";
        }
    }
}

/**
 * Registra uma modal que poder├í ser chamada com openModal().
 *
 * @param opts s├úo as op├º├Áes de configura├º├úo para a modal.
 */
function registerModal(opts) {
    let o = opts;

    const title = o.title;
    const question = o.question;

    const confirmText = o.confirm.text;
    const confirmCallback = o.confirm.callback;

    let cancelText = null;
    let cancelCallback = null;
    let hasCancel = false;

    if (o.cancel) {
        cancelText = o.cancel.text;
        cancelCallback = o.cancel.callback;
        hasCancel = true;
    }

    document.getElementById('modal-title').innerHTML = title;
    document.getElementById('modal-question').innerHTML = question;

    const confirmBtn = document.getElementById('confirm-btn');
    confirmBtn.innerHTML = confirmText;
    confirmBtn.addEventListener('click', () => {
        blockModal();
        confirmCallback();
    });

    const cancelBtn = document.getElementById('cancel-btn');

    if (hasCancel) {
        cancelBtn.innerHTML = cancelText;
        cancelBtn.addEventListener('click', cancelCallback);
        cancelBtn.classList.remove('hidden');
    } else {
        cancelBtn.classList.add('hidden');
    }
}

// abre a modal
function openModal(opts) {
    if (opts) {
        registerModal(opts)
    }

    // modal.style.display = "block";
    modal.style.display = "flex";
    //apenas se for usar o flex
    centerModal();
}

// fecha a modal
function closeModal() {
    modal.style.display = "none";
}

// bloqueia a modal para n├úo fechar
function blockModal() {
    isModalProcessing = true;
    modal.style.display = 'flex'; // usar block se remover o flex
}

// centraliza a modal
function centerModal() {
    modal.style.top = '50%';
    modal.style.left = '50%';
    modal.style.transform = 'translate(-50%, -50%)';
}

function toQueryString(obj, prefix) {
    let str = [];
    for (let p in obj) {
        if (obj.hasOwnProperty(p)) {
            let k = prefix ? `${prefix}.${p}` : p, v = obj[p];
            str.push((v !== null && typeof v === "object") ?
                toQueryString(v, k) :
                encodeURIComponent(k) + "=" + encodeURIComponent(v));
        }
    }
    return str.join("&");
}

/**
 * Ativa ou desativa todos os bot├Áes de um elemento.
 *
 * true = desativa
 * false = ativa
 *
 * @param state true ou false.
 */
function disableElements(id, type, state) {
    const table = document.getElementById(id);
    const buttons = table.querySelectorAll(type);

    buttons.forEach(btn => {
        btn.disabled = state;
    });
}

/**
 * Adiciona um conte├║do innerHTML a um elemento DOM atrav├®s do seu seletor.
 *
 * @param selector para identificar o(s) elemento(s).
 * @param content em formato string ou HTML.
 */
function doHTML(selector, content) {
    document.querySelector(selector).innerHTML = content;
}

/**
 * Adiciona um conte├║do innerText a um elemento DOM atrav├®s do seu seletor.
 *
 * @param selector para identificar o(s) elemento(s).
 * @param content em formato string.
 */
function doText(selector, content) {
    document.querySelector(selector).innerText = content;
}

/**
 * Atrav├®s de um selector, substua a classe antiga pela nova.
 * Caso a classe antiga n├úo seja encontrada, a classe nova ser├í adicionada.
 *
 * @param selector para identificar o(s) elemento(s).
 * @param oldclass antiga.
 * @param newclass nova.
 */
function classReplace(selector, oldclass, newclass) {
    let e = document.querySelector(selector);

    if (e === null) return;
    if (e.classList.contains(oldclass)) {
        e.classList.remove(oldclass);
    }

    e.classList.add(newclass);
}

/**
 * Adiciona uma nova classe aos items de um array, caso exista a classe antiga, ela ser├í removida.
 *
 * @param items de elementos HTML
 * @param oldclass classe antiga a ser substitu├¡da
 * @param newclass classe nova que ir├í substituir a antiga, se existir.
 */
function classReplaceItems(items, oldclass, newclass) {
    items.forEach(item => {
        if (item.classList.contains(oldclass)) {
            item.classList.remove(oldclass);
        }
        item.classList.add(newclass);
    });
}

/**
 * classReplaceItemsBySelector substitui uma classe antiga por uma classe nova (mesmo que a antiga n├úo exista) atrav├®s do
 * seletor de cada um dos items do array.
 *
 * @param items de elementos HTML.
 * @param selector a ser pesquisado em cada um dos items.
 * @param oldclass classe antiga a ser substitu├¡da
 * @param newclass classe nova que ir├í substituir a antiga, se existir.
 */
function classReplaceItemsBySelector(items, selector, oldclass, newclass) {
    items.forEach(item => {
        const sel = item.querySelector(selector);
        if (sel.classList.contains(oldclass)) {
            sel.classList.remove(oldclass);
        }
        sel.classList.add(newclass);
    });
}

/**
 * Armazena um objeto no local storage.
 *
 * @param key chave identificadora do item
 * @param value o valor do item em formato String
 */
function setItem(key, value) {
    if (!isNull(value)) {
        if (isObject(value)) {
            window.localStorage.setItem(key, JSON.stringify(value));
        } else {
            window.localStorage.setItem(key, String(value));
        }
    }
}

/**
 * Obt├¬m um item armazenado no local storage.
 *
 * @param key chave identificadora do item.
 * @returns {string} valor do item.
 */
function getItem(key) {
    return window.localStorage.getItem(key);
}

/**
 * Retorna um item do local storage como JavaScript Object.
 *
 * @param key chave identificadora do item.
 * @returns {any|null}
 */
function getItemAsObject(key) {
    let item = window.localStorage.getItem(key);
    return item !== null ? JSON.parse(item) : null;
}

/**
 * Retorna verdadeiro caso o item exista no local storage.
 *
 * @param key chave identificadora do item.
 * @returns {boolean}
 */
function checkItem(key) {
    const item = window.localStorage.getItem(key);
    return item !== null;
}

/**
 * Remove um item do local storage.
 *
 * @param key chave identificadora do item.
 */
function removeItem(key) {
    window.localStorage.removeItem(key);
}

/**
 * Atrav├®s de um seletor, obt├¬m todos os elementos em formato de array.
 *
 * @param selector que busca os itens correspondentes.
 * @returns {(HTMLAnchorElement | HTMLElement | HTMLAreaElement | HTMLAudioElement | HTMLBaseElement | HTMLQuoteElement | HTMLBodyElement | HTMLBRElement | HTMLButtonElement | HTMLCanvasElement | HTMLTableCaptionElement | HTMLTableColElement | HTMLDataElement | HTMLDataListElement | HTMLModElement | HTMLDetailsElement | HTMLDialogElement | HTMLDivElement | HTMLDListElement | HTMLEmbedElement | HTMLFieldSetElement | HTMLFormElement | HTMLHeadingElement | HTMLHeadElement | HTMLHRElement | HTMLHtmlElement | HTMLIFrameElement | HTMLImageElement | HTMLInputElement | HTMLLabelElement | HTMLLegendElement | HTMLLIElement | HTMLLinkElement | HTMLMapElement | HTMLMenuElement | HTMLMetaElement | HTMLMeterElement | HTMLObjectElement | HTMLOListElement | HTMLOptGroupElement | HTMLOptionElement | HTMLOutputElement | HTMLParagraphElement | HTMLPictureElement | HTMLPreElement | HTMLProgressElement | HTMLScriptElement | HTMLSelectElement | HTMLSlotElement | HTMLSourceElement | HTMLSpanElement | HTMLStyleElement | HTMLTableElement | HTMLTableSectionElement | HTMLTableCellElement | HTMLTemplateElement | HTMLTextAreaElement | HTMLTimeElement | HTMLTitleElement | HTMLTableRowElement | HTMLTrackElement | HTMLUListElement | HTMLVideoElement)[]}
 */
function fetchArrayItems(selector) {
    return Array.from(document.querySelectorAll(selector));
}

/**
 * Adiciona para todos os eventos do eventType o callback do seletor encontrado.
 * A fun├º├úo callback dever├í obrigatorimente receber tr├¬s par├ómetros, eles s├úo:
 * event (evento do objeto), items (o array de objetos encontrados pelo seletor) e item (o element item atual).
 *
 * @param selector que busca os itens correspondentes.
 * @param eventType tipo de evento que ser├í escutado.
 * @param callback fun├º├úo callback que ser├í acionada quando o evento for executado.
 */
function addAllEventListener(selector, eventType, callback) {
    let items = fetchArrayItems(selector);

    items.forEach(item => {
        item.addEventListener(eventType, function(event) {
            callback(event, items, item);
        });
    });
}
Z7p9UDGyuj============================================================

[onload.js:src\main\resources\scripts\onload.js]
Z7p9UDGyuj============================================================
//~onload os scripts aqui s├úo carregados quando a tela estiver pronta.

// ao tentar redimencionar a tela, ajusta o tamanho da modal.
window.addEventListener('resize', () => {
    if (modal.style.display === 'flex') {
        centerModal();
    }
});

registerModal(modalBranch);
loadBranchAtual();

Z7p9UDGyuj============================================================

[panelmodals.js:src\main\resources\scripts\panelmodals.js]
Z7p9UDGyuj============================================================
//~--- script --

const bgDefault = 'bg-blue-500';
const bgSelected = 'bg-green-500';
const visibleIcon = 'visible-icon';
const hiddenIcon = 'hidden-icon';

function actionValidateBranch(id, branch) {
    const question = `
<span>A branch <strong>${branch}</strong> est├í atualiza com a ├║ltima vers├úo da branch abaixo?</span>
<br><br>
<div id="branch-options" class="flex space-x-2">
    <button id="main-btn" class="btn bg-blue-500 text-white px-4 py-2 rounded"><i id="main-icon" class="fas fa-check-circle hidden-icon"></i> main</button>
    <button id="develop-btn" class="btn bg-blue-500 text-white px-4 py-2 rounded"><i id="develop-icon" class="fas fa-check-circle hidden-icon"></i> develop</button>
    <button id="outra-btn" class="btn bg-blue-500 text-white px-4 py-2 rounded"><i id="outra-icon" class="fas fa-check-circle hidden-icon"></i> outra</button>
    <input type="text" id="extra-input" placeholder="Outra branch..." class="form-input px-4 py-2 border rounded" disabled>
</div>
<br>
    `;

    const modalConfig =
        {
            title: `A branch <strong>${branch}</strong> est├í atualizada?`,
            question: question,
            confirm: {
                text: 'Validar',
                callback: function() {
                    console.log('clicando no validar');
                }
            }
        };

    registerModal(modalConfig);

    const selButtons = '#branch-options .btn';
    cleanBranchButtonsState(null, selButtons);
    addAllEventListener(selButtons, 'click', handleClickBranchButton);

    openModal();
}

function cleanBranchButtonsState(items, selector) {
    const buttons = isNull(items) ? fetchArrayItems(selector) : items;

    // adiciona o fundo padr├úo para todos os bot├Áes
    classReplaceItems(buttons, bgSelected, bgDefault);

    // oculta todos os ├¡cones de check
    classReplaceItemsBySelector(buttons, 'i', visibleIcon, hiddenIcon);

    // desativa o input text
    document.getElementById('extra-input').disabled = true;
}

function handleClickBranchButton(e, items, item) {
    // reseta o estado de todos os bot├Áes
    cleanBranchButtonsState(items);

    // muda a cor para o bot├úo selecionado
    const btn = e.currentTarget;
    btn.classList.remove(bgDefault);
    btn.classList.add(bgSelected);

    // deixa o ├¡cone do bot├úo selecionado vis├¡vel
    const icon = btn.querySelector('i');
    icon.classList.remove(hiddenIcon);
    icon.classList.add(visibleIcon);

    // se o bot├úo for "outra-btn", deixa o input ativo
    if (btn.id === 'outra-btn') {
        const text = document.getElementById('extra-input');
        text.disabled = false;
        text.focus();
    }
}
Z7p9UDGyuj============================================================

[types.js:src\main\resources\scripts\types.js]
Z7p9UDGyuj============================================================
//--- Scripts

const HTTPMethod = Object.freeze({
   GET: 'GET',
   POST: 'POST',
   PUT: 'PUT',
   OPTION: 'OPTION',
   DELETE: 'DELETE',
   HEAD: 'HEAD'
});

const StatusType = Object.freeze({
   STARTED: 'started',
   RUNNING: 'running',
   FINISHED: 'finished',
   ERROR: 'error'
});

const MsgType = Object.freeze({
   DOWNLOAD: 'download',
   COMPILE: 'compile',
});

const DOMElementType = Object.freeze({
   BUTTON: 'button',
   LINK: 'a',
   INPUT: 'input',
   TEXTAREA: 'textarea',
   SELECT: 'select',
   OPTION: 'option',
});
Z7p9UDGyuj============================================================

[xUMD.js:src\main\resources\scripts\xUMD.js]
Z7p9UDGyuj============================================================
(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(factory);
    } else if (typeof module === 'object' && module.exports) {
        // Node. Does not work with strict CommonJS, but only CommonJS-like environments
        // that support module.exports, like Node.
        module.exports = factory();
    } else {
        // Browser globals (root is window)
        root.MyModule = factory();
    }
}(typeof self !== 'undefined' ? self : this, function () {
    // Module code here.

    return {
        sayHello: function() {
            console.log('Hello, world!');
        }
    };
}));
Z7p9UDGyuj============================================================

[wip.txt:wip.txt]
Z7p9UDGyuj============================================================
-------------------------------
-- W.I.P Working in Progress --
-------------------------------

1 - ss show : vers├úo reduzida e mais r├ípida, vers├úo completa - OK [19/06/24]
2 - r release : valida uma lista de demandas - OK [21/06/24]
3 - push : publica as ├║ltimas altera├º├Áes - OK [24/06/24]
4 - save state : salva o estado atual (commit hash) de cada m├│dulo - OK [27/06/24]
5 - load state : carrega o estado desejado - OK [27/06/24]
6 - create branch - cr : cria uma branch com base da branch atual ou com base de uma branch informada - OK [28/06/24]
7 - remote : apresenta as branches remotas a partir de uma pesquisa [01/07/24] - OK
8 - change branch version : atualiza os POMs com a vers├úo que voc├¬ colocar. Pode ser para todos ou para pacotes selecinados
9 - conserta o bug do "cr ds <branch>" quando tenta  mudar para uma branch que n├úo existe ele mosta que "mudou"
Z7p9UDGyuj============================================================

